const NameLibrary = require("../variables/NameLibrary")
const Commands = require("../variables/Commands")
const keyboard = require("../variables/Keyboards")
const api = require("../middleware/API")
const Data = require("../models/CacheData")
const {Player, PlayerStatus, PlayerInfo, Country, CountryRoads, CityRoads, PlayerResources, Warning, OfficialInfo,
    Transactions, CountryTaxes, Chats, VKChats
} = require("../database/Models")
const Samples = require("../variables/Samples")
const sequelize = require("../database/DataBase")
const OutputManager = require("../controllers/OutputManager")
const axios = require('axios')
const groupId = parseInt(process.env.GROUPID)
const ChatGPTModes = require('../variables/BotCallModes')
const Rules = require("../variables/Rules")
const APIKeysGenerator = require("../models/ApiKeysGenerator")
const CrossStates = require("./CrossStates")
const BotReactions = require("./Reactions")
const StopList = require("../files/StopList.json")

class ChatController
{
    async CommandHandler(context)
    {
        try
        {
            if(context.command?.match(/^–Ω–∞—á–∞—Ç—å$/) && context.peerType === "user")
            {
                await OutputManager.WelcomeMessage(context)
                return true
            }

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
            if(context.messagePayload)
            {
                return await this.ChatButtonHandler(context)
            }

            // –ò–≥—Ä–æ–∫–∏+
            if(context.command?.match(/^–±–æ—Ç$/))
            {
                await this.BotCall(context)
                return true
            }
            if(context.command?.match(Commands.clearKeyboard) && context.peerType === "chat")
            {
                await context.send("–£–±–∏—Ä–∞—é", {keyboard: keyboard.none})
                return true
            }
            if(context.command?.match(Commands.badJoke))
            {
                await context.send(NameLibrary.GetRandomSample("bad_jokes"))
                return true
            }
            if(context.command?.match(Commands.location))
            {
                await this.LocationRequest(context)
                return true
            }
            if(context.command?.match(Commands.aboutMe))
            {
                await context.send(context.player.GetInfo(), {attachment: context.player.avatar, disable_mentions: true})
                return true
            }
            if(context.command?.match(Commands.checkLocation))
            {
                await this.CheckLocation(context)
                return true
            }
            if(context.command?.match(Commands.checkDocs))
            {
                await this.CheckDocs(context)
                return true
            }
            if(context.command?.match(Commands.marry))
            {
                await this.OfferMarry(context)
                return true
            }
            if(context.command?.match(Commands.send))
            {
                await this.SendResource(context)
                return true
            }
            if(context.command?.match(Commands.relax))
            {
                await this.Relax(context)
                return true
            }
            if(context.command?.match(/^–º–∏—Ä$/))
            {
                await context.send("üåç –¢–∞–∫–æ–≤ –Ω–∞—à –º–∏—Ä, –Ω–æ —á—Ç–æ —Å–º–æ—Ç—Ä–µ—Ç—å —Ç—ã —Ö–æ—á–µ—à—å?", {attachment: Data.variables.globalMap, keyboard: keyboard.build([[keyboard.greyButton({name: "üó∫ –ö–∞—Ä—Ç–∞ –¥–æ—Ä–æ–≥", type: "show_road_map"})]]).inline()})
                return true
            }
            if(context.command?.match(Commands.map))
            {
                await this.RoadMap(context)
                return true
            }
            if(context.command?.match(Commands.work))
            {
                await this.Work(context)
                return true
            }
            if(context.command?.match(Commands.countries))
            {
                await this.ShowCountriesInfo(context)
                return true
            }
            if(context.command?.match(Commands.events))
            {
                await this.ShowEvents(context)
                return true
            }
            if(context.command?.match(Commands.countriesActive))
            {
                await this.ShowCountriesActive(context)
                return true
            }
            if(context.command?.match(Commands.divorce))
            {
                await this.Divorce(context)
                return true
            }
            if(context.command?.match(Commands.stats))
            {
                await this.ShowPlayerActive(context)
                return true
            }
            if(context.command?.match(Commands.getCitizenship))
            {
                await this.GetCitizenship(context)
                return true
            }
            if(context.command?.match(Commands.toStall) && context.peerType === "chat")
            {
                await this.ToStall(context)
                return true
            }
            if(context.command?.match(Commands.changeNick) && context.peerType === "chat")
            {
                await this.ChangeNick(context)
                return true
            }
            if(context.command?.match(Commands.changeDescription) && context.peerType === "chat")
            {
                await this.ChangeDescription(context)
                return true
            }
            if(context.command?.match(Commands.top))
            {
                await this.SendTopsMessage(context)
                return true
            }
            if(context.command?.match(Commands.extract))
            {
                await this.Extract(context)
                return true
            }
            if(context.command?.match(Commands.getImarat))
            {
                await this.GetImarat(context)
                return true
            }
            if(context.command?.match(Commands.refuseCitizenship))
            {
                await this.RefuseCitizenship(context)
                return true
            }
            if(context.command?.match(Commands.unregistered) && context.peerType === "chat")
            {
                await this.GetUnregList(context)
                return true
            }
            if(context.command?.match(Commands.botMem))
            {
                await this.BotMem(context)
                return true
            }
            if(context.command?.match(Commands.botForgot))
            {
                await this.BotForgot(context)
                return true
            }
            if(context.command?.match(Commands.getFromBudget))
            {
                await this.GetResFromBudget(context)
                return true
            }
            if(context.command?.match(Commands.budget))
            {
                await this.GetBudget(context)
                return true
            }
            if(context.command?.match(Commands.resources))
            {
                await this.GetResources(context)
                return true
            }
            if(context.command?.match(Commands.registration))
            {
                await this.Registration(context)
                return true
            }
            if(context.command?.match(Commands.info))
            {
                await this.CountryInfo(context)
                return true
            }
            if(context.command?.match(Commands.rules))
            {
                await this.GetRule(context)
                return true
            }
            if(context.command?.match(/^–ø–∏–≤–æ$/))
            {
                await this.DrinkBeer(context)
                return true
            }
            if(context.command?.match(/^!–æ—á–∏—Å—Ç–∫–∞$/))
            {
                await this.Cleaning(context)
                return true
            }
            if(context.command?.match(/^–±–æ—Ç —Å—Ç–∞—Ç—É—Å$/))
            {
                await context.send(`‚è≥ –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –±—ã–ª–∞ ${NameLibrary.ParseDateTime(Data.lastReload)}`)
                return true
            }


            //–†–ü –∫–æ–º–∞–Ω–¥—ã (–∏–≥—Ä–æ–∫+)
            if(context.command?.match(/^!—Ä–ø$/))
            {
                await this.RP(context)
                return true
            }
            if(context.command?.match(/^–ø–æ–∂–∞—Ç—å /))
            {
                await this.Shake(context)
                return true
            }
            if(context.command?.match(/^—Ç—ã–∫|^—Ç—ã–∫–Ω—É—Ç—å/))
            {
                await this.Poke(context)
                return true
            }
            if(context.command?.match(/^semen$/))
            {
                await context.send("üí¶üí¶üí¶ Oh sheet, I'm sorry!")
                return true
            }

            //–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä+
            if(context.command?.match(/^id$|^–∏–¥$/))
            {
                await this.GetID(context)
                return true
            }
            if(context.command?.match(Commands.warning))
            {
                await this.SendWarningForm(context)
                return true
            }
            if(context.command?.match(Commands.dub))
            {
                await this.StartRepeat(context)
                return true
            }
            if(context.command?.match(Commands.stopDub))
            {
                await this.StopRepeat(context)
                return true
            }
            if(context.command?.match(Commands.warnings))
            {
                await this.SendWarnList(context)
                return true
            }
            if(context.command?.match(Commands.delete))
            {
                await this.DeleteMessage(context)
                return true
            }
            if(context.command?.match(Commands.globalMute))
            {
                await this.GlobalMute(context)
                return true
            }
            if(context.command?.match(Commands.mute) && context.peerType === "chat")
            {
                await this.Mute(context)
                return true
            }
            if(context.command?.match(Commands.unmute))
            {
                await this.Unmute(context)
                return true
            }
            if(context.command?.match(Commands.sword))
            {
                await this.Censorship(context)
                return true
            }
            if(context.command?.match(/^\?$/) && context.peerType === "chat")
            {
                await this.IsRegistered(context)
                return true
            }
            if(context.command?.match(Commands.getChatLink) && context.peerType === "chat")
            {
                await this.GetChatLink(context)
                return true
            }
            if(context.command?.match(/^–±–æ—Ç —Ä–µ–∂–∏–º/) && context.peerType === "chat")
            {
                await this.ChangeBotMode(context)
                return true
            }
            if(context.command?.match(/^—á–∞—Ç –∏–Ω—Ñ–æ/))
            {
                await this.GetChatInfo(context)
                return true
            }
            if(context.command?.match(/^—Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤/))
            {
                await this.GetChatList(context)
                return true
            }


            //–ì–ú-—ã+
            if(context.command?.match(Commands.teleport))
            {
                await this.Teleport(context)
                return true
            }
            if(context.command?.match(Commands.cheating))
            {
                await this.CheatResource(context)
                return true
            }
            if(context.command?.match(Commands.pickUp))
            {
                await this.PickUpResource(context)
                return true
            }
            if(context.command?.match(Commands.whereYou))
            {
                await this.LocatePlayer(context)
                return true
            }


            //–ê–¥–º–∏–Ω—ã+
            if(context.command?.match(Commands.ban))
            {
                await this.SendBanForm(context)
                return true
            }
            if(context.command?.match(/^–∫–∏–∫/) && context.peerType === "chat")
            {
                await this.KickUser(context)
                return true
            }
            if(context.command?.match(Commands.ignore))
            {
                await this.Ignore(context)
                return true
            }
            if(context.command?.match(Commands.trolling))
            {
                await this.AddTrollSample(context)
                return true
            }
            if(context.command?.match(Commands.stopTrolling))
            {
                await this.StopTrolling(context)
                return true
            }
            if(context.command?.match(Commands.globalKick))
            {
                await this.GlobalKick(context)
                return true
            }
            if(context.command?.match(/!–æ–±—ä—è–≤–ª–µ–Ω–∏–µ /))
            {
                await this.GlobalMailing(context)
                return true
            }

            //–¢–µ—Ö-–ø–æ–¥–¥–µ—Ä–∂–∫–∞+
            if(context.command?.match(/^–ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å|^—Ä–µ–ª–æ–∞–¥|^—Ä–µ–ª–æ–¥|^reload/))
            {
                await this.Reload(context)
                return true
            }
            if(context.command?.match(/^–¥–æ–±–∞–≤–∏—Ç—å —á–∞—Ç /) && context.peerType === "chat")
            {
                await this.AddCountryChat(context)
                return true
            }
            if(context.command?.match(/^—É–¥–∞–ª–∏—Ç—å —á–∞—Ç/) && context.peerType === "chat")
            {
                await this.RemoveCountryChat(context)
                return true
            }
            if(context.command?.match(/^—á–∞—Ç—ã/))
            {
                await this.ShowCountryChats(context)
                return true
            }
            if(context.command?.match(/^–∑–∞–∫—Ä–µ–ø/))
            {
                await this.GiveAttachment(context)
                return true
            }
            if(context.command?.match(/^—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é |^–∏–∑–º–µ–Ω–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é /))
            {
                await this.SetVar(context)
                return true
            }
            if(context.command?.match(/^—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–∫—Ç–∏–≤ /))
            {
                await this.SetActive(context)
                return true
            }
            if(context.command?.match(/^–ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ/))
            {
                await this.ShowVars(context)
                return true
            }
            if(context.command?.match(/^—Ä–µ—Å–µ—Ç|^reset/))
            {
                await this.Reset(context)
                return true
            }
            if(context.command?.match(/^–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–∞–≤–∏—Ç–µ–ª–µ–π/))
            {
                await this.ResetLeaders(context)
                return true
            }
            if(context.command?.match(/^user/))
            {
                await this.GetUserObject(context)
                return true
            }
            if(context.command?.match(/^–±–æ—Ç,? –≤—ã–π–¥–∏ –∏–∑ —á–∞—Ç–∞/))
            {
                await this.LeaveFromChat(context)
                return true
            }
            if(context.command?.match(/^–ø—Ä–æ—Å—Ç–æ –¥–∞–π—Ç–µ –º–Ω–µ –ø—É–ª—å—Ç –æ—Ç —è–¥–µ—Ä–∫–∏!/))
            {
                await this.GiveNuclearRemove(context)
                return true
            }
            if(context.command?.match(/^!—Å–∫—Ä—ã—Ç—å —á–∞—Ç$/) && context.peerType === "chat")
            {
                await this.HideChat(context)
                return true
            }
            if(context.command?.match(/^!—Å–ª–µ–¥–∏—Ç—å/) && context.peerType === "chat")
            {
                await this.Listen(context)
                return true
            }
            if(context.command?.match(/^!–Ω–µ —Å–ª–µ–¥–∏—Ç—å/))
            {
                await this.ClearListen(context)
                return true
            }
            if(context.command?.match(/^!—Å–ø–∏—Å–æ–∫ —Å–ª–µ–∂–∫–∏/))
            {
                await this.ListenList(context)
                return true
            }
            if(context.command?.match(/^!code$/))
            {
                await this.AccessCode(context)
                return true
            }
            if(context.command?.match(/^–ø–æ–¥—Å—á–∏—Ç–∞—Ç—å –∞–∫—Ç–∏–≤ –∑–∞ –¥–µ–Ω—å$/) && NameLibrary.RoleEstimator(context.player.role) >= 4)
            {
                await api.EveryDayLoop()
                await context.send("‚úÖ –ü–æ–¥—Å—á–∏—Ç–∞–ª")
                return true
            }


            if(context.peerType !== "chat") return false
            if(context.replyMessage?.senderId === groupId)
            {
                await this.ReplyRequest(context)
                return true
            }
            if(context.command?.match(/^–±–æ—Ç,? |^–¥–µ–º–µ–Ω—Ç–∏–π,? |bot,? /))
            {
                await this.BotRequest(context)
                return true
            }

            if(Data.samples[context.player.id])
            {
                let sample = Data.samples[context.player.id][Math.round(Math.random() * (Data.samples[context.player.id].length - 1))]
                await context.send(sample.sample, {attachment: sample.attachment})
            }
            if(context.chat.antiMuteList[context.player.id]) await this.RepeatMessage(context)
            if(context.attachments[0]?.type === "audio") await this.MusicAnalysis(context)
        }
        catch (e)
        {
            await api.SendLogs(context, "ChatController/CommandHandler", e)
        }
    }

    async ChatButtonHandler(context)
    {
        try
        {
            if(!context.messagePayload.type) return false
            if(context.messagePayload?.type === "extract")
            {
                await this.ExtractResource(context, context.messagePayload.action)
                return true
            }
            if(context.messagePayload?.type === "show_road_map")
            {
                await this.RoadMap(context)
                return true
            }
            if(context.messagePayload.type === "to_other_city")
            {
                await this.ToOtherCity(context, Data.ParseButtonID(context.messagePayload.action))
                return true
            }
            if(context.messagePayload.type === "to_other_country")
            {
                await this.ToOtherCountry(context, Data.ParseButtonID(context.messagePayload.action))
                return true
            }
            if(context.messagePayload.type === "ratings")
            {
                await this.SendRating(context)
                return true
            }
            if(context.messagePayload.type === "show_chat")
            {
                await this.ShowChat(context)
                return true
            }
            if(context.messagePayload.type === "reg")
            {
                await this.Registration(context)
                return true
            }
            if(context.messagePayload.type === "country_list")
            {
                await OutputManager.GetCountryCarousel(context)
                return true
            }
            return false
        }
        catch (e)
        {
            await api.SendLogs(context, "ChatController/ChatButtonHandler", e)
        }
    }

    async AccessCode(context)
    {
        if(NameLibrary.RoleEstimator(context.player.role) < 4) return
        if(!context.player.TGID) return
        await context.TGapi.sendMessage(context.player.TGID, "‚úÖ –ö–æ–¥ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: " + Data.accessKey)
    }

    async Listen(context)
    {
        if(NameLibrary.RoleEstimator(context.player.role) < 4)
        {
            return
        }
        if(!context.text.match(Data.accessKey)) return
        if(context.command.match(/—á–∞—Ç/))
        {
            let chatID = context.command.match(/\d+/)
            if(!chatID)
            {
                await context.send("–ú–Ω–µ –Ω—É–∂–µ–Ω –Ω–æ–º–µ—Ä —á–∞—Ç–∞")
                return
            }
            chatID = parseInt(chatID[0])
            try
            {
                const chat = await api.api.messages.getConversationsById({
                    peer_ids: chatID + 2000000000
                })
                if(chat.items[0])
                {
                    Data.chatListen[chatID + 2000000000] = context.peerId - 2000000000
                    await context.send("‚úÖ –ß–∞—Ç –¥–æ–±–∞–≤–ª–µ–Ω")
                }
                else
                {
                    await context.send("‚ö† –ß–∞—Ç –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω")
                }
            }
            catch (e)
            {
                await context.send("‚ö† –¢–∞–∫–æ–≥–æ —á–∞—Ç–∞ –Ω–µ—Ç")
            }
        }
        else
        {
            if(context.replyPlayers.length === 0)
            {
                return
            }
            Data.userListen[context.replyPlayers[0]] = context.peerId - 2000000000
            await context.send("‚úÖ –ò–≥—Ä–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω")
        }
        Data.ChangeCode()
    }

    async ListenList(context)
    {
        if(NameLibrary.RoleEstimator(context.player.role) < 4)
        {
            return
        }
        if(!context.text.match(Data.accessKey)) return
        await context.send(`Chats:\n${JSON.stringify(Data.chatListen, null, "\t")}\n\nUsers:\n${JSON.stringify(Data.userListen, null, "\t")}`)
        Data.ChangeCode()
    }

    async ClearListen(context)
    {
        if(NameLibrary.RoleEstimator(context.player.role) < 4)
        {
            return
        }
        if(!context.text.match(Data.accessKey)) return
        if(context.command.match(/—á–∞—Ç/))
        {
            Data.chatListen = {}
            await context.send("‚úÖ –°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ –æ—á–∏—â–µ–Ω")
        }
        else
        {
            Data.userListen = {}
            await context.send("‚úÖ –°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ –æ—á–∏—â–µ–Ω")
        }
        Data.ChangeCode()
    }

    async HideChat(context)
    {
        if(NameLibrary.RoleEstimator(context.player.role) < 4)
        {
            return
        }
        context.chat.hide = !context.chat.hide
        await Data.SaveVKChat(context.chat.id)
        await context.send(`‚úÖ –¢–µ–ø–µ—Ä—å —á–∞—Ç ${context.chat.hide ? "—Å–∫—Ä—ã—Ç" : "–æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è"}`)
    }

    async GiveNuclearRemove(context)
    {
        if(NameLibrary.RoleEstimator(context.player.role) < 4)
        {
            return
        }
        await context.send(`‚òÑ‚òÑ‚òÑ –í–æ—Ç –≤–∞—à –ü–£–õ–¨–¢ –û–¢ –Ø–î–ï–†–ö–ò, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –≤—ã –Ω–∞—á–Ω–µ—Ç–µ –º–∞—Å—Å–æ–≤—ã–π –≥–µ–Ω–æ—Ü–∏–¥, —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ —á–∞—Ç–∞, –∫—Ä–æ–≤—å, –∫–∏—à–∫–∏, –†–ê–°–ü–ò–î–û–†–ê–°–ò–õ–û!!!!1!11!`, {keyboard: keyboard.build([[keyboard.negativeCallbackButton({label: "üî•–ù–∞—á–∞—Ç—å –≥–µ–Ω–æ—Ü–∏–¥!üî•", payload: {moderID: context.player.id}})]]).inline()})
    }

    async RP(context)
    {
        let temp = null
        let country = null
        for(let i = 0; i < Data.countries.length; i++)
        {
            if(Data.countries[i])
            {
                if(Data.countries[i].chatID)
                {
                    temp = Data.countries[i].chatID.split("|")
                    for(const chat of temp)
                    {
                        if (parseInt(chat) === context.peerId)
                        {
                            country = Data.countries[i]
                            break
                        }
                    }
                }
            }
        }
        let leader = (country?.leaderID === context.player.id) || (context.official?.countryID === country?.id && context.official?.canAppointOfficial)
        if(!leader && NameLibrary.RoleEstimator(context.player.role) < 1)
        {
            return
        }
        context.chat.RP = !context.chat.RP
        await Data.SaveVKChat(context.chat.id)
        await context.send(`‚úÖ –†–ü —Ä–µ–∂–∏–º ${context.chat.RP ? "–≤–∫–ª—é—á–µ–Ω" : "–≤—ã–∫–ª—é—á–µ–Ω"}`)
    }

    async Cleaning(context)
    {
        let temp = null
        let country = null
        for(let i = 0; i < Data.countries.length; i++)
        {
            if(Data.countries[i])
            {
                if(Data.countries[i].chatID)
                {
                    temp = Data.countries[i].chatID.split("|")
                    for(const chat of temp)
                    {
                        if (parseInt(chat) === context.peerId)
                        {
                            country = Data.countries[i]
                            break
                        }
                    }
                }
            }
        }
        let leader = (country?.leaderID === context.player.id) || (context.official?.countryID === country?.id && context.official?.canAppointOfficial)
        if(!leader && NameLibrary.RoleEstimator(context.player.role) < 1)
        {
            return
        }
        context.chat.clean = !context.chat.clean
        await Data.SaveVKChat(context.chat.id)
        await context.send(`‚úÖ –†–µ–∂–∏–º –æ—á–∏—Å—Ç–∫–∏ —á–∞—Ç–∞ ${context.chat.clean ? "–≤–∫–ª—é—á–µ–Ω" : "–≤—ã–∫–ª—é—á–µ–Ω"}`)
    }

    async RepeatMessage(context)
    {
        try
        {
            let attachment = []
            for(const element of context.attachments)
            {
                if(element.type === "sticker")
                {
                    if(context.replyMessage)
                    {
                        await api.api.messages.send({
                            peer_id: context.peerId,
                            random_id: Math.round(Math.random() * 100000),
                            sticker_id: element.id,
                            forward: `{"conversation_message_ids":${context.replyMessage.conversationMessageId},"peer_id":${context.peerId},"is_reply":true}`
                        })
                    }
                    else
                    {
                        await api.SendSticker(context.peerId, element.id)
                    }
                    return
                }
                attachment.push(element.toString())
            }
            if(context.replyMessage)
            {
                await context.send(context.chat.antiMuteList[context.player.id].name + ":\n" + context.text, {
                    attachment: attachment,
                    forward: `{"conversation_message_ids":${context.replyMessage.conversationMessageId},"peer_id":${context.peerId},"is_reply":true}`
                })
            }
            else
            {
                await context.send(context.chat.antiMuteList[context.player.id].name + ":\n" + context.text, {attachment: attachment})
            }
        } catch (e) {}
    }

    async ShowChat(context)
    {
        try
        {
            let chats = await Chats.findAll({where: {countryID: context.messagePayload.countryID}})
            let request = `–ß–∞—Ç—ã —Ñ—Ä–∞–∫—Ü–∏–∏ ${Data.countries[context.messagePayload.countryID].GetName()}:\n\n`
            for(const chat of chats)
            {
                request += "\n\n " + chat.dataValues.name + " - " + "https://vk.cc/" + chat.dataValues.link
            }
            if(chats.length === 0) request += "–ß–∞—Ç—ã –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã"
            await context.send(request)
        }
        catch (e) {}
    }

    async Poke(context)
    {
        try
        {
            if(context.replyPlayers.length === 0) return
            let phrase = context.text.replace(/ ?\[.*?] ?/i, "")
            phrase = phrase?.replace(/^—Ç—ã–∫–Ω—É—Ç—å ?\n?|^—Ç—ã–∫ ?\n?/i, "")
            let first = await api.GetName(context.player.id)
            let second = await api.GetName(context.replyPlayers[0], "acc")
            let user = await api.GetUserData(context.player.id)
            await context.send(`üëâüêΩ | ${first} –ø–æ—Ç—Ä–æ–≥–∞–ª${(parseInt(user.sex) === 2) ? "" : "–∞"} –ø–∞–ª–∫–æ–π ${second}` + (phrase.length !== 0 ? `\nüí¨ –° —Ä–µ–ø–ª–∏–∫–æ–π: ¬´${phrase}¬ª` : ""))
        }
        catch (e) {}
    }

    async Shake(context)
    {
        try
        {
            if(context.replyPlayers.length === 0) return
            let phrase = context.text.replace(/ ?\[.*?] ?/i, "")
            phrase = phrase?.replace(/^–ø–æ–∂–∞—Ç—å /i, "")
            if(phrase.match(/^—Ö—É–π|^–ø–∏—Å—é–Ω|^–ø–∏—Å—å?–∫—É|^—á–ª–µ–Ω|^–ø–µ–Ω–∏—Å/))
            {
                phrase = phrase.replace(/^—Ö—É–π ?\n?|^–ø–∏—Å—é–Ω ?\n?|^–ø–∏—Å—å?–∫—É ?\n?|^—á–ª–µ–Ω ?\n?|^–ø–µ–Ω–∏—Å ?\n?/i, "")
                let first = await api.GetName(context.player.id)
                let second = await api.GetName(context.replyPlayers[0], "dat")
                let user = await api.GetUserData(context.player.id)
                await context.send(`ü´±üçÜ | ${first} –ø–æ–∂–∞–ª${(parseInt(user.sex) === 2) ? "" : "–∞"} –ø–∏—Å—é–Ω ${second}${phrase.length !== 0 ? `\nüí¨ –° —Ä–µ–ø–ª–∏–∫–æ–π: ¬´${phrase}¬ª` : ""}`)
            }
        }
        catch (e) {}
    }

    async GlobalMailing(context)
    {
        try
        {
            if (NameLibrary.RoleEstimator(context.player.role) < 3)
            {
                return
            }
            let text = context.text.replace(/!–æ–±—ä—è–≤–ª–µ–Ω–∏–µ /, "")
            if(text.length > 0)
            {
                await api.GlobalMailing(text, context.attachments.map((x)=>{return x.toString()}).join(','))
                await context.send("‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
            }
            else
            {
                await context.send("‚ö† –Ø –Ω–µ –º–æ–≥—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
            }
        }
        catch (e) {}
    }

    async GlobalKick(context)
    {
        try
        {
            if (NameLibrary.RoleEstimator(context.player.role) < 3)
            {
                return
            }
            if(StopList.includes(context.replyPlayers[0]))
            {
                return
            }
            if(context.replyPlayers?.length !== 0)
            {
                let player = await Player.findOne({where: {id: context.replyPlayers[0]}, attributes: ["role"]})
                if(NameLibrary.RoleEstimator(player?.dataValues.role) >= NameLibrary.RoleEstimator(context.player.role))
                {
                    await context.send("‚ö† –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∫–∏–∫–Ω—É—Ç—å –∞–¥–º–∏–Ω–∞ –Ω–∞—Ö–æ–¥—è—â–µ–≥–æ—Å—è –Ω–∞ –æ–¥–Ω–æ–º —Å –≤–∞–º–∏ —Ä–∞–Ω–≥–µ –∏–ª–∏ –≤—ã—à–µ")
                    return
                }
                await api.BanUser(context.replyPlayers[0])
                await context.send("üòà")
            }
        }
        catch (e) {}
    }

    async DrinkBeer(context)
    {
        try
        {
            let time = new Date()
            if(context.player.lastBeerCup - time > 0)
            {
                let msg = await context.send(`${context.player.nick}, –ø–æ–≤—Ç–æ—Ä–∏ —á–µ—Ä–µ–∑ ${NameLibrary.ParseFutureTime(context.player.lastBeerCup)} –í—ã–ø–∏—Ç–æ –≤—Å–µ–≥–æ - ${context.player.beer.toFixed(1)} –ª. üç∫`)
                if(context.chat?.clean)
                {
                    setTimeout(async () => {
                        try
                        {
                            await api.api.messages.delete({
                                conversation_message_ids: context.conversationMessageId,
                                delete_for_all: 1,
                                peer_id: context.peerId
                            })
                        }catch (e) {}
                        try
                        {
                            await api.api.messages.delete({
                                conversation_message_ids: msg.conversationMessageId,
                                delete_for_all: 1,
                                peer_id: msg.peerId
                            })
                        }catch (e) {}
                    }, 20000)
                }
                return
            }
            time.setHours(time.getHours() + 1)
            let drinking = Math.random() * 3
            context.player.beer += parseFloat(drinking.toFixed(1))
            context.player.lastBeerCup = time
            await Player.update({beer: context.player.beer}, {where: {id: context.player.id}})
            let msg = await context.send(`${context.player.nick}, —Ç—ã –≤—ã–ø–∏–ª${context.player.gender ? "" : "–∞"} ${drinking.toFixed(1)} –ª. –ø–∏–≤–∞. –í—ã–ø–∏—Ç–æ –≤—Å–µ–≥–æ - ${context.player.beer.toFixed(1)} –ª. üç∫\n–°–ª–µ–¥—É—é—â–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ —á–∞—Å`)
            if(context.chat?.clean)
            {
                setTimeout(async () => {
                    try
                    {
                        await api.api.messages.delete({
                            conversation_message_ids: context.conversationMessageId,
                            delete_for_all: 1,
                            peer_id: context.peerId
                        })
                    } catch (e) {}
                    try
                    {
                        await api.api.messages.delete({
                            conversation_message_ids: msg.conversationMessageId,
                            delete_for_all: 1,
                            peer_id: msg.peerId
                        })
                    } catch (e) {}
                }, 60000)
            }
        }
        catch (e)
        {
            await api.SendLogs(context, "ChatController/DrinkBeer", e)
        }
    }

    async GetRule(context)
    {
        try
        {
            let part = context.command.match(/\d+[,.\/]\d+/)
            if(part)
            {
                part = part[0].split(/[,.\/]/)
                if(!Rules[part[0]])
                {
                    await context.send("‚ö† –°—Ç–∞—Ç—å–∏ " + part[0] + " –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                    return
                }
                if(Rules[part[0]]["text"])
                {
                    await context.send(Rules[part[0]]["text"])
                    return
                }
                if(!Rules[part[0]][part[1]])
                {
                    await context.send("‚ö† –ü—É–Ω–∫—Ç–∞ " + part[1] + " –≤ —Å—Ç–∞—Ç—å–µ " + part[0] + " –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                    return
                }
                await context.send(Rules[part[0]][part[1]]["text"])
                return
            }
            part = context.command.match(/\d+/)
            if(part)
            {
                if(!Rules[part])
                {
                    await context.send("‚ö† –°—Ç–∞—Ç—å–∏ " + part[0] + " –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                    return
                }
                if(Rules[part]["text"])
                {
                    await context.send(Rules[part[0]]["text"])
                    return
                }
                let request = ""
                for(const key of Object.keys(Rules[part]))
                {
                    request += Rules[part][key]["text"] + "\n\n"
                }
                await context.send(request)
            }
        }
        catch (e)
        {
            await api.SendLogs(context, "ChatController/GetRule", e)
        }
    }

    async SetActive(context)
    {
        try
        {
            if(NameLibrary.RoleEstimator(context.player.role) < 4)
            {
                return
            }
            let temp = null
            let country = null
            for(const key of Data.countries)
            {
                if(key?.tags)
                {
                    temp = new RegExp(key.tags)
                    if(context.command.match(temp))
                    {
                        country = key
                        break
                    }
                }
            }
            if(!country)
            {
                await context.send("‚ö† –§—Ä–∞–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return
            }
            let newActive = context.command.match(/\d+/)
            newActive = parseInt(newActive)
            if(isNaN(newActive))
            {
                await context.send("‚ö† –ù–µ –≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–ª–∞")
                return
            }
            country.active = newActive
            await context.send(`–î–ª—è —Ñ—Ä–∞–∫—Ü–∏–∏ ${country.GetName(context.player.platform === "IOS")} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∞–∫—Ç–∏–≤ ${newActive} —Å–æ–æ–±—â–µ–Ω–∏–π`)
        }
        catch (e)
        {
            await api.SendLogs(context, "ChatController/SetActive", e)
        }
    }

    async CountryInfo(context)
    {
        try
        {
            const getLeaders = (countryID) =>
            {
                let request = ""
                if(Data.officials[countryID])
                {
                    for(const id of Object.keys(Data.officials[countryID]))
                    {
                        if(Data.officials[countryID][id].canAppointMayors)
                        {
                            request += `\n*id${id}(${Data.officials[countryID][id].nick})`
                        }
                    }
                }
                return request
            }
            let temp, country, request = ""
            for(const key of Data.countries)
            {
                if(key?.tags)
                {
                    temp = new RegExp(key.tags)
                    if(context.command.match(temp))
                    {
                        country = key
                        break
                    }
                }
            }
            if(!country) return
            const photos = []
            photos.push(country.photoURL)
            photos.push(country.welcomePhotoURL)
            photos.push(Data.cities[country.capitalID].photoURL)
            const population = await PlayerStatus.count({where: {citizenship: country.id}})
            const leader = await Player.findOne({where: {id: country.leaderID}, attributes: ["nick"]})
            request += country.GetName() + "\n"
            request += country.description + "\n\n"
            request += "üåê –°—Ç–æ–ª–∏—Ü–∞ - " + Data.cities[country.capitalID].name + "\n"
            request += "üë• –ù–∞—Å–µ–ª–µ–Ω–∏–µ - " + population + "\n"
            request += `üëë –ü—Ä–∞–≤–∏—Ç–µ–ª${country.isParliament ? "–∏:\n" : "—å - "}${country.isParliament ? ((leader ? `@id${country.leaderID}(${leader.dataValues.nick})` : "") + getLeaders(country.id)) : (leader ? `@id${country.leaderID}(${leader.dataValues.nick})` : "–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω")}\n`
            request += "üèõ –§–æ—Ä–º–∞ –ø—Ä–∞–≤–ª–µ–Ω–∏—è - " + country.governmentForm + "\n\n"
            request += "–ù–∞ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏ –º–æ–∂–Ω–æ –¥–æ–±—ã—Ç—å:\n\n"
            let res = country.resources.split(".")
            for(const r of res)
            {
                request += NameLibrary.GetResourceName(r) + "\n"
            }
            if(country.tested) request += "\n‚ùó –§—Ä–∞–∫—Ü–∏—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ –∏—Å–ø—ã—Ç–∞—Ç–µ–ª—å–Ω–æ–º —Å—Ä–æ–∫–µ\n"
            request += "\nüèÜ –°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å - " + country.stability + "\n"
            if(NameLibrary.RoleEstimator(context.player.role) > 1)
            {
                request += "üåæ –ö—Ä–µ—Å—Ç—å—è–Ω—Å—Ç–≤–æ –∏ –≥–æ—Ä–æ–∂–∞–Ω–µ - " + country.peasantry + "\n"
                request += "üôè –†–µ–ª–∏–≥–∏—è - " + country.religion + "\n"
                request += "üëë –ê—Ä–∏—Å—Ç–æ–∫—Ä–∞—Ç–∏—è - " + country.aristocracy + "\n"
                request += "‚öî –í–æ–µ–Ω–Ω—ã–µ - " + country.military + "\n"
                request += "üí∞ –ö—É–ø–µ—á–µ—Å—Ç–≤–æ - " + country.merchants + "\n"
            }
            let msg = await context.send(request, {attachment: photos.join(",")})
            if(context.chat?.clean)
            {
                setTimeout(async () => {
                    try {
                        await api.api.messages.delete({
                            conversation_message_ids: context.conversationMessageId,
                            delete_for_all: 1,
                            peer_id: context.peerId
                        })
                    } catch (e) {
                    }
                    try {
                        await api.api.messages.delete({
                            conversation_message_ids: msg.conversationMessageId,
                            delete_for_all: 1,
                            peer_id: msg.peerId
                        })
                    } catch (e) {
                    }
                }, 60000)
            }
        }
        catch (e)
        {
            await api.SendLogs(context, "ChatController/CountryInfo", e)
        }
    }

    async ChangeBotMode(context)
    {
        try
        {
            let temp = null
            let country = null
            for(let i = 0; i < Data.countries.length; i++)
            {
                if(Data.countries[i])
                {
                    if(Data.countries[i].chatID)
                    {
                        temp = Data.countries[i].chatID.split("|")
                        for(const chat of temp)
                        {
                            if (parseInt(chat) === context.peerId)
                            {
                                country = Data.countries[i]
                                break
                            }
                        }
                    }
                }
            }
            let leader = (country?.leaderID === context.player.id) || (context.official?.countryID === country?.id && context.official?.canAppointOfficial)
            if(!leader && NameLibrary.RoleEstimator(context.player.role) < 1)
            {
                return
            }
            temp = null
            for(const mode of Object.keys(ChatGPTModes))
            {
                if(context.command.match(ChatGPTModes[mode].keywords))
                {
                    temp = ChatGPTModes[mode]
                    break
                }
            }
            if(context.command.match(/off|–≤—ã–∫–ª|–æ—Ç–∫–ª|disable/) && !temp)
            {
                delete Data.botCallModes[context.peerId]
                await context.send("‚úÖ –ë–æ—Ç –≤—ã–∫–ª—é—á–µ–Ω")
                return
            }
            if(!temp)
            {
                let request = "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ–∂–∏–º—ã:\n\n"
                for(const mode of Object.keys(ChatGPTModes))
                {
                    request += ChatGPTModes[mode].name + "\n"
                }
                request += "\n–°–µ–π—á–∞—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ä–µ–∂–∏–º " + (Data.botCallModes[context.peerId] ? Data.botCallModes[context.peerId].name : "‚ùå –í—ã–∫–ª—é—á–µ–Ω")
                await context.send(request)
                return
            }
            if(temp.isDangerous && NameLibrary.RoleEstimator(context.player.role) < 3)
            {
                await context.send("‚ö† –†–µ–∂–∏–º –æ—Ç–≤–µ—Ç–æ–≤ " + temp.name + " –º–æ–≥—É—Ç —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã")
            }
            else
            {
                Data.botCallModes[context.peerId] = temp
                await Data.SaveVKChat(context.chat.id)
                await context.send("‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ä–µ–∂–∏–º –æ—Ç–≤–µ—Ç–æ–≤ " + temp.name)
            }
        }
        catch (e) {console.log(e)}
    }

    async ReplyRequest(context)
    {
        try
        {
            if(!Data.botCallModes[context.peerId]) return
            if(context.command?.length < 10) return
            if(context.command?.length < 20 && context.command.match(Commands.censorship)) return
            if(context.command?.match(/–∞—Ö–∞—Ö/)) return
            let messages = []
            messages.push(Data.botCallModes[context.peerId] ? Data.botCallModes[context.peerId].request : Data.variables["isTest"] ? ChatGPTModes["NoRestrictions"].request : ChatGPTModes["ChatBot"].request)
            if(Data.botCallModes[context.peerId].stopWords)
            {
                if(context.command.match(Data.botCallModes[context.peerId].stopWords))
                {
                    await BotReactions.Mute(context)
                    return
                }
            }
            let time = new Date()
            if(Data.botCallTimeouts[context.player.id] && NameLibrary.RoleEstimator(context.player.role) === 0 && context.player.botCallTime - time < 0 && context.command.length > 0)
            {
                await context.reply(`‚è≥ –°–ø—Ä–æ—Å–∏—Ç–µ —á–µ—Ä–µ–∑ ${NameLibrary.ParseFutureTime(Data.botCallTimeouts[context.player.id].time)}`)
                return
            }
            time.setSeconds(time.getSeconds() + parseInt(Data.variables["botCallInterval"]))
            messages.push({role: "assistant", content: context.replyMessage.text})
            messages.push({role: "user", content: context.text})
            if(NameLibrary.RoleEstimator(context.player.role) === 0)
            {
                Data.botCallTimeouts[context.player.id] = {
                    time: time,
                    timeout: setTimeout(() => {
                        delete Data.botCallTimeouts[context.player.id]
                    },  parseInt(Data.variables["botCallInterval"]) * 1000)
                }
            }
            messages = messages.filter(key => {return !!key})
            let request = await this.GetChatGPTRequest(messages)
            if(!request) return
            for (const sample of request)
            {
                const index = request.indexOf(sample);
                if(index === 0) await context.reply(sample)
                else await context.send(sample)
            }
        }
        catch (e) {console.log(e)}
    }

    async BotRequest(context)
    {
        try
        {
            if(!Data.botCallModes[context.peerId]) return
            let messages = []
            messages.push(Data.botCallModes[context.peerId] ? Data.botCallModes[context.peerId].request : Data.variables["isTest"] ? ChatGPTModes["NoRestrictions"].request : ChatGPTModes["ChatBot"].request)
            if(Data.botCallModes[context.peerId].stopWords)
            {
                if(context.command.match(Data.botCallModes[context.peerId].stopWords))
                {
                    await BotReactions.Mute(context)
                    return
                }
            }
            let limit = 10
            let time = new Date()
            if(Data.botCallTimeouts[context.player.id] && NameLibrary.RoleEstimator(context.player.role) === 0 && context.player.botCallTime - time < 0 && context.command.length > 0)
            {
                await context.reply(`‚è≥ –°–ø—Ä–æ—Å–∏—Ç–µ —á–µ—Ä–µ–∑ ${NameLibrary.ParseFutureTime(Data.botCallTimeouts[context.player.id].time)}`)
                return
            }
            time.setSeconds(time.getSeconds() + parseInt(Data.variables["botCallInterval"]))
            if(context.forwards.length > 0)
            {
                for(const msg of context.forwards)
                {
                    if(msg.text?.length > 0 && limit > 0)
                    {
                        messages.push({role: msg.senderId > 0 ? "user" : "assistant", content: msg.text})
                        limit --
                    }
                }
            }
            if(context.replyMessage && context.replyMessage?.text?.length > 0)
            {
                messages.push({role: context.replyMessage.senderId > 0 ? "user" : "assistant", content: context.replyMessage.text})
            }
            for(const a of context.attachments)
            {
                if(a.type === "audio")
                {
                    messages.push({role: "user", content: `–ü–µ—Å–Ω—è ${a.title} –æ—Ç –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è ${a.artist}`})
                    break
                }
            }
            messages.push({role: "user", content: context.text})
            if(NameLibrary.RoleEstimator(context.player.role) === 0)
            {
                Data.botCallTimeouts[context.player.id] = {
                    time: time,
                    timeout: setTimeout(() => {
                        delete Data.botCallTimeouts[context.player.id]
                    }, parseInt(Data.variables["botCallInterval"]) * 1000)
                }
            }
            messages = messages.filter(key => {return !!key})
            let request = await this.GetChatGPTRequest(messages)
            if(!request) return
            for (const sample of request)
            {
                const index = request.indexOf(sample);
                if(index === 0) await context.reply(sample)
                else await context.send(sample)
            }
        } catch (e) {console.log(e)}
    }

    async GetChatGPTRequest(messages)
    {
        let key = APIKeysGenerator.GetKey()
        try
        {
            let request = await axios.post("https://api.openai.com/v1/chat/completions", {
                    model: "gpt-3.5-turbo",
                    messages: messages
                },
                {
                    headers: {
                        Authorization: 'Bearer ' + key
                    }
                })
            request = request.data["choices"][0].message.content
            let pages = []
            for(let i = 0; i < Math.ceil(request.length/4000); i++)
            {
                pages[i] = request.slice((i * 4000), (i * 4000) + 4000)
            }
            return pages
        }
        catch (e)
        {
            APIKeysGenerator.WarnKey(key)
            Data.variables["isTest"] && console.log(e)
            return undefined
        }
    }

    async Registration(context)
    {
        let result = await api.SendMessageWithKeyboard(context.player.id, `–í—ã –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ —Ä–µ–∂–∏–º –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö.\n\n‚Ñπ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É \"–ù–∞—á–∞—Ç—å\" —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç–∞`, [[keyboard.startButton({type: "registration"})], [keyboard.backButton]])
        if(!result)
        {
            await context.send("‚ö† –ë–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∞–º —Ñ–æ—Ä–º—É, –ø—Ä–æ–π–¥–∏—Ç–µ –≤ –õ–° –±–æ—Ç–∞ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç—É–¥–∞ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
            return
        }
        context.player.state = context.scenes.FillingOutTheForm
        await context.send("‚Ñπ –§–æ—Ä–º–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –õ–°")
    }

    async IsRegistered(context)
    {
        try
        {
            if(NameLibrary.RoleEstimator(context.player.role) < 1)
            {
                return
            }
            if(context.replyPlayers.length === 0)
            {
                return
            }
            let player = await Player.count({where: {id: context.replyPlayers[0]}})
            if(player === 0)
            {
                await context.send("‚ö† –ò–≥—Ä–æ–∫ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
            }
            else
            {
                await context.send("‚úÖ –ò–≥—Ä–æ–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
            }
        }
        catch (e)
        {
            await api.SendLogs(context, "ChatController/IsRegistered", e)
        }
    }

    async GetChatInfo(context)
    {
        try
        {
            if (NameLibrary.RoleEstimator(context.player.role) < 1)
            {
                return
            }
            let temp = context.command.match(/\d+/)
            if (!temp && context.peerType === "user")
            {
                await context.send("‚ö† –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —á–∞—Ç–∞")
                return
            }
            let flag = !!temp
            const chatID = temp ? parseInt(temp[0]) : (context.peerId - 2000000000)
            let request = "‚Ñπ –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —á–∞—Ç–µ —Å –Ω–æ–º–µ—Ä–æ–º " + chatID + "\n\n"
            try
            {
                let hide = await VKChats.findOne({where: {id: chatID + 2000000000}})
                hide = hide?.dataValues.hide
                temp = await api.api.messages.getConversationsById({
                    peer_ids: chatID + 2000000000
                })
                if(temp.items[0] && (!hide || (hide && !flag)))
                {
                    const admins = []
                    request += "–ù–∞–∑–≤–∞–Ω–∏–µ: " + temp.items[0].chat_settings.title + "\n"
                    request += "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: " + temp.items[0].chat_settings.members_count + "\n"
                    request += "–°–æ–∑–¥–∞—Ç–µ–ª—å —á–∞—Ç–∞: " + await api.GetName(temp.items[0].chat_settings.owner_id) + "\n"
                    request += "–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤ —á–∞—Ç–∞: "
                    for(const id of temp.items[0].chat_settings.admin_ids)
                    {
                        admins.push(await api.GetName(id))
                    }
                    request += admins.join(", ") + "\n"
                    if(context.command.match(/\+/))
                    {
                        try
                        {
                            const link = await api.api.messages.getInviteLink({
                                peer_id: chatID + 2000000000
                            })
                            if(link?.link)
                            {
                                request += "–°—Å—ã–ª–∫–∞ –Ω–∞ —á–∞—Ç: " + link.link + "\n"
                            }
                            else
                            {
                                request += "‚ö† –£ –º–µ–Ω—è –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ —á–∞—Ç" + "\n"
                            }
                        }
                        catch (e)
                        {
                            request += "‚ö† –£ –º–µ–Ω—è –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ —á–∞—Ç" + "\n"
                        }
                    }
                    request += "\n"
                }
                else
                {
                    request += "‚ö† –Ø –Ω–µ —Å–æ—Å—Ç–æ—é –≤ —ç—Ç–æ–º —á–∞—Ç–µ\n\n"
                }
            }
            catch (e)
            {
                await context.send("‚ö† –ß–∞—Ç–∞ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                return
            }
            for(let i = 0; i < Data.countries.length; i++)
            {
                if(Data.countries[i])
                {
                    if(Data.countries[i].chatID)
                    {
                        temp = Data.countries[i].chatID.split("|")
                        for(const chat of temp)
                        {
                            if(parseInt(chat) === (chatID + 2000000000))
                            {
                                request += `‚úÖ –≠—Ç–æ—Ç —á–∞—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ñ—Ä–∞–∫—Ü–∏–µ–π ${Data.countries[i].GetName(context.player.platform === "IOS")}`
                                await context.send(request)
                                return
                            }
                        }
                    }
                }
            }
            request += `‚ö† –≠—Ç–æ—Ç —á–∞—Ç –Ω–∏–∫–æ–º—É –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç`
            await context.send(request)
        }
        catch (e)
        {
            await api.SendLogs(context, "ChatController/GetChatInfo", e)
        }
    }

    async GetChatList(context)
    {
        try
        {
            if(NameLibrary.RoleEstimator(context.player.role) < 1)
            {
                return
            }
            await context.send("‚öô –ù–∞—á–∏–Ω–∞—é —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫, —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏...")
            let request = "‚Ñπ –°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤, –≤ –∫–æ—Ç–æ—Ä—ã—Ö —Å–æ—Å—Ç–æ–∏—Ç –±–æ—Ç:\n"
            let temp = null
            for(let i = 1; true; i++)
            {
                try
                {
                    temp = await VKChats.findOne({where: {id: i + 2000000000}})
                    if(temp?.dataValues.hide) continue
                    temp = await api.api.messages.getConversationsById({
                        peer_ids: i + 2000000000
                    })
                    if(temp.items[0])
                    {
                        request += i + ": " + temp.items[0].chat_settings.title + "\n"
                    }
                }
                catch (e)
                {
                    break
                }
            }
            for(let i = 0; i < Math.ceil(request.length/4000); i++)
            {
                await context.send(request.slice((i * 4000), (i * 4000) + 4000))
            }
        }
        catch (e)
        {
            console.log(e)
        }
    }

    async LeaveFromChat(context)
    {
        try
        {
            if(NameLibrary.RoleEstimator(context.player.role) < 4)
            {
                return
            }
            const chat = context.command.match(/\d+/)
            if(!chat)
            {
                await context.send("‚ö† –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —á–∞—Ç–∞")
                return
            }
            try
            {
                let info = await api.api.messages.getConversationsById({
                    peer_ids: chat[0] + 2000000000
                })
                if(info.items[0])
                {
                    await api.api.messages.removeChatUser({
                        member_id: process.env.GROUPID,
                        chat_id: chat[0]
                    })
                    await context.send("‚úÖ –û–∫, —è –≤—ã—à–µ–ª")
                }
                else
                {
                    await context.send("‚ö† –Ø –Ω–µ —Å–æ—Å—Ç–æ—é –≤ —ç—Ç–æ–º —á–∞—Ç–µ")
                }
            }
            catch (e)
            {
                await context.send("üò¢ –£ –º–µ–Ω—è –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, –ø–æ—Ö–æ–∂–µ —á—Ç–æ —Ç–∞–∫–æ–≥–æ —á–∞—Ç–∞ –ø—Ä–æ—Å—Ç–æ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            }
        }
        catch (e)
        {
            console.log(e)
        }
    }

    async GetChatLink(context)
    {
        try
        {
            if(NameLibrary.RoleEstimator(context.player.role) < 1)
            {
                return
            }
            try
            {
                const link = await api.api.messages.getInviteLink({
                    peer_id: context.peerId
                })
                if(link?.link)
                {
                    await api.SendMessage(context.player.id, "‚úÖ –î–µ—Ä–∂–∏: " + link.link)
                }
                else
                {
                    await context.send("üò°üò°üò° –ü–†–û–°–¢–û –î–ê–ô–¢–ï –ú–ù–ï –ü–£–õ–¨–¢ –û–¢ –Ø–î–ï–†–ö–ò!")
                }
            } catch (e) {await context.send("üò°üò°üò° –ü–†–û–°–¢–û –î–ê–ô–¢–ï –ú–ù–ï –ü–£–õ–¨–¢ –û–¢ –Ø–î–ï–†–ö–ò!")}
            try
            {
                await api.api.messages.delete({
                    conversation_message_ids: context.conversationMessageId,
                    delete_for_all: 1,
                    peer_id: context.peerId
                })
            } catch (e) {}
        }
        catch (e)
        {
            await api.SendLogs(context, "ChatController/GetChatLink", e)
        }
    }

    async GetUserObject(context)
    {
        try
        {
            if(NameLibrary.RoleEstimator(context.player.role) < 4)
            {
                return
            }
            let user
            if(context.replyPlayers?.length !== 0)
            {
                user = context.replyPlayers[0]
            }
            else
            {
                user = context.player.id
            }
            if(!Data.users[user])
            {
                await context.send("‚ö† –ò–≥—Ä–æ–∫ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –∫—ç—à–µ")
                return
            }
            await context.send(JSON.stringify(Data.users[user], null, "\t"))
        }
        catch (e)
        {
            await api.SendLogs(context, "ChatController/GetUserObject", e)
        }
    }

    async GetBudget(context)
    {
        try
        {
            let city = false
            let source = Data.countries[context.player.countryID]
            if(context.command.match(/–≥–æ—Ä–æ–¥/))
            {
                source = Data.cities[context.player.location]
                city = true
            }
            let isLeader = Data.countries[context.player.countryID].leaderID === context.player.id
            let isOfficial = context.official?.countryID === context.player.countryID && context.official?.canUseResources
            let isGM = NameLibrary.RoleEstimator(context.player.role) >= 2
            let mayor = city && context.player.id === Data.cities[context.player.location].leaderID
            if(!isLeader && !isOfficial && !isGM && !mayor)
            {
                return
            }
            const msg = await context.send(source.GetResources())
            setTimeout(async () => {
                try
                {
                    await api.api.messages.delete({
                        conversation_message_ids: msg.conversationMessageId,
                        delete_for_all: 1,
                        peer_id: msg.peerId
                    })
                    await api.api.messages.delete({
                        conversation_message_ids: context.conversationMessageId,
                        delete_for_all: 1,
                        peer_id: context.peerId
                    })
                }
                catch (e) {}
            }, 30000)
        }
        catch (e)
        {
            await api.SendLogs(context, "ChatController/GetBudget", e)
        }
    }

    async GetResFromBudget(context)
    {
        try
        {
            let city = false
            let resource = null
            let sends = context.command.split(",")
            let objOUT = {}
            let objIN = {}
            let count
            let request = ""
            let source = Data.countries[context.player.countryID]
            if(context.command.match(/–≥–æ—Ä–æ–¥/) && Data.cities[context.player.location].leaderID === context.player.id)
            {
                source = Data.cities[context.player.location]
                city = true
            }
            if(Data.countries[context.player.countryID].leaderID !== context.player.id && !(context.official?.countryID === context.player.countryID && context.official?.canUseResources) && NameLibrary.RoleEstimator(context.player.role) < 2 && !city)
            {
                return
            }
            if(source.CantTransact())
            {
                await context.send("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –¥–µ–ª–∞—Ç—å –ø–µ—Ä–µ–≤–æ–¥—ã, –ø—Ä–∏—á–∏–Ω–∞:\n\n" + source.WhyCantTransact())
                return
            }
            if(!city && Data.countries[context.player.countryID].capitalID !== context.player.location)
            {
                await context.send("‚ö† –ë—Ä–∞—Ç—å —Ä–µ—Å—É—Ä—Å—ã –∏–∑ –±—é–¥–∂–µ—Ç–∞ —Ñ—Ä–∞–∫—Ü–∏–∏ –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –∏–∑ —Å—Ç–æ–ª–∏—Ü—ã")
                return
            }
            for(let send of sends)
            {
                resource = null
                if(send.match(Commands.money))
                {
                    resource = "money"
                }
                if(send.match(Commands.wheat))
                {
                    resource = "wheat"
                }
                if(send.match(Commands.stone))
                {
                    resource = "stone"
                }
                if(send.match(Commands.wood))
                {
                    resource = "wood"
                }
                if(send.match(Commands.iron))
                {
                    resource = "iron"
                }
                if(send.match(Commands.copper))
                {
                    resource = "copper"
                }
                if(send.match(Commands.silver))
                {
                    resource = "silver"
                }
                if(send.match(Commands.diamond))
                {
                    resource = "diamond"
                }
                if(!resource)
                {
                    continue
                }
                count = send.match(/\d+/)
                count = parseInt( count ? count[0] : send)
                if(isNaN(count))
                {
                    count = 1
                }
                if(send.match(/–≤—Å–µ|–≤—Å—ë|–≤—Å—é|–≤—Å–µ—Ö|–≤–µ—Å—å/))
                {
                    count = source[resource]
                }
                if(source[resource] < count)
                {
                    request += `${NameLibrary.GetResourceName(resource)} - ‚ö† –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç\n`
                    continue
                }
                objIN[resource] = objIN[resource] ? objIN[resource] - Math.abs(count) : -Math.abs(count)
                objOUT[resource] = objOUT[resource] ? objOUT[resource] + Math.abs(count) : Math.abs(count)
            }
            for(const res of Object.keys(objOUT))
            {
                if(Math.abs(objOUT[res]) !== 0)
                {
                    request += `${NameLibrary.GetResourceName(res)} - ‚úÖ –ü–µ—Ä–µ–≤–µ–¥–µ–Ω–æ ${Math.abs(objOUT[res])}\n`
                }
            }
            if(Object.keys(objOUT).length !== 0)
            {
                if(city)
                {
                    await Data.AddCityResources(context.player.countryID, objIN)
                    await Data.AddPlayerResources(context.player.id, objOUT)
                    await api.SendNotification(Data.countries[context.player.countryID].leaderID, `‚úÖ –ò–∑ –±—é–¥–∂–µ—Ç–∞ —Ñ—Ä–∞–∫—Ü–∏–∏ ${source.GetName()} –∏–≥—Ä–æ–∫–æ–º ${context.player.GetName()} –≤–∑—è—Ç–æ:\n${NameLibrary.GetPrice(objIN)}`)
                }
                else
                {
                    await Data.AddCountryResources(context.player.location, objIN)
                    await Data.AddPlayerResources(context.player.id, objOUT)
                    await api.SendNotification(Data.cities[context.player.location].leaderID, `‚úÖ –ò–∑ –±—é–¥–∂–µ—Ç–∞ –≥–æ—Ä–æ–¥–∞ ${source.name} –∏–≥—Ä–æ–∫–æ–º ${context.player.GetName()} –≤–∑—è—Ç–æ:\n${NameLibrary.GetPrice(objIN)}`)
                }
            }
            if(request.length !== 0) await context.send(request)
        }
        catch (e)
        {
            await api.SendLogs(context, "ChatController/GetResFromBudget", e)
        }
    }

    async MusicAnalysis(context)
    {
        try
        {
            let name = context.attachments[0].title + " " + context.attachments[0].artist
            name = name.toLowerCase()
            if(name.match(Commands.badMusic))
            {
                await context.send(NameLibrary.GetRandomSample("bad_audio_reaction"))
            }
            else if(name.match(Commands.goodMusic))
            {
                await context.send(NameLibrary.GetRandomSample("good_audio_reaction"))
            }
            else if(name.match(/–∞—Ä–∏—è/) && NameLibrary.GetChance(80))
            {
                await context.send("–û–ø—è—Ç—å –∫–∞–≤–µ—Ä –Ω–∞ Iron Maiden")
            }
            else if(name.match(/eagles/) && NameLibrary.GetChance(80))
            {
                await context.send(NameLibrary.GetChance(50) ? "–°–ª—ã—à—å, –Ω—É –ø–µ—Ä–µ—Å—Ç–∞–Ω—å. –£ –º–µ–Ω—è –±—ã–ª–∞ —Ç—è–∂–µ–ª–∞—è –Ω–æ—á—å, –∏ —è –Ω–µ–Ω–∞–≤–∏–∂—É, –±–ª—è–¥—å, \"Eagles\"." : "–ö–∏–Ω—Ç–∞–Ω–∞, –±–ª—è–¥—å. –£–º–µ–µ—Ç —à–∞—Ä—ã –∫–∞—Ç–∞—Ç—å, —É—Ä–æ–¥.")
            }
            else
            {
                let stickers = [163, 69, 73877, 73055, 73078, 73072, 73083, 142, 161, 162, 131, 167, 158, 102, 104, 37, 36, 18, 2, 60771, 60748, 60753, 60751, 60765, 73887, 73879, 85, 74, 73, 70, 59, 68, 75, 66, 89]
                if(NameLibrary.GetChance(25))
                {
                    await api.SendSticker(context.peerId, stickers[Math.floor(Math.random() * stickers.length)])
                }
                else
                {
                    await context.send(NameLibrary.GetRandomSample("audio_reaction"))
                }
            }
        }
        catch (e)
        {
            await api.SendLogs(context, "ChatController/MusicAnalysis", e)
        }
    }

    async LocatePlayer(context)
    {
        try
        {
            if(NameLibrary.RoleEstimator(context.player.role) < 2)
            {
                return
            }
            if(context.replyPlayers?.length === 0)
            {
                await context.send("‚ö† –í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä–æ–∫–∞")
                return
            }
            const user = await Player.findOne({where: {id: context.replyPlayers[0]}})
            if(!user)
            {
                await context.send("‚ö† –ò–≥—Ä–æ–∫ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
                return
            }
            const userStatus = await PlayerStatus.findOne({where: {id: context.replyPlayers[0]}, attributes: ["location", "countryID"]})
            await context.send(`üìç –ò–≥—Ä–æ–∫ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –≥–æ—Ä–æ–¥–µ ${Data.cities[userStatus.dataValues.location].name}, —Ñ—Ä–∞–∫—Ü–∏—è ${Data.countries[userStatus.dataValues.countryID].GetName(context.player.platform === "IOS")}`)
        }
        catch (e)
        {
            await api.SendLogs(context, "ChatController/LocatePlayer", e)
        }
    }

    async BotForgot(context)
    {
        try
        {
            let time = new Date()
            if(context.player.botForgotTime - time < 0 && NameLibrary.RoleEstimator(context.player.role) === 0)
            {
                return
            }
            if(Data.requests[context.player.id])
            {
                delete Data.requests[context.player.id]
                await PlayerInfo.update({botMemory: null}, {where: {id: context.player.id}})
                await context.send("‚úÖ –õ–∞–¥–Ω–æ, –∑–∞–±—ã–ª.")
            }
            else
            {
                await context.send("‚ö† –ß—Ç–æ –∑–∞–±—ã—Ç—å, —Ç–æ —á—Ç–æ —Ç—ã –º–Ω–µ –ø–∏—Å—é–Ω—ã –≤ –ª–∏—á–∫—É —à–ª–µ—à—å? –ù—É, –æ–∫.")
            }
        }
        catch (e)
        {
            await api.SendLogs(context, "ChatController/BotForgot", e)
        }
    }

    async BotMem(context)
    {
        try
        {
            let time = new Date()
            if(context.player.botForgotTime - time < 0 && NameLibrary.RoleEstimator(context.player.role) === 0)
            {
                return
            }
            let phrase = context.text.replace(Commands.botMem, "")
            if(context.replyPlayers?.length !== 0)
            {
                if(NameLibrary.RoleEstimator(context.player.role) > 3)
                {
                    phrase = phrase.replace(/\[.*?] /, "")
                    phrase = phrase.replace(/ \[.*?]/, "")
                    Data.requests[context.replyPlayers[0]] = {
                        sample: phrase ? phrase : ".",
                        attachment: context.attachments?.length > 0 ? context.attachments.map((key) => {return key.toString()}).join(",") : null
                    }
                    await PlayerInfo.update({botMemory: JSON.stringify(Data.requests[context.replyPlayers[0]])}, {where: {id: context.replyPlayers[0]}})
                    await context.send("‚úÖ –û–∫, –∑–∞–ø–æ–º–Ω–∏–ª.")
                    return
                }
            }
            Data.requests[context.player.id] = {
                sample: phrase ? phrase : ".",
                attachment: context.attachments?.length > 0 ? context.attachments.map((key) => {return key.toString()}).join(",") : null
            }
            await PlayerInfo.update({botMemory: JSON.stringify(Data.requests[context.player.id])}, {where: {id: context.player.id}})
            await context.send("‚úÖ –û–∫, –∑–∞–ø–æ–º–Ω–∏–ª.")
        }
        catch (e)
        {
            await api.SendLogs(context, "ChatController/BotMem", e)
        }
    }

    async BotCall(context)
    {
        try
        {
            if(Data.requests[context.player.id])
            {
                await context.send(Data.requests[context.player.id].sample, {attachment: Data.requests[context.player.id].attachment})
            }
            else
            {
                await context.send(NameLibrary.GetRandomSample("call_request"))
            }
        }
        catch (e)
        {
            await api.SendLogs(context, "ChatController/BotCall", e)
        }
    }

    async StopTrolling(context)
    {
        try
        {
            if(NameLibrary.RoleEstimator(context.player.role) < 3)
            {
                return
            }
            if(context.replyPlayers.length === 0)
            {
                await context.send("‚ö† –í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä–æ–∫–∞")
                return
            }
            if(!Data.samples[context.replyPlayers[0]])
            {
                await context.send("‚ö† –Ø –Ω–µ —Ç—Ä–æ–ª–ª—é —ç—Ç–æ–≥–æ –∏–≥—Ä–æ–∫–∞")
                return
            }
            let samples = Data.samples[context.replyPlayers[0]].filter(key => {return key.admin !== context.player.id})
            if(samples.length === 0)
            {
                delete Data.samples[context.replyPlayers[0]]
                await context.send("‚úÖ –¢–µ–ø–µ—Ä—å —è –Ω–µ —Ç—Ä–æ–ª–ª—é —ç—Ç–æ–≥–æ –∏–≥—Ä–æ–∫–∞")
            }
            else
            {
                Data.samples[context.replyPlayers[0]] = samples
                await context.send("‚úÖ –Ø —É–±—Ä–∞–ª —Ñ—Ä–∞–∑—ã –Ω–∞–ª–æ–∂–µ–Ω–Ω—ã–µ –≤–∞–º–∏, –Ω–æ –æ—Å—Ç–∞–ª–∏—Å—å —Ñ—Ä–∞–∑—ã –æ—Ç –¥—Ä—É–≥–∏—Ö –∞–¥–º–∏–Ω–æ–≤")
            }
        }
        catch (e)
        {
            await api.SendLogs(context, "ChatController/StopTrolling", e)
        }
    }

    async AddTrollSample(context)
    {
        try
        {
            if(NameLibrary.RoleEstimator(context.player.role) < 3)
            {
                return
            }
            if(context.replyPlayers.length === 0)
            {
                await context.send("‚ö† –í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä–æ–∫–∞")
                return
            }
            let player = await Player.findOne({where: {id: context.replyPlayers[0]}, attributes: ["role"]})
            if(player)
            {
                if(NameLibrary.RoleEstimator(context.player.role) <= NameLibrary.RoleEstimator(player.dataValues.role))
                {
                    await context.send("‚ö† –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Ç—Ä–æ–ª–ª–∏—Ç—å —Å—Ç–∞—Ä—à–µ–≥–æ –∏–ª–∏ —Ä–∞–≤–Ω–æ–≥–æ –ø–æ –∑–≤–∞–Ω–∏—é")
                    return
                }
            }
            if(context.command.match(Commands.censorship))
            {
                await context.send("‚ö† –Ø –Ω–µ –±—É–¥—É –º–∞—Ç–µ—Ä–∏—Ç—å—Å—è")
                return
            }
            let phrase = context.text
            phrase = phrase.replace(/\[.*?] /g, "")
            phrase = phrase.replace(/ \[.*?]/g, "")
            phrase = phrase.replace(Commands.trolling, "")
            if(!Data.samples[context.replyPlayers[0]]) Data.samples[context.replyPlayers[0]] = []
            Data.samples[context.replyPlayers[0]].push({
                admin: context.player.id,
                sample: phrase ? phrase : ".",
                attachment: context.attachments?.length > 0 ? context.attachments.map((key) => {return key.toString()}).join(",") : null
            })
            await context.send("‚úÖ –°–µ–º–ø–ª –¥–æ–±–∞–≤–ª–µ–Ω.")
        }
        catch (e)
        {
            await api.SendLogs(context, "ChatController/AddTrollSample", e)
        }
    }

    async ResetLeaders(context)
    {
        try
        {
            if(NameLibrary.RoleEstimator(context.player.role) < 4)
            {
                return
            }
            try
            {
                let leaders = await Country.findAll({attributes: ["leaderID"]})
                await Player.update({status: "leader"}, {where: {id: leaders.map(key => {return key.dataValues.leaderID})}})
                for(const user of leaders)
                {
                    if(Data.users[user.dataValues.leaderID])
                    {
                        Data.users[user.dataValues.leaderID].status = "leader"
                    }
                }
                await context.send("–ü—Ä–∞–≤–∏—Ç–µ–ª–∏ - ‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
            }
            catch (e)
            {
                await context.send("–ü—Ä–∞–≤–∏—Ç–µ–ª–∏ - ‚ö† –û—à–∏–±–∫–∞: " + e.message)
            }
            try
            {
                let officials = await OfficialInfo.findAll({attributes: ["id"]})
                await Player.update({status: "official"}, {where: {id: officials.map(key => {return key.dataValues.id})}})
                for(const user of officials)
                {
                    if(Data.users[user.dataValues.id])
                    {
                        Data.users[user.dataValues.id].status = "official"
                    }
                }
                await context.send("–ß–∏–Ω–æ–≤–Ω–∏–∫–∏ - ‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
            }
            catch (e)
            {
                await context.send("–ß–∏–Ω–æ–≤–Ω–∏–∫–∏ - ‚ö† –û—à–∏–±–∫–∞: " + e.message)
            }
        }
        catch (e)
        {
            await api.SendLogs(context, "ChatController/ResetLeaders", e)
        }
    }

    async Censorship(context)
    {
        try
        {
            if(NameLibrary.RoleEstimator(context.player.role) < 3)
            {
                return
            }
            if(context.replyPlayers.length === 0)
            {
                await context.send("‚ö† –í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä–æ–∫–∞")
                return
            }
            let player = await Player.findOne({where: {id: context.replyPlayers[0]}, attributes: ["role"]})
            if(player)
            {
                if(NameLibrary.RoleEstimator(context.player.role) <= NameLibrary.RoleEstimator(player.dataValues.role))
                {
                    await context.send("‚ö† –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –Ω–∞–ª–æ–∂–∏—Ç—å —Ü–µ–Ω–∑—É—Ä—É –Ω–∞ —Å—Ç–∞—Ä—à–µ–≥–æ –∏–ª–∏ —Ä–∞–≤–Ω–æ–≥–æ –ø–æ –∑–≤–∞–Ω–∏—é")
                    return
                }
            }
            let time = context.command.match(/\d+/)
            time = parseInt( time ? time[0] : 10)
            time = Math.min(time, 1440)
            if(Data.censorship[context.replyPlayers[0]])
            {
                let admin = await Player.findOne({where: {id: Data.censorship[context.replyPlayers[0]].moder}, attributes: ["role"]})
                if(!(NameLibrary.RoleEstimator(admin.dataValues.role) > NameLibrary.RoleEstimator(context.player.role) || Data.censorship[context.replyPlayers[0]].moder === context.player.id))
                {
                    await context.send("‚ö† –°–Ω—è—Ç—å —Ü–µ–Ω–∑—É—Ä—É –º–æ–∂–µ—Ç —Ç–æ–ª—å–∫–æ —Ç–æ—Ç, –∫—Ç–æ –µ—ë –Ω–∞–ª–æ–∂–∏–ª –∏–ª–∏ –∞–¥–º–∏–Ω —Ä–∞–Ω–≥–æ–º –≤—ã—à–µ")
                    return
                }
                clearTimeout(Data.censorship[context.replyPlayers[0]].timeout)
                delete Data.censorship[context.replyPlayers[0]]
                await context.send(`‚úÖ –§–∏–ª—å—Ç—Ä –º–∞—Ç–∞ –≤—ã–∫–ª—é—á–µ–Ω`)
            }
            else
            {
                Data.censorship[context.replyPlayers[0]] = {
                    moder: context.player.id,
                    timeout: setTimeout(async () => {
                        delete Data.censorship[context.replyPlayers[0]]
                    }, time * 60000)
                }
                await context.send(`‚úÖ –§–∏–ª—å—Ç—Ä –º–∞—Ç–∞ –≤–∫–ª—é—á–µ–Ω –Ω–∞ ${time} –º–∏–Ω—É—Ç`)
            }

        }
        catch (e)
        {
            await api.SendLogs(context, "ChatController/Censorship", e)
        }
    }

    async Ignore(context)
    {
        try
        {
            if(NameLibrary.RoleEstimator(context.player.role) < 3)
            {
                return
            }
            if(context.replyPlayers.length === 0)
            {
                await context.send("‚ö† –í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä–æ–∫–∞")
                return
            }
            let player = await Player.findOne({where: {id: context.replyPlayers[0]}, attributes: ["role"]})
            if(player)
            {
                if(NameLibrary.RoleEstimator(context.player.role) <= NameLibrary.RoleEstimator(player.dataValues.role))
                {
                    await context.send("‚ö† –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –Ω–∞–ª–æ–∂–∏—Ç—å –∏–≥–Ω–æ—Ä –Ω–∞ —Å—Ç–∞—Ä—à–µ–≥–æ –∏–ª–∏ —Ä–∞–≤–Ω–æ–≥–æ –ø–æ –∑–≤–∞–Ω–∏—é")
                    return
                }
            }
            let time = context.command.match(/\d+/)
            time = parseInt( time ? time[0] : 10)
            time = Math.min(time, 1440)
            if(context.command.match(/–∞–∫—Ç–∏–≤/))
            {
                if(Data.activeIgnore[context.replyPlayers[0]])
                {
                    let admin = await Player.findOne({where: {id: Data.activeIgnore[context.replyPlayers[0]].moder}, attributes: ["role"]})
                    if(NameLibrary.RoleEstimator(admin.dataValues.role) > NameLibrary.RoleEstimator(context.player.role) || Data.activeIgnore[context.replyPlayers[0]].moder === context.player.id)
                    {
                        clearTimeout(Data.activeIgnore[context.replyPlayers[0]].timeout)
                        delete Data.activeIgnore[context.replyPlayers[0]]
                        await context.send(`‚úÖ –¢–µ–ø–µ—Ä—å –±–æ—Ç –±—É–¥–µ—Ç —Å—á–∏—Ç–∞—Ç—å –∞–∫—Ç–∏–≤ –∏–≥—Ä–æ–∫–∞`)
                    }
                    else
                    {
                        await context.send("‚ö† –°–Ω—è—Ç—å –∏–≥–Ω–æ—Ä –º–æ–∂–µ—Ç —Ç–æ–ª—å–∫–æ —Ç–æ—Ç, –∫—Ç–æ –µ–≥–æ –Ω–∞–ª–æ–∂–∏–ª –∏–ª–∏ –∞–¥–º–∏–Ω —Ä–∞–Ω–≥–æ–º –≤—ã—à–µ")
                    }
                }
                else
                {
                    Data.activeIgnore[context.replyPlayers[0]] = {
                        moder: context.player.id,
                        timeout: setTimeout(async () => {
                            delete Data.activeIgnore[context.replyPlayers[0]]
                        }, time * 60000)
                    }
                    await context.send(`‚úÖ –¢–µ–ø–µ—Ä—å –±–æ—Ç –Ω–µ –±—É–¥–µ—Ç —Å—á–∏—Ç–∞—Ç—å –∞–∫—Ç–∏–≤ –∏–≥—Ä–æ–∫–∞ ${time} –º–∏–Ω—É—Ç`)
                }
            }
            else
            {
                if(Data.ignore[context.replyPlayers[0]])
                {
                    let admin = await Player.findOne({where: {id: Data.ignore[context.replyPlayers[0]].moder}, attributes: ["role"]})
                    if(NameLibrary.RoleEstimator(admin.dataValues.role) > NameLibrary.RoleEstimator(context.player.role) || Data.ignore[context.replyPlayers[0]].moder === context.player.id)
                    {
                        clearTimeout(Data.ignore[context.replyPlayers[0]].timeout)
                        delete Data.ignore[context.replyPlayers[0]]
                        await context.send(`‚úÖ –¢–µ–ø–µ—Ä—å –±–æ—Ç –±—É–¥–µ—Ç —Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ –∫–æ–º–∞–Ω–¥—ã –∏–≥—Ä–æ–∫–∞`)
                    }
                    else
                    {
                        await context.send("‚ö† –°–Ω—è—Ç—å –∏–≥–Ω–æ—Ä –º–æ–∂–µ—Ç —Ç–æ–ª—å–∫–æ —Ç–æ—Ç, –∫—Ç–æ –µ–≥–æ –Ω–∞–ª–æ–∂–∏–ª –∏–ª–∏ –∞–¥–º–∏–Ω —Ä–∞–Ω–≥–æ–º –≤—ã—à–µ")
                    }
                }
                else
                {
                    Data.ignore[context.replyPlayers[0]] = {
                        moder: context.player.id,
                        timeout: setTimeout(async () => {
                            delete Data.ignore[context.replyPlayers[0]]
                        }, time * 60000)
                    }
                    await context.send(`‚úÖ –¢–µ–ø–µ—Ä—å –±–æ—Ç –Ω–µ –±—É–¥–µ—Ç —Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ –∫–æ–º–∞–Ω–¥—ã –∏–≥—Ä–æ–∫–∞ ${time} –º–∏–Ω—É—Ç`)
                }
            }
        }
        catch (e)
        {
            await api.SendLogs(context, "ChatController/Ignore", e)
        }
    }

    async Unmute(context)
    {
        try
        {
            if(NameLibrary.RoleEstimator(context.player.role) < 1)
            {
                return
            }
            if(context.replyPlayers.length === 0)
            {
                await context.send("‚ö† –í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä–æ–∫–∞")
                return
            }
            if(context.command.match(/–≥—Å|–∞—É–¥–∏–æ|–≥–æ–ª–æ—Å–æ–≤—ã–µ/))
            {
                if(Data.voiceMute[context.replyPlayers[0]])
                {
                    let admin = await Player.findOne({where: {id: Data.voiceMute[context.replyPlayers[0]].moder}, attributes: ["role"]})
                    if(NameLibrary.RoleEstimator(admin.dataValues.role) > NameLibrary.RoleEstimator(context.player.role) || Data.voiceMute[context.replyPlayers[0]].moder === context.player.id)
                    {
                        clearTimeout(Data.voiceMute[context.replyPlayers[0]].timeout)
                        delete Data.voiceMute[context.replyPlayers[0]]
                        await context.send(`‚úÖ –¢–µ–ø–µ—Ä—å –∏–≥—Ä–æ–∫ –º–æ–∂–µ—Ç –æ—Å—Ç–∞–≤–ª—è—Ç—å –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è`)
                    }
                    else
                    {
                        await context.send("‚ö† –°–Ω—è—Ç—å –º—É—Ç –º–æ–∂–µ—Ç —Ç–æ–ª—å–∫–æ —Ç–æ—Ç, –∫—Ç–æ –µ–≥–æ –Ω–∞–ª–æ–∂–∏–ª –∏–ª–∏ –∞–¥–º–∏–Ω —Ä–∞–Ω–≥–æ–º –≤—ã—à–µ")
                    }
                }
            }
            else
            {
                if(context.chat.muteList[context.replyPlayers[0]])
                {
                    delete context.chat.muteList[context.replyPlayers[0]]
                    await Data.SaveVKChat(context.chat.id)
                    await context.send(`‚úÖ –° –∏–≥—Ä–æ–∫–∞ —Å–Ω—è—Ç –ª–æ–∫–∞–ª—å–Ω—ã–π –º—É—Ç`)
                    return
                }
                if(Data.mute[context.replyPlayers[0]])
                {
                    let admin = await Player.findOne({where: {id: Data.mute[context.replyPlayers[0]].moder}, attributes: ["role"]})
                    if(NameLibrary.RoleEstimator(admin.dataValues.role) > NameLibrary.RoleEstimator(context.player.role) || Data.mute[context.replyPlayers[0]].moder === context.player.id)
                    {
                        clearTimeout(Data.mute[context.replyPlayers[0]].timeout)
                        delete Data.mute[context.replyPlayers[0]]
                        await context.send(`‚úÖ –° –∏–≥—Ä–æ–∫–∞ —Å–Ω—è—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π –º—É—Ç`)
                    }
                    else
                    {
                        await context.send("‚ö† –°–Ω—è—Ç—å –º—É—Ç –º–æ–∂–µ—Ç —Ç–æ–ª—å–∫–æ —Ç–æ—Ç, –∫—Ç–æ –µ–≥–æ –Ω–∞–ª–æ–∂–∏–ª –∏–ª–∏ –∞–¥–º–∏–Ω —Ä–∞–Ω–≥–æ–º –≤—ã—à–µ")
                    }
                }
                else
                {
                    await context.send("‚ö† –ò–≥—Ä–æ–∫ –Ω–µ –≤ –º—É—Ç–µ")
                }
            }
        }
        catch (e)
        {
            await api.SendLogs(context, "ChatController/Unmute", e)
        }
    }

    async Mute(context)
    {
        try
        {
            if(NameLibrary.RoleEstimator(context.player.role) < 4)
            {
                return
            }
            if(context.replyPlayers.length === 0)
            {
                await context.send("‚ö† –í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä–æ–∫–∞")
                return
            }
            if(StopList.includes(context.replyPlayers[0]))
            {
                await context.reply("‚ö† –û—Å—É–∂–¥–∞—é")
                return
            }
            let player = await Player.findOne({where: {id: context.replyPlayers[0]}, attributes: ["role"]})
            if(player)
            {
                if(NameLibrary.RoleEstimator(context.player.role) <= NameLibrary.RoleEstimator(player.dataValues.role))
                {
                    await context.send("‚ö† –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∑–∞–º—É—Ç–∏—Ç—å —Å—Ç–∞—Ä—à–µ–≥–æ –∏–ª–∏ —Ä–∞–≤–Ω–æ–≥–æ –ø–æ –∑–≤–∞–Ω–∏—é")
                    return
                }
            }
            let time = context.command.match(/\d+/)
            time = parseInt( time ? time[0] : 10)
            time = Math.min(time, 1440)
            const now = new Date()
            now.setMinutes(now.getMinutes() + time)
            context.chat.muteList[context.replyPlayers[0]] = {
                moderID: context.player.id,
                endTime: now
            }
            await Data.SaveVKChat(context.chat.id)
            await context.send(`‚úÖ –ò–≥—Ä–æ–∫ –±–ª–∏–∂–∞–π—à–∏–µ ${time} –º–∏–Ω—É—Ç –Ω–µ –±—É–¥–µ—Ç —Ä–∞–∑–≥–æ–≤–∞—Ä–∏–≤–∞—Ç—å`)
        }
        catch (e)
        {
            await api.SendLogs(context, "ChatController/GlobalMute", e)
        }
    }

    async GlobalMute(context)
    {
        try
        {
            if(NameLibrary.RoleEstimator(context.player.role) < 4)
            {
                return
            }
            if(context.replyPlayers.length === 0)
            {
                await context.send("‚ö† –í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä–æ–∫–∞")
                return
            }
            if(StopList.includes(context.replyPlayers[0]))
            {
                await context.reply("‚ö† –û—Å—É–∂–¥–∞—é")
                return
            }
            let player = await Player.findOne({where: {id: context.replyPlayers[0]}, attributes: ["role"]})
            if(player)
            {
                if(NameLibrary.RoleEstimator(context.player.role) <= NameLibrary.RoleEstimator(player.dataValues.role))
                {
                    await context.send("‚ö† –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∑–∞–º—É—Ç–∏—Ç—å —Å—Ç–∞—Ä—à–µ–≥–æ –∏–ª–∏ —Ä–∞–≤–Ω–æ–≥–æ –ø–æ –∑–≤–∞–Ω–∏—é")
                    return
                }
            }
            let time = context.command.match(/\d+/)
            time = parseInt( time ? time[0] : 10)
            time = Math.min(time, 1440)
            if(context.command.match(/–≥—Å|–∞—É–¥–∏–æ|–≥–æ–ª–æ—Å–æ–≤—ã–µ/))
            {
                if(Data.voiceMute[context.replyPlayers[0]])
                {
                    let admin = await Player.findOne({where: {id: Data.voiceMute[context.replyPlayers[0]].moder}, attributes: ["role"]})
                    if(!(NameLibrary.RoleEstimator(admin.dataValues.role) > NameLibrary.RoleEstimator(context.player.role) || Data.voiceMute[context.replyPlayers[0]].moder === context.player.id))
                    {
                        await context.send("‚ö† –°–Ω—è—Ç—å –º—É—Ç –º–æ–∂–µ—Ç —Ç–æ–ª—å–∫–æ —Ç–æ—Ç, –∫—Ç–æ –µ–≥–æ –Ω–∞–ª–æ–∂–∏–ª –∏–ª–∏ –∞–¥–º–∏–Ω —Ä–∞–Ω–≥–æ–º –≤—ã—à–µ")
                        return
                    }
                    clearTimeout(Data.voiceMute[context.replyPlayers[0]].timeout)
                    delete Data.voiceMute[context.replyPlayers[0]]
                    await context.send(`‚úÖ –¢–µ–ø–µ—Ä—å –∏–≥—Ä–æ–∫ –º–æ–∂–µ—Ç –æ—Å—Ç–∞–≤–ª—è—Ç—å –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è`)
                }
                else
                {
                    Data.voiceMute[context.replyPlayers[0]] = {
                        moder: context.player.id,
                        timeout: setTimeout(async () => {
                            delete Data.voiceMute[context.replyPlayers[0]]
                        }, time * 60000)
                    }
                    await context.send(`‚úÖ –ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω—ã –Ω–∞  ${time} –º–∏–Ω—É—Ç`)
                }
            }
            else
            {
                if(Data.mute[context.replyPlayers[0]])
                {
                    clearTimeout(Data.mute[context.replyPlayers[0]].timeout)
                    delete Data.mute[context.replyPlayers[0]]
                }
                Data.mute[context.replyPlayers[0]] = {
                    moder: context.player.id,
                    timeout: setTimeout(async () => {
                        await context.send(`‚úÖ *id${context.replyPlayers[0]}(–ò–≥—Ä–æ–∫) —Ç–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç —Ä–∞–∑–≥–æ–≤–∞—Ä–∏–≤–∞—Ç—å`)
                        await api.SendMessage(context.replyPlayers[0], `‚úÖ –í—Ä–µ–º—è –¥–µ–π—Å—Ç–≤–∏—è –º—É—Ç–∞ –≤—ã—à–ª–æ`)
                        delete Data.mute[context.replyPlayers[0]]
                    }, time * 60000)
                }
                await context.send(`‚úÖ –ò–≥—Ä–æ–∫ –±–ª–∏–∂–∞–π—à–∏–µ ${time} –º–∏–Ω—É—Ç –Ω–µ –±—É–¥–µ—Ç —Ä–∞–∑–≥–æ–≤–∞—Ä–∏–≤–∞—Ç—å`)
                await api.SendMessage(context.replyPlayers[0], `‚ö† –ù–∞ –≤–∞—Å –±—ã–ª –Ω–∞–ª–æ–∂–µ–Ω –º—É—Ç, –≤—Ä–µ–º—è –¥–µ–π—Å—Ç–≤–∏—è ${time} –º–∏–Ω—É—Ç`)
            }
        }
        catch (e)
        {
            await api.SendLogs(context, "ChatController/Mute", e)
        }
    }

    async DeleteMessage(context)
    {
        try
        {
            if(NameLibrary.RoleEstimator(context.player.role) === 0)
            {
                return
            }
            const messages = []
            if(context.replyMessage) messages.push(context.replyMessage?.conversationMessageId)
            if(context.forwards.length > 0)
            {
                for(const msg of context.forwards)
                {
                    messages.push(msg?.conversationMessageId)
                }
            }
            try
            {
                await api.api.messages.delete({
                    conversation_message_ids: messages.filter(key => {return key}).join(","),
                    delete_for_all: 1,
                    peer_id: context.peerId
                })
            }
            catch (e)
            {
                await context.send("üò°üò°üò° –ü–†–û–°–¢–û –î–ê–ô–¢–ï –ú–ù–ï –ü–£–õ–¨–¢ –û–¢ –Ø–î–ï–†–ö–ò!")
            }
            try
            {
                await api.api.messages.delete({
                    conversation_message_ids: context.conversationMessageId,
                    delete_for_all: 1,
                    peer_id: context.peerId
                })
            } catch (e) {}
        }
        catch (e)
        {
            await api.SendLogs(context, "ChatController/DeleteMessage", e)
        }
    }

    async GetUnregList(context)
    {
        try
        {
            const users = await api.api.messages.getConversationMembers({
                peer_id: context.peerId
            })
            let temp, request = "üò° –í –±–æ—Ç–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã:\n\n", count = 0
            for(const user of users.profiles)
            {
                if(user.type) continue
                temp = await Player.count({where: {id: user.id}})
                if(temp !== 0) continue
                request += `@id${user.id}(${user.first_name + " " + user.last_name})\n`
                count ++
            }
            if(count === 0)
            {
                await context.send("üò∫ –í—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ —ç—Ç–æ–≥–æ —á–∞—Ç–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –±–æ—Ç–µ!")
            }
            else
            {
                request += "\n‚ö† –ß—Ç–æ–±—ã –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é - –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ –ø—Ä–æ–µ–∫—Ç–∞."
                await context.send(request)
            }
        }
        catch (e)
        {
            await context.send("üò°üò°üò° –ü–†–û–°–¢–û –î–ê–ô–¢–ï –ú–ù–ï –ü–£–õ–¨–¢ –û–¢ –Ø–î–ï–†–ö–ò!")
        }
    }

    async RefuseCitizenship(context)
    {
        try
        {
            if(!context.player.citizenship)
            {
                await context.send("‚ö† –£ –≤–∞—Å –Ω–µ—Ç –≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–∞")
                return
            }
            const country = Data.countries[context.player.citizenship]
            await PlayerStatus.update({citizenship: null, registration: null}, {where: {id: context.player.id}})
            country.population = await PlayerStatus.count({where: {citizenship: country.id}})
            await Country.update({population: country.population}, {where: {id: country.id}})
            if(!context.player.status.match(/worker/))
            {
                Data.users[context.player.id].status = "stateless"
                await Player.update({status: "stateless"}, {where: {id: context.player.id}})
            }
            context.player.citizenship = null
            context.player.registration = null
            await api.SendMessage(country.leaderID, `‚Ñπ –ò–≥—Ä–æ–∫ ${context.player.GetName()} –æ—Ç–∫–∞–∑–∞–ª—Å—è –æ—Ç –≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–∞ —Ñ—Ä–∞–∫—Ü–∏–∏ ${country.GetName()}`)
            await context.send("‚Ñπ –¢–µ–ø–µ—Ä—å –≤—ã –∞–ø–∞—Ç—Ä–∏–¥.")
        }
        catch (e)
        {
            await api.SendLogs(context, "ChatController/Extract", e)
        }
    }

    async GetImarat(context)
    {
        try
        {
            if(context.player.nationality.match(/—Å–ª–∞–≤—è–Ω|–¥–æ–Ω–±–∞—Å|–¥–æ–Ω–µ—Ü/i))
            {
                if(context.command.match(/–∏—Å–ª–∞–º/) && !context.player.nationality.match(/–∏–º–∞—Ä–∞—Ç/i))
                {
                    context.player.nationality = "‚òù –ò–º–∞—Ä–∞—Ç –î–æ–Ω–±–∞—Å—Å"
                    await PlayerInfo.update({nationality: "‚òù –ò–º–∞—Ä–∞—Ç –î–æ–Ω–±–∞—Å—Å"}, {where: {id: context.player.id}})
                    await context.send(`‚òù –¢—ã –ø—Ä–∏–Ω—è–ª${context.player.gender ? "" : "–∞"} –∏—Å–ª–∞–º –≤–æ –∏–º—è –ò–º–∞—Ä–∞—Ç–∞ –î–æ–Ω–±–∞—Å—Å–∞, –º—ã –≥–æ—Ä–¥–∏–º—Å—è —Ç–æ–±–æ–π ${context.player.gender ? "–±—Ä–∞—Ç" : "—Å–µ—Å—Ç—Ä–∞"}.`)
                }
                else if(context.command.match(/–æ—Ç—Ü–∞|—Ö—Ä–∏—Å—Ç–∏–∞–Ω|–ø—Ä–∞–≤–æ/) && !context.player.nationality.match(/–≤–µ–ª–∏–∫–∞—è/i))
                {
                    context.player.nationality = "‚ò¶ –í–µ–ª–∏–∫–∞—è –î–æ–Ω–µ—Ü–∫–∞—è –ò–º–ø–µ—Ä–∏—è"
                    await PlayerInfo.update({nationality: "‚ò¶ –í–µ–ª–∏–∫–∞—è –î–æ–Ω–µ—Ü–∫–∞—è –ò–º–ø–µ—Ä–∏—è"}, {where: {id: context.player.id}})
                    await context.send(`‚ò¶ –¢–µ–ø–µ—Ä—å —Ç—ã —Ö—Ä–∏—Å—Ç–∏–∞–Ω${context.player.gender ? "–∏–Ω" : "–∫–∞"}, –≥–æ—Ä–¥–∏—Å—å —ç—Ç–∏–º, –í–µ–ª–∏–∫–∞—è –î–æ–Ω–µ—Ü–∫–∞—è –ò–º–ø–µ—Ä–∏—è —Ä–∞–¥–∞ –ø—Ä–∏–Ω—è—Ç—å —Ç–µ–±—è –≤ —Å–≤–æ–∏ —Ä—è–¥—ã!`)
                }
            }
            else
            {
                await context.send(`‚ö† –¢—ã –Ω–µ –¥–æ—Å—Ç–æ–∏–Ω!`)
            }
        }
        catch (e)
        {
            await api.SendLogs(context, "ChatController/GetIslam", e)
        }
    }

    async Extract(context)
    {
        try
        {
            let resource = null
            if(context.command.match(Commands.money))
            {
                resource = "money"
            }
            if(context.command.match(Commands.wheat))
            {
                resource = "wheat"
            }
            if(context.command.match(Commands.stone))
            {
                resource = "stone"
            }
            if(context.command.match(Commands.wood))
            {
                resource = "wood"
            }
            if(context.command.match(Commands.iron))
            {
                resource = "iron"
            }
            if(context.command.match(Commands.copper))
            {
                resource = "copper"
            }
            if(context.command.match(Commands.silver))
            {
                resource = "silver"
            }
            if(!resource)
            {
                return
            }
            await this.ExtractResource(context, resource)
        }
        catch (e)
        {
            await api.SendLogs(context, "ChatController/Extract", e)
        }
    }

    async SendWarnList(context)
    {
        try
        {
            if(NameLibrary.RoleEstimator(context.player.role) === 0)
            {
                return
            }
            let user
            if(context.replyPlayers.length !== 0)
            {
                user = context.replyPlayers[0]
            }
            else
            {
                await context.send("‚ö† –í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä–æ–∫–∞")
                return
            }
            const count = await Warning.count({where: {userID: user}})
            if(count === 0)
            {
                await context.send("‚úÖ –£ —ç—Ç–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –Ω–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π")
            }
            else
            {
                await OutputManager.GetUserWarnings(context.player.id, user)
                await context.send("‚Ñπ –°–º–æ—Ç—Ä–∏—Ç–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –≤ –õ–°")
            }
        }
        catch (e)
        {
            await api.SendLogs(context, "ChatController/SendRating", e)
        }
    }

    async SendRating(context)
    {
        try
        {
            let request = ""
            if(context.messagePayload.action === "most_rich")
            {
                request += "üí∞ –°–∞–º—ã–µ –±–æ–≥–∞—Ç—ã–µ –ª—é–¥–∏ –ê–Ω—Ç–∏—á–Ω–æ—Å—Ç–∏\n\n"
                const theRich = await sequelize.query("SELECT \"id\", \"money\" FROM \"player-resources\" ORDER BY money DESC LIMIT 10")
                const players = await Player.findAll({
                    where: {id: theRich[0].map(key => {return key.id})},
                    attributes: ["id", "nick"]
                })
                let riches = {}
                for(const player of players)
                {
                    riches[player.dataValues.id] = {nick: player.dataValues.nick}
                }
                for(let i = 0; i < theRich[0].length; i++)
                {
                    request += `üü† ${i+1}: *id${theRich[0][i].id}(${riches[theRich[0][i].id].nick}) - ${theRich[0][i].money} ü™ô\n\n`
                }
            }
            if(context.messagePayload.action === "most_active")
            {
                request += "‚ò¢Ô∏è –°–∞–º—ã–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ª—é–¥–∏ –ê–Ω—Ç–∏—á–Ω–æ—Å—Ç–∏!\n\n"
                const mostActive = await sequelize.query("SELECT \"id\", \"msgs\" FROM \"player-infos\" ORDER BY msgs DESC LIMIT 25")
                const players = await Player.findAll({
                    where: {id: mostActive[0].map(key => {return key.id})},
                    attributes: ["id", "nick"]
                })
                let temp
                let users = {}
                for(const player of mostActive[0])
                {
                    users[player.id] = {active: player.msgs}
                }
                let active = []
                for(const player of players)
                {
                    active.push({
                        id: player.dataValues.id,
                        nick: player.dataValues.nick,
                        active: users[player.dataValues.id].active + (Data.activity[player.dataValues.id] ? Data.activity[player.dataValues.id] : 0)
                    })
                }
                for (let j = active.length - 1; j > 0; j--)
                {
                    for (let i = 0; i < j; i++)
                    {
                        if (active[i].active < active[i + 1].active)
                        {
                            temp = active[i];
                            active[i] = active[i + 1];
                            active[i + 1] = temp;
                        }
                    }
                }
                for(let i = 0; i < active.length; i++)
                {
                    request += `${i+1}. *id${active[i].id}(${active[i].nick}) - ${active[i].active}\n`
                }
                request += "\n"

                let array = []
                Object.keys(Data.activity).forEach(key => {
                    array.push([Data.activity[key], key])
                })

                if(array.length === 0)
                {
                    request += "üò¥ –ó–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–∏–∫—Ç–æ –Ω–∏—á–µ–≥–æ –Ω–µ —É—Å–ø–µ–ª –Ω–∞–ø–∏—Å–∞—Ç—å –≤ —á–∞—Ç"
                    await context.send(request)
                    return
                }
                for (let j = array.length - 1; j > 0; j--)
                {
                    for (let i = 0; i < j; i++)
                    {
                        if (array[i][0] > array[i + 1][0])
                        {
                            let temp = array[i];
                            array[i] = array[i + 1];
                            array[i + 1] = temp;
                        }
                    }
                }
                request += "‚ò¢Ô∏è –°–∞–º—ã–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞ —Å–µ–≥–æ–¥–Ω—è:\n\n"
                array = array.reverse()
                for(let i = 0; i < Math.min(10, array.length); i++)
                {
                    request += `${i+1}. ${await NameLibrary.GetPlayerNick(array[i][1])} - ${array[i][0]}\n`
                }
            }
            if(context.messagePayload.action === "uncultured")
            {
                request += "üò° –°–∞–º—ã–µ —Ç–æ–∫—Å–∏—á–Ω—ã–µ –ª—é–¥–∏ –ê–Ω—Ç–∏—á–Ω–æ—Å—Ç–∏! –û—Å—É–∂–¥–∞–µ–º!\n\n"
                const uncultured = await sequelize.query("SELECT \"id\", \"swords\" FROM \"player-infos\" ORDER BY swords DESC LIMIT 10")
                const players = await Player.findAll({
                    where: {id: uncultured[0].map(key => {return key.id})},
                    attributes: ["id", "nick"]
                })
                let temp
                let users = {}
                for(const player of uncultured[0])
                {
                    users[player.id] = {active: player.swords}
                }
                let active = []
                for(const player of players)
                {
                    active.push({
                        id: player.dataValues.id,
                        nick: player.dataValues.nick,
                        active: users[player.dataValues.id].active + (Data.uncultured[player.dataValues.id] ? Data.uncultured[player.dataValues.id] : 0)
                    })
                }
                for (let j = active.length - 1; j > 0; j--)
                {
                    for (let i = 0; i < j; i++)
                    {
                        if (active[i].active < active[i + 1].active)
                        {
                            temp = active[i];
                            active[i] = active[i + 1];
                            active[i + 1] = temp;
                        }
                    }
                }
                for(let i = 0; i < active.length; i++)
                {
                    request += `‚ô¶Ô∏è ${i+1} *id${active[i].id}(${active[i].nick}) - ${active[i].active}\n`
                }
                request += "\n"
                let array = []
                Object.keys(Data.uncultured).forEach(key => {
                    array.push([Data.uncultured[key], key])
                })
                if(array.length === 0)
                {
                    request += "üò∏ –£ –Ω–∞—Å —Å–µ–≥–æ–¥–Ω—è –Ω–∏–∫—Ç–æ –Ω–µ –º–∞—Ç–µ—Ä–∏–ª—Å—è!"
                    await context.send(request)
                    return
                }
                for (let j = array.length - 1; j > 0; j--)
                {
                    for (let i = 0; i < j; i++)
                    {
                        if (array[i][0] > array[i + 1][0])
                        {
                            let temp = array[i];
                            array[i] = array[i + 1];
                            array[i + 1] = temp;
                        }
                    }
                }
                request += "ü§¨ –°–µ–≥–æ–¥–Ω—è –±–æ–ª—å—à–µ –≤—Å–µ—Ö –º–∞—Ç–µ—Ä–∏–ª–∏—Å—å:\n\n"
                array = array.reverse()
                for(let i = 0; i < Math.min(10, array.length); i++)
                {
                    request += `${i+1}. ${await NameLibrary.GetPlayerNick(array[i][1])} - ${array[i][0]}\n`
                }
            }
            if(context.messagePayload.action === "stickermans")
            {
                request += "üòæ –ö—Ç–æ –æ–Ω–∏? –ë–æ–≥–∞—á–∏ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –≤—ã–ø–µ–Ω–¥—Ä–µ–∂–Ω–∏–∫–∏... –≠—Ç–æ —Ç–µ, –∫—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å—Ç–∏–∫–µ—Ä—ã –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ.\n\n"
                const stickers = await sequelize.query("SELECT \"id\", \"stickers\" FROM \"player-infos\" ORDER BY stickers DESC LIMIT 15")
                const players = await Player.findAll({
                    where: {id: stickers[0].map(key => {return key.id})},
                    attributes: ["id", "nick"]
                })
                let temp
                let users = {}
                for(const player of stickers[0])
                {
                    users[player.id] = {active: player.stickers}
                }
                let active = []
                for(const player of players)
                {
                    active.push({
                        id: player.dataValues.id,
                        nick: player.dataValues.nick,
                        active: users[player.dataValues.id].active + (Data.uncultured[player.dataValues.id] ? Data.uncultured[player.dataValues.id] : 0)
                    })
                }
                for (let j = active.length - 1; j > 0; j--)
                {
                    for (let i = 0; i < j; i++)
                    {
                        if (active[i].active < active[i + 1].active)
                        {
                            temp = active[i];
                            active[i] = active[i + 1];
                            active[i + 1] = temp;
                        }
                    }
                }
                for(let i = 0; i < active.length; i++)
                {
                    request += `üòº ${i+1}. *id${active[i].id}(${active[i].nick}) - ${active[i].active}\n`
                }
                request += "\n"
                let array = []
                Object.keys(Data.stickermans).forEach(key => {
                    array.push([Data.stickermans[key], key])
                })
                if(array.length === 0)
                {
                    request += "üëΩ –°–µ–≥–æ–¥–Ω—è —É –Ω–∞—Å –Ω–∏–∫—Ç–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª —Å—Ç–∏–∫–µ—Ä—ã"
                    await context.send(request)
                    return
                }
                for (let j = array.length - 1; j > 0; j--)
                {
                    for (let i = 0; i < j; i++)
                    {
                        if (array[i][0] > array[i + 1][0])
                        {
                            let temp = array[i];
                            array[i] = array[i + 1];
                            array[i + 1] = temp;
                        }
                    }
                }
                request += "üòº –û—Ç–ø—Ä–∞–≤–∏–ª–∏ –±–æ–ª—å—à–µ –≤—Å–µ—Ö —Å—Ç–∏–∫–µ—Ä–æ–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n\n"
                array = array.reverse()
                for(let i = 0; i < Math.min(10, array.length); i++)
                {
                    request += `${i+1}. ${await NameLibrary.GetPlayerNick(array[i][1])} - ${array[i][0]}\n`
                }
            }
            if(context.messagePayload.action === "music_lovers")
            {
                request += "üé∂ –í–æ—Ç –æ–Ω–∏ - –ª—é–±–∏—Ç–µ–ª–∏ –ø–æ—Å–ª—É—à–∞—Ç—å –∏ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å–≤–æ–µ–π –º—É–∑—ã–∫–æ–π.\n\n"
                const audios = await sequelize.query("SELECT \"id\", \"audios\" FROM \"player-infos\" ORDER BY audios DESC LIMIT 10")
                const players = await Player.findAll({
                    where: {id: audios[0].map(key => {return key.id})},
                    attributes: ["id", "nick"]
                })
                let temp
                let users = {}
                for(const player of audios[0])
                {
                    users[player.id] = {active: player.audios}
                }
                let active = []
                for(const player of players)
                {
                    active.push({
                        id: player.dataValues.id,
                        nick: player.dataValues.nick,
                        active: users[player.dataValues.id].active + (Data.uncultured[player.dataValues.id] ? Data.uncultured[player.dataValues.id] : 0)
                    })
                }
                for (let j = active.length - 1; j > 0; j--)
                {
                    for (let i = 0; i < j; i++)
                    {
                        if (active[i].active < active[i + 1].active)
                        {
                            temp = active[i];
                            active[i] = active[i + 1];
                            active[i + 1] = temp;
                        }
                    }
                }
                for(let i = 0; i < active.length; i++)
                {
                    request += `üé∂ ${i+1} *id${active[i].id}(${active[i].nick}) - ${active[i].active}\n`
                }
                request += "\n"
                let array = []
                Object.keys(Data.musicLovers).forEach(key => {
                    array.push([Data.musicLovers[key], key])
                })
                if(array.length === 0)
                {
                    request += "üîá –°–µ–≥–æ–¥–Ω—è –Ω–∏–∫—Ç–æ –Ω–µ –¥–µ–ª–∏–ª—Å—è –º—É–∑—ã–∫–æ–π"
                    await context.send(request)
                    return
                }
                for (let j = array.length - 1; j > 0; j--)
                {
                    for (let i = 0; i < j; i++)
                    {
                        if (array[i][0] > array[i + 1][0])
                        {
                            let temp = array[i];
                            array[i] = array[i + 1];
                            array[i + 1] = temp;
                        }
                    }
                }
                request += "üéµ –ë–æ–ª—å—à–µ –≤—Å–µ—Ö —Å–µ–≥–æ–¥–Ω—è –¥–µ–ª–∏–ª–∏—Å—å –º—É–∑—ã–∫–æ–π:\n\n"
                array = array.reverse()
                for(let i = 0; i < Math.min(10, array.length); i++)
                {
                    request += `${i+1}. ${await NameLibrary.GetPlayerNick(array[i][1])} - ${array[i][0]}\n`
                }
            }
            if(context.messagePayload.action === "alcoholics")
            {
                request += "üç∫ –û–Ω–∏ —É–∂–µ –≤—ã–ø–∏–ª–∏ –æ—á–µ–Ω—å –º–Ω–æ–≥–æ –ø–∏–≤–∞, –Ω–æ –∏—Ö –≤—Å–µ —Ä–∞–≤–Ω–æ –Ω–µ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å ü•¥\n\n"
                const players = await sequelize.query("SELECT \"id\", \"nick\", \"beer\" FROM \"players\" ORDER BY beer DESC LIMIT 10")
                let temp
                let active = []
                for(const player of players[0])
                {
                    active.push({
                        id: player.id,
                        nick: player.nick,
                        beer: player.beer
                    })
                }
                for (let j = active.length - 1; j > 0; j--)
                {
                    for (let i = 0; i < j; i++)
                    {
                        if (active[i].beer < active[i + 1].beer)
                        {
                            temp = active[i];
                            active[i] = active[i + 1];
                            active[i + 1] = temp;
                        }
                    }
                }
                for(let i = 0; i < active.length; i++)
                {
                    request += `${i+1} *id${active[i].id}(${active[i].nick}) - ${active[i].beer.toFixed(1)} –ª.\n`
                }
            }
            let msg = await context.send(request, {disable_mentions: true})
            if(context.chat?.clean)
            {
                setTimeout(async () => {
                    try {
                        await api.api.messages.delete({
                            conversation_message_ids: context.conversationMessageId,
                            delete_for_all: 1,
                            peer_id: context.peerId
                        })
                    } catch (e) {
                    }
                    try {
                        await api.api.messages.delete({
                            conversation_message_ids: msg.conversationMessageId,
                            delete_for_all: 1,
                            peer_id: msg.peerId
                        })
                    } catch (e) {
                    }
                }, 60000)
            }
        }
        catch (e)
        {
            await api.SendLogs(context, "ChatController/SendTopsMessage", e)
        }
    }

    async SendTopsMessage(context)
    {
        try
        {
            let msg = await context.send("üåü –õ—É—á—à–∏–µ –ª—é–¥–∏ –ê–Ω—Ç–∏—á–Ω–æ—Å—Ç–∏ –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º –Ω–∏–∂–µ!\n\n" +
                "üí∞ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç –≤ –∫–æ—à–µ–ª—å–∫–µ.\n" +
                "üò° –ù–µ–∫—É–ª—å—Ç—É—Ä–Ω—ã–µ –ª—é–¥–∏. –û—Å—É–∂–¥–∞–µ–º!\n" +
                "üí¨ –°–∞–º—ã–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ª—é–¥–∏ –≤ –ø—Ä–æ–µ–∫—Ç–µ.\n" +
                "üòº –ë–æ–≥–∞—Ç—ã–µ –ø–µ—Ä—Ü—ã —Å–æ —Å—Ç–∏–∫–µ—Ä–∞–º–∏.\n" +
                "üé∂ –õ—é–±–∏—Ç–µ–ª–∏ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –º—É–∑—ã–∫–æ–π.\n" +
                "üç∫ –ì–ª–∞–≤–Ω—ã–µ –∞–ª–∫–æ–≥–æ–ª–∏–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞.\n", {
                keyboard: keyboard.build([
                    [keyboard.greyButton({name: "üí∞ –ë–æ–≥–∞—á–∏", type: "ratings", action: "most_rich"}), keyboard.greyButton({name: "üç∫ –ê–ª–∫–æ–≥–æ–ª–∏–∫–∏", type: "ratings", action: "alcoholics"})],
                    [keyboard.greenButton({name: "‚ò¢Ô∏è –°–∞–º—ã–µ –∞–∫—Ç–∏–≤–Ω—ã–µ", type: "ratings", action: "most_active"}), keyboard.greenButton({name: "üò° –ù–µ–∫—É–ª—å—Ç—É—Ä–Ω—ã–µ", type: "ratings", action: "uncultured"})],
                    [keyboard.greenButton({name: "üòº –°—Ç–∏–∫–µ—Ä—ã", type: "ratings", action: "stickermans"}), keyboard.greenButton({name: "üé∂ –ú–µ–ª–æ–º–∞–Ω—ã", type: "ratings", action: "music_lovers"})]
                ]).inline()
            })
            if(context.chat?.clean)
            {
                setTimeout(async () => {
                    try {
                        await api.api.messages.delete({
                            conversation_message_ids: context.conversationMessageId,
                            delete_for_all: 1,
                            peer_id: context.peerId
                        })
                    } catch (e) {
                    }
                    try {
                        await api.api.messages.delete({
                            conversation_message_ids: msg.conversationMessageId,
                            delete_for_all: 1,
                            peer_id: msg.peerId
                        })
                    } catch (e) {
                    }
                }, 60000)
            }
        }
        catch (e)
        {
            await api.SendLogs(context, "ChatController/SendRating", e)
        }
    }

    async StartRepeat(context)
    {
        try
        {
            if(NameLibrary.RoleEstimator(context.player.role) < 1 && !StopList.includes(context.player.id))
            {
                return
            }
            let user
            if(context.replyPlayers.length !== 0)
            {
                user = context.replyPlayers[0]
            }
            else
            {
                user = context.player.id
            }
            if(context.chat.antiMuteList[user])
            {
                await context.send("‚ö† –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —É–∂–µ –≤–∫–ª—é—á–µ–Ω–æ")
                return
            }
            if(context.chat.muteList[user])
            {
                delete context.chat.muteList[user]
                await Data.SaveVKChat(context.chat.id)
            }
            if(Data.mute[user])
            {
                let admin = await Player.findOne({where: {id: Data.mute[user].moder}, attributes: ["role"]})
                if(NameLibrary.RoleEstimator(admin.dataValues.role) > NameLibrary.RoleEstimator(context.player.role) || Data.mute[user].moder === context.player.id)
                {
                    clearTimeout(Data.mute[context.replyPlayers[0]].timeout)
                    delete Data.mute[context.replyPlayers[0]]
                }
                else
                {
                    await context.send("‚ö† –°–Ω—è—Ç—å –º—É—Ç –º–æ–∂–µ—Ç —Ç–æ–ª—å–∫–æ —Ç–æ—Ç, –∫—Ç–æ –µ–≥–æ –Ω–∞–ª–æ–∂–∏–ª –∏–ª–∏ –∞–¥–º–∏–Ω —Ä–∞–Ω–≥–æ–º –≤—ã—à–µ")
                    return
                }
            }
            const name = await api.GetUserData(context.replyPlayers[0])
            context.chat.antiMuteList[user] = {
                moderID: context.player.id,
                name: name.first_name + " " + name.last_name
            }
            await Data.SaveVKChat(context.chat.id)
            await context.send("‚úÖ –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ")
        }
        catch (e)
        {
            await api.SendLogs(context, "ChatController/StartRepeat", e)
        }
    }

    async StopRepeat(context)
    {
        try
        {
            let user
            if(context.replyPlayers.length !== 0)
            {
                user = context.replyPlayers[0]
            }
            else
            {
                user = context.player.id
            }
            if(!context.chat.antiMuteList[user])
            {
                await context.send("‚ö† –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –≤–∫–ª—é—á–µ–Ω–æ")
                return
            }
            if(context.player.id !== user && context.chat.antiMuteList[user].moder !== context.player.id)
            {
                await context.send("‚ö† –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–∂–µ—Ç —Å–Ω—è—Ç—å —Ç–æ–ª—å–∫–æ —Å–∞–º –¥—É–±–ª–∏—Ä—É–µ–º—ã–π –∏–ª–∏ —Ç–æ—Ç –∫—Ç–æ –µ–≥–æ –Ω–∞–ª–æ–∂–∏–ª")
                return
            }
            delete context.chat.antiMuteList[user]
            await Data.SaveVKChat(context.chat.id)
            await context.send("‚úÖ –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–∫–ª—é—á–µ–Ω–æ")
        }
        catch (e)
        {
            await api.SendLogs(context, "ChatController/StopRepeat", e)
        }
    }

    async ChangeNick(context)
    {
        try
        {
            let nick = context.text.replace(Commands.changeNick, "")
            let user = await Player.count({where: {nick: nick}})
            if(user !== 0)
            {
                await context.send("‚ö† –ù–∏–∫ –∑–∞–Ω—è—Ç")
                return
            }
            context.player.nick = nick
            await Player.update({nick: nick}, {where: {id: context.player.id}})
            await context.send("‚úÖ –ù–∏–∫ –∏–∑–º–µ–Ω–µ–Ω")
        }
        catch (e)
        {
            await api.SendLogs(context, "ChatController/ChangeNick", e)
        }
    }

    async ChangeDescription(context)
    {
        try
        {
            let description = context.text.replace(Commands.changeDescription, "")
            context.player.description = description
            await PlayerInfo.update({description: description}, {where: {id: context.player.id}})
            await context.send("‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–æ")
        }
        catch (e)
        {
            await api.SendLogs(context, "ChatController/ChangeDescription", e)
        }
    }

    async GetID(context)
    {
        try
        {
            if(NameLibrary.RoleEstimator(context.player.role) === 0)
            {
                return
            }
            if(context.replyPlayers?.length === 0)
            {
                return
            }
            await context.send(context.replyPlayers.join("\n"))
        }
        catch (e)
        {
            await api.SendLogs(context, "ChatController/GetID", e)
        }
    }

    async Teleport(context)
    {
        try
        {
            if(NameLibrary.RoleEstimator(context.player.role) < 2)
            {
                return
            }
            let user, temp, country
            if(context.replyPlayers?.length !== 0)
            {
                user = context.replyPlayers[0]
            }
            else
            {
                user = context.player.id
            }
            let status = await PlayerStatus.findOne({where: {id: user}})
            if(!status)
            {
                await context.send("‚ö† –ò–≥—Ä–æ–∫ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
                return
            }
            for(const key of Data.countries)
            {
                if(key?.tags)
                {
                    temp = new RegExp(key.tags)
                    if(context.command.match(temp))
                    {
                        country = key
                        break
                    }
                }
            }
            if(!country)
            {
                await context.send("‚ö† –§—Ä–∞–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return
            }
            if(Data.users[user])
            {
                Data.users[user].countryID = country.id
                Data.users[user].location = country.capitalID
            }
            status.set({
                countryID: country.id,
                location: country.capitalID
            })
            await status.save()
            await context.send(`‚úÖ *id${user}(–ò–≥—Ä–æ–∫) —Ç–µ–ª–µ–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤ —Ñ—Ä–∞–∫—Ü–∏—é ${country.GetName(context.player.platform === "IOS")}`)
        }
        catch (e)
        {
            await api.SendLogs(context, "ChatController/Teleport", e)
        }
    }

    async ToStall(context)
    {
        try
        {
            let user
            if(context.replyPlayers?.length !== 0)
            {
                user = context.replyPlayers[0]
            }
            else
            {
                user = context.player.id
            }
            if(!user) return
            if(user < 0) user = context.player.id
            let person = await api.GetUserData(user)
            await context.send(`üíä *id${user}(${person.first_name + " " + person.last_name}) ${Samples.stall_add_request(parseInt(person.sex) === 2)}`, {disable_mentions: true})
        }
        catch (e)
        {
            await api.SendLogs(context, "ChatController/ToStall", e)
        }
    }

    async GetResources(context)
    {
        try
        {
            if(context.replyPlayers?.length !== 0 && NameLibrary.RoleEstimator(context.player.role) >= 1)
            {
                let resources = await PlayerResources.findOne({where: {id: context.replyPlayers[0]}})
                if(!resources)
                {
                    await context.send("‚ö† –ò–≥—Ä–æ–∫ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
                    return
                }
                const msg = await context.send(`*id${context.replyPlayers[0]}(–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å):\n\nüí∞ –ú–æ–Ω–µ—Ç—ã - ${resources.dataValues.money}\nü™® –ö–∞–º–µ–Ω—å - ${resources.dataValues.stone}\nüåæ –ó–µ—Ä–Ω–æ - ${resources.dataValues.wheat}\nü™µ –î–µ—Ä–µ–≤–æ - ${resources.dataValues.wood}\nüåë –ñ–µ–ª–µ–∑–æ - ${resources.dataValues.iron}\nü•â –ë—Ä–æ–Ω–∑–∞ - ${resources.dataValues.copper}\nü•à –°–µ—Ä–µ–±—Ä–æ - ${resources.dataValues.silver}\nüíé –ê–ª–º–∞–∑—ã - ${resources.dataValues.diamond}`)
                setTimeout(async () => {
                    try {
                        await api.api.messages.delete({
                            conversation_message_ids: msg.conversationMessageId,
                            delete_for_all: 1,
                            peer_id: msg.peerId
                        })
                    } catch (e) {
                    }
                }, 60000)
                return
            }
            const msg = await context.send(context.player.GetResources())
            setTimeout(async () => {
                try {
                    await api.api.messages.delete({
                        conversation_message_ids: msg.conversationMessageId,
                        delete_for_all: 1,
                        peer_id: msg.peerId
                    })
                } catch (e) {
                }
            }, 60000)
        }
        catch (e)
        {
            await api.SendLogs(context, "ChatController/GetResources", e)
        }
    }

    async GetCitizenship(context)
    {
        try
        {
            if(context.replyPlayers.length !== 0 && NameLibrary.RoleEstimator(context.player.role) >= 4)
            {
                await this.GiveCitizenship()
                return
            }
            let temp = null
            let country = null
            let time = new Date()
            const reg = new Date(context.player.createdAt)
            reg.setDate(reg.getDate() + 7)
            for(const key of Data.countries)
            {
                if(key?.tags)
                {
                    temp = new RegExp(key.tags)
                    if(context.command.match(temp))
                    {
                        country = key
                        break
                    }
                }
            }
            if(context.player.lastCitizenship - time > 0 && reg - time < 0)
            {
                await context.send("‚ö† –ú–µ–Ω—è—Ç—å –≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é")
                return
            }
            if(!country)
            {
                await context.send("‚ö† –§—Ä–∞–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return
            }
            if(context.player.status.match(/official|leader/))
            {
                await context.send("‚ö† –ü—Ä–∞–≤–∏—Ç–µ–ª–∏ –∏ —á–∏–Ω–æ–≤–Ω–∏–∫–∏ –Ω–µ –º–æ–≥—É—Ç –º–µ–Ω—è—Ç—å –≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ")
                return
            }
            if(Data.timeouts["get_citizenship_" + context.player.id])
            {
                await context.send("‚ö† –í—ã —É–∂–µ –ø–æ–¥–∞–ª–∏ –Ω–∞ –≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ")
                return
            }
            if(country.id === context.player.citizenship)
            {
                await context.send("‚ö† –í—ã —É–∂–µ —è–≤–ª—è–µ—Ç–µ—Å—å –≥—Ä–∞–∂–¥–∞–Ω–∏–Ω–æ–º —ç—Ç–æ–π —Ñ—Ä–∞–∫—Ü–∏–∏.")
                return
            }

            await api.api.messages.send({
                user_id: country.leaderID,
                random_id: Math.round(Math.random() * 100000),
                message: `ü™™ –ò–≥—Ä–æ–∫ ${context.player.GetName()} –ø–æ–¥–∞–ª –Ω–∞ –≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ –≤ –≤–∞—à—É —Ñ—Ä–∞–∫—Ü–∏—é: \n\n${context.player.GetInfo()}`,
                keyboard: keyboard.build([[keyboard.acceptCallbackButton({command: "give_citizenship", item: context.player.id, parameter: country.id}), keyboard.declineCallbackButton({command: "decline_citizenship", item: context.player.id, parameter: country.id})]]).inline().oneTime()
            })
            let officials = Data.officials[country.id]
            if(officials)
            {
                for(const official of Object.keys(officials))
                {
                    if(officials[official].canBeDelegate)
                    {
                        await api.api.messages.send({
                            user_id: official,
                            random_id: Math.round(Math.random() * 100000),
                            message: `ü™™ –ò–≥—Ä–æ–∫ ${context.player.GetName()} –ø–æ–¥–∞–ª –Ω–∞ –≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ –≤ –≤–∞—à—É —Ñ—Ä–∞–∫—Ü–∏—é: \n\n${context.player.GetInfo()}`,
                            keyboard: keyboard.build([[keyboard.acceptCallbackButton({command: "give_citizenship", item: context.player.id, parameter: country.id}), keyboard.declineCallbackButton({command: "decline_citizenship", item: context.player.id, parameter: country.id})]]).inline().oneTime()
                        })
                    }
                }
            }
            time.setHours(time.getHours() + 24)
            Data.timeouts["get_citizenship_" + context.player.id] = {
                type: "user_timeout",
                subtype: "get_citizenship",
                userId: context.player.id,
                time: time,
                countryID: country.id,
                timeout: setTimeout(async () => {
                    await api.SendMessage(context.player.id, `‚Ñπ –í—ã –ø–æ–¥–∞–ª–∏ –∑–∞—è–≤–∫—É –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–∞ –≤ —Ñ—Ä–∞–∫—Ü–∏–∏ ${Data.countries[country].GetName(context.player.platform === "IOS")}, –Ω–æ –ø—Ä–æ—à–ª–æ —É–∂–µ 24 —á–∞—Å–∞, –∏ –Ω–∏–∫—Ç–æ –µ—ë –Ω–µ –ø—Ä–∏–Ω—è–ª, –ø–æ—ç—Ç–æ–º—É –æ–Ω–∞ –∞–Ω–Ω—É–ª–∏—Ä—É–µ—Ç—Å—è.`)
                    delete Data.timeouts["get_citizenship_" + context.player.id]
                }, 86400000)
            }
            await context.send("‚úÖ –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")
        }
        catch (e)
        {
            await api.SendLogs(context, "ChatController/GetCitizenship", e)
        }
    }

    async GiveCitizenship(context)
    {
        try
        {
            let temp = null
            let country = null
            let time = new Date()
            let player = Data.users[context.replyPlayers[0]]
            if(!player)
            {
                await context.send("‚ö† –ò–≥—Ä–æ–∫–∞ –Ω–µ—Ç –≤ –∫—ç—à–µ")
                return
            }
            for(const key of Data.countries)
            {
                if(key?.tags)
                {
                    temp = new RegExp(key.tags)
                    if(context.command.match(temp))
                    {
                        country = key
                        break
                    }
                }
            }
            if(!country)
            {
                await context.send("‚ö† –§—Ä–∞–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return
            }
            if(Data.timeouts["get_citizenship_" + player.id])
            {
                delete Data.timeouts["get_citizenship_" + player.id]
            }
            if(country.id === player.citizenship)
            {
                await context.send("‚ö† –ò–≥—Ä–æ–∫ —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –≥—Ä–∞–∂–¥–∞–Ω–∏–Ω–æ–º —ç—Ç–æ–π —Ñ—Ä–∞–∫—Ü–∏–∏.")
                return
            }
            await api.api.messages.send({
                user_id: country.leaderID,
                random_id: Math.round(Math.random() * 100000),
                message: `ü™™ –ò–≥—Ä–æ–∫ ${player.GetName()} –ø–æ–¥–∞–ª –Ω–∞ –≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ –≤ –≤–∞—à—É —Ñ—Ä–∞–∫—Ü–∏—é: \n\n${player.GetInfo()}`,
                keyboard: keyboard.build([[keyboard.acceptCallbackButton({command: "give_citizenship", item: player.id, parameter: country.id}), keyboard.declineCallbackButton({command: "decline_citizenship", item: player.id, parameter: country.id})]]).inline().oneTime()
            })
            let officials = Data.officials[country.id]
            if(officials)
            {
                for(const official of Object.keys(officials))
                {
                    if(officials[official].canBeDelegate)
                    {
                        await api.api.messages.send({
                            user_id: official,
                            random_id: Math.round(Math.random() * 100000),
                            message: `ü™™ –ò–≥—Ä–æ–∫ ${player.GetName()} –ø–æ–¥–∞–ª –Ω–∞ –≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ –≤ –≤–∞—à—É —Ñ—Ä–∞–∫—Ü–∏—é: \n\n${player.GetInfo()}`,
                            keyboard: keyboard.build([[keyboard.acceptCallbackButton({command: "give_citizenship", item: player.id, parameter: country.id}), keyboard.declineCallbackButton({command: "decline_citizenship", item: player.id, parameter: country.id})]]).inline().oneTime()
                        })
                    }
                }
            }
            time.setHours(time.getHours() + 24)
            Data.timeouts["get_citizenship_" + player.id] = {
                type: "user_timeout",
                subtype: "get_citizenship",
                userId: player.id,
                time: time,
                countryID: country,
                timeout: setTimeout(async () => {
                    delete Data.timeouts["get_citizenship_" + player.id]
                }, 86400000)
            }
            await context.send("‚úÖ –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")
        }
        catch (e)
        {
            await api.SendLogs(context, "ChatController/GetCitizenship", e)
        }
    }

    async ShowVars(context)
    {
        try
        {
            if (NameLibrary.RoleEstimator(context.player.role) < 4)
            {
                return
            }
            const vars = Object.keys(Data.variables)
            const varButtons = []
            let request = "‚Ñπ –°–ø–∏—Å–æ–∫ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö:\n\n"
            for(let i = 0; i < vars.length; i++)
            {
                varButtons.push([vars[i], vars[i]])
                request += "üî∏ " + vars[i] + "   =   " + Data.variables[vars[i]] + "\n"
            }
            await context.send(request)
        }
        catch (e)
        {
            await context.send("–û—à–∏–±–∫–∞: " + e.message)
        }
    }

    async SetVar(context)
    {
        try
        {
            if (NameLibrary.RoleEstimator(context.player.role) < 4)
            {
                return
            }
            const vars = Object.keys(Data.variables)
            const varButtons = []
            let request = "‚Ñπ –°–ø–∏—Å–æ–∫ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö:\n\n"
            for(let i = 0; i < vars.length; i++)
            {
                varButtons.push([vars[i], vars[i]])
                request += "üî∏ " + vars[i] + "   =   " + Data.variables[vars[i]] + "\n"
            }
            let msg = context.text.replace(/^—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é |^–∏–∑–º–µ–Ω–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é /i, "")
            let commands = msg.split(" ")
            if(commands.length < 2)
            {
                await context.send("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")
                return
            }
            let varName = commands[0]
            commands = commands.slice(1)
            commands = commands.join(" ")
            if(!Data.variables[varName])
            {
                await context.send("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return
            }
            Data.variables[varName] = commands
            await Data.SaveVariables()
            await context.send("‚úÖ –ó–Ω–∞—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –∏–∑–º–µ–Ω–µ–Ω–æ")
        }
        catch (e)
        {
            await context.send("–û—à–∏–±–∫–∞: " + e.message)
        }
    }

    async GiveAttachment(context)
    {
        try
        {
            if (NameLibrary.RoleEstimator(context.player.role) < 4)
            {
                return
            }
            if (!context.attachments[0])
            {
                await context.send("–ù–µ—Ç –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
                return
            }
            let attachment = context.attachments[0]
            if(attachment.type === "photo")
            {
                attachment = await api.upload.messagePhoto({source: {value: attachment.largeSizeUrl}})
                attachment = attachment.toString()
            }
            else
            {
                attachment = attachment.toString()
            }
            await context.send(attachment)
        }
        catch (e)
        {
            await context.send("–û—à–∏–±–∫–∞: " + e.message)
        }
    }

    async KickUser(context)
    {
        try
        {
            if (NameLibrary.RoleEstimator(context.player.role) < 3)
            {
                return
            }
            if(StopList.includes(context.replyPlayers[0]))
            {
                return
            }
            if(context.replyPlayers?.length !== 0)
            {
                let player = await Player.findOne({where: {id: context.replyPlayers[0]}, attributes: ["role"]})
                let id = context.command.match(/\d+/)
                let chatID = id ? (parseInt(id[0]) + 2000000000)  : context.peerId
                if(NameLibrary.RoleEstimator(player?.dataValues.role) >= NameLibrary.RoleEstimator(context.player.role))
                {
                    await context.send("‚ö† –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∫–∏–∫–Ω—É—Ç—å –∞–¥–º–∏–Ω–∞ –Ω–∞—Ö–æ–¥—è—â–µ–≥–æ—Å—è –Ω–∞ –æ–¥–Ω–æ–º —Å –≤–∞–º–∏ —Ä–∞–Ω–≥–µ –∏–ª–∏ –≤—ã—à–µ")
                    return
                }
                await api.KickUser(chatID, context.replyPlayers[0])
            }
        }
        catch (e)
        {
            await context.send("–û—à–∏–±–∫–∞: " + e.message)
        }
    }

    async ShowPlayerActive(context)
    {
        try
        {
            if(context.replyPlayers?.length !== 0 && NameLibrary.RoleEstimator(context.player.role) === 0)
            {
                return
            }
            let activity = {
                allMessages: 0,
                allAudios: 0,
                allStickers: 0,
                allSwords: 0,
                todayMessages: 0,
                todayAudios: 0,
                todayStickers: 0,
                todaySwords: 0
            }
            if(context.replyPlayers?.length !== 0)
            {
                if(Data.users[context.replyPlayers[0]])
                {
                    if(Data.activity[context.replyPlayers[0]]) activity.todayMessages = Data.activity[context.replyPlayers[0]]
                    if(Data.musicLovers[context.replyPlayers[0]]) activity.todayAudios = Data.musicLovers[context.replyPlayers[0]]
                    if(Data.stickermans[context.replyPlayers[0]]) activity.todayStickers = Data.stickermans[context.replyPlayers[0]]
                    if(Data.uncultured[context.replyPlayers[0]]) activity.todaySwords = Data.uncultured[context.replyPlayers[0]]
                    activity.allMessages = Data.users[context.replyPlayers[0]].msgs + activity.todayMessages
                    activity.allAudios = Data.users[context.replyPlayers[0]].audios + activity.todayAudios
                    activity.allStickers = Data.users[context.replyPlayers[0]].stickers + activity.todayStickers
                    activity.allSwords = Data.users[context.replyPlayers[0]].swords + activity.todaySwords
                }
                else
                {
                    const user = await PlayerInfo.findOne({where: {id: context.replyPlayers[0]}})
                    if(!user)
                    {
                        await context.send("‚ö† –ò–≥—Ä–æ–∫ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
                        return
                    }
                    activity.allMessages = user.dataValues.msgs
                    activity.allAudios = user.dataValues.audios
                    activity.allStickers = user.dataValues.stickers
                    activity.allSwords = user.dataValues.swords
                }
            }
            else
            {
                if(Data.activity[context.player.id]) activity.todayMessages = Data.activity[context.player.id]
                if(Data.musicLovers[context.player.id]) activity.todayAudios = Data.musicLovers[context.player.id]
                if(Data.stickermans[context.player.id]) activity.todayStickers = Data.stickermans[context.player.id]
                if(Data.uncultured[context.player.id]) activity.todaySwords = Data.uncultured[context.player.id]
                activity.allMessages = context.player.msgs + activity.todayMessages
                activity.allAudios = context.player.audios + activity.todayAudios
                activity.allStickers = context.player.stickers + activity.todayStickers
                activity.allSwords = context.player.swords + activity.todaySwords
            }
            let request = "‚Üñ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n" +
                "üí¨ –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: " + activity.allMessages + "\n" +
                "üí© –í—Å–µ–≥–æ —Å—Ç–∏–∫–µ—Ä–æ–≤: " + activity.allStickers + "\n" +
                "üé∂ –í—Å–µ–≥–æ –º—É–∑—ã–∫–∏: " + activity.allAudios + "\n" +
                "ü§¨ –í—Å–µ–≥–æ –º–∞—Ç–æ–≤: " + activity.allSwords + "\n" +
                "‚ö† –í—Å–µ–≥–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: " + context.player.warningScore + "\n\n" +
                "üí¨ –°–æ–æ–±—â–µ–Ω–∏–π —Å–µ–≥–æ–¥–Ω—è: " + activity.todayMessages + "\n" +
                "üí© –°—Ç–∏–∫–µ—Ä–æ–≤ —Å–µ–≥–æ–¥–Ω—è: " + activity.todayStickers + "\n" +
                "üé∂ –ú—É–∑—ã–∫–∏ —Å–µ–≥–æ–¥–Ω—è: " + activity.todayAudios + "\n" +
                "ü§¨ –ú–∞—Ç–æ–≤ —Å–µ–≥–æ–¥–Ω—è: " + activity.todaySwords
            let msg = await context.send(request)
            if(context.chat?.clean) {
                setTimeout(async () => {
                    try {
                        await api.api.messages.delete({
                            conversation_message_ids: context.conversationMessageId,
                            delete_for_all: 1,
                            peer_id: context.peerId
                        })
                    } catch (e) {
                    }
                    try {
                        await api.api.messages.delete({
                            conversation_message_ids: msg.conversationMessageId,
                            delete_for_all: 1,
                            peer_id: msg.peerId
                        })
                    } catch (e) {
                    }
                }, 60000)
            }
        }
        catch (e)
        {
            await api.SendLogs(context, "ChatController/Divorce", e)
        }
    }

    async Divorce(context)
    {
        try
        {
            if(!context.player.marriedID)
            {
                await context.send("‚ö† –í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –±—Ä–∞–∫–µ.")
                return
            }
            let player = await Player.findOne({where: {id: context.player.marriedID}})
            await PlayerInfo.update({marriedID: null}, {where: {id: context.player.id}})
            await PlayerInfo.update({marriedID: null}, {where: {id: context.player.marriedID}})
            if(Data.users[context.player.marriedID])
            {
                Data.users[context.player.marriedID].marriedID = null
                Data.users[context.player.marriedID].isMarried = false
            }
            context.player.marriedID = null
            context.player.isMarried = false
            await api.SendMessage(player.dataValues.id, `üíî –ë–æ–ª—å—à–µ ${context.player.GetName()} –Ω–µ –≤–∞—à${context.player.gender ? " –º—É–∂" : "–∞ –∂–µ–Ω–∞"}`)
            await context.send(`üíî *id${player.dataValues.id}(${player.dataValues.nick}) –±–æ–ª—å—à–µ –Ω–µ –≤–∞—à${player.dataValues.gender ? " –º—É–∂" : "–∞ –∂–µ–Ω–∞"}`)
        }
        catch (e)
        {
            await api.SendLogs(context, "ChatController/Divorce", e)
        }
    }

    async OfferMarry(context)
    {
        try
        {
            if(context.replyPlayers?.length === 0)
            {
                await context.send("‚ö† –í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä–æ–∫–∞")
                return
            }
            if(context.player.isMarried)
            {
                await context.send("‚ö† –í—ã —É–∂–µ –ø–æ–º–æ–ª–≤–ª–µ–Ω—ã")
                return
            }
            let user = context.replyPlayers[0]
            user = await Player.findOne({where: {id: user}})
            if(!user)
            {
                await context.send("‚ö† –ò–≥—Ä–æ–∫ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
                return
            }
            const userInfo = await PlayerInfo.findOne({where: {id: user.dataValues.id}, attributes: ["marriedID"]})
            if(userInfo.dataValues.marriedID !== null)
            {
                await context.send(`‚ö† –≠—Ç–æ—Ç –∏–≥—Ä–æ–∫ —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç –≤ –±—Ä–∞–∫–µ`)
                return
            }
            if(NameLibrary.GetGender(user.dataValues.gender) === context.player.gender && !context.player.nationality.match(/–≥—Ä–µ–∫/i))
            {
                await context.send("‚úù –ú—ã —Ç–∞–∫–æ–µ –Ω–µ –æ–¥–æ–±—Ä—è–µ–º.")
                return
            }
            await api.api.messages.send({
                user_id: user.dataValues.id,
                random_id: Math.round(Math.random() * 100000),
                message: `üíå –ò–≥—Ä–æ–∫ *id${context.player.id}(${context.player.nick}) –æ—Ç–ø—Ä–∞–≤–∏–ª –≤–∞–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Ä—É–∫–∏ –∏ —Å–µ—Ä–¥—Ü–∞`,
                keyboard: keyboard.build([[keyboard.acceptCallbackButton({command: "merry", item: context.player.id}), keyboard.declineCallbackButton({command: "decline_merry", item: context.player.id})]]).inline().oneTime()
            })
            Data.users[context.player.id].isMarried = true
            await context.send(`‚úÖ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, —Ö–æ–¥ –∑–∞ *id${user.dataValues.id}(–≤–∞–º–∏), –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –õ–° –∏ –¥–∞–π—Ç–µ —Å–≤–æ–π –æ—Ç–≤–µ—Ç`)
        }
        catch (e)
        {
            await api.SendLogs(context, "ChatController/OfferMarry", e)
        }
    }

    async ToOtherCity(context, id)
    {
        try
        {
            let time = new Date()
            if(context.player.stayInCityTime - time > 0)
            {
                await context.send(`‚ö† –í—ã —Å–∏–ª—å–Ω–æ —É—Å—Ç–∞–ª–∏ –ø–æ—Å–ª–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –¥–æ—Ä–æ–≥–∏, –æ—Ç–¥–æ—Ö–Ω–∏—Ç–µ –∏ –º–æ–∂–Ω–æ –æ–ø—è—Ç—å –≤ –ø—É—Ç—å.\n\n–î–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–∏–ª ${NameLibrary.ParseFutureTime(context.player.stayInCityTime)}`)
                return
            }
            const road = await CityRoads.findOne({where: {fromID: context.player.location, toID: id}})
            if(!road)
            {
                await context.send("‚ö† –í–∞–º –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞ —ç—Ç–∞ –¥–æ—Ä–æ–≥–∞")
                return
            }
            const city = Data.cities[id]
            if(city.isSiege && context.player.status !== "worker")
            {
                await context.send("‚ö† –ì–æ—Ä–æ–¥ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø–æ–¥ –æ—Å–∞–¥–æ–π")
                return
            }
            if(Data.countries[context.player.countryID].isSiege && context.player.status !== "worker")
            {
                await context.send("‚ö† –í —Ñ—Ä–∞–∫—Ü–∏–∏ –≤–≤–µ–¥–µ–Ω–æ –≤–æ–µ–Ω–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ, –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –º–µ–∂–¥—É –≥–æ—Ä–æ–¥–∞–º–∏ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ")
                return
            }
            if(city.isSiege && context.player.status !== "worker")
            {
                await context.send("‚Ñπ –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≥–æ—Ä–æ–¥, –≤ –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –æ—Å–∞–¥–µ, –≤—ä–µ–∑–¥ –≤ –Ω–µ–≥–æ –Ω–µ –≤–æ–∑–º–æ–∂–µ–Ω")
                return
            }
            if(context.player.status === "worker")
            {
                await context.send("üèô –í—ã –ø—Ä–∏—à–ª–∏ –≤ –≥–æ—Ä–æ–¥ " + city.name)
                context.player.location = city.id
                context.player.countryID = city.countryID
                await PlayerStatus.update(
                    {location: city.id, countryID: city.countryID},
                    {where: {id: context.player.id}}
                )
            }
            else
            {
                time.setMinutes(time.getMinutes() + parseInt(road.dataValues.time))
                context.player.lastActionTime = time
                context.player.state = context.scenes.WaitingWalkMenu
                await context.send("‚Ñπ –í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏—Å—å –≤ –≥–æ—Ä–æ–¥ " + city.name)
                Data.timeouts["user_timeout_walk_" + context.player.id] = {
                    type: "user_timeout",
                    subtype: "walk",
                    userId: context.player.id,
                    cityID: city.id,
                    time: time,
                    timeout: setTimeout(async () => {
                        await api.SendMessageWithKeyboard(context.player.id, "üèô –í—ã –ø—Ä–∏—à–ª–∏ –≤ –≥–æ—Ä–æ–¥ " + city.name + "\n" + city.description, context.scenes.GetStartMenuKeyboard(context))
                        context.player.state = context.scenes.StartScreen
                        context.player.location = city.id
                        context.player.countryID = city.countryID
                        await PlayerStatus.update(
                            {location: city.id, countryID: city.countryID},
                            {where: {id: context.player.id}}
                        )
                        if(city.notifications)
                        {
                            await api.SendMessage(city.leaderID, `‚Ñπ –ò–≥—Ä–æ–∫ ${context.player.GetName()} –∑–∞—à–µ–ª –≤ –≥–æ—Ä–æ–¥ ${city.name}`)
                        }
                        let stayTime = new Date()
                        stayTime.setMinutes(stayTime.getMinutes() + 30)
                        context.player.stayInCityTime = stayTime
                        delete Data.timeouts["user_timeout_walk_" + context.player.id]
                    }, road.dataValues.time * 60000)
                }
            }
        }
        catch (e)
        {
            await api.SendLogs(context, "ChatController/ToOtherCountry", e)
        }
    }

    async ToOtherCountry(context, id)
    {
        try
        {
            let time = new Date()
            if(context.player.stayInCityTime - time > 0)
            {
                await context.send(`‚ö† –í—ã —Å–∏–ª—å–Ω–æ —É—Å—Ç–∞–ª–∏ –ø–æ—Å–ª–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –¥–æ—Ä–æ–≥–∏, –æ—Ç–¥–æ—Ö–Ω–∏—Ç–µ –∏ –º–æ–∂–Ω–æ –æ–ø—è—Ç—å –≤ –ø—É—Ç—å.\n\n–î–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–∏–ª ${NameLibrary.ParseFutureTime(context.player.stayInCityTime)}`)
                return
            }
            const road = await CountryRoads.findOne({where: {fromID: context.player.countryID, toID: id}})
            if(!road)
            {
                await context.send("‚ö† –í–∞–º –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞ —ç—Ç–∞ –¥–æ—Ä–æ–≥–∞")
                return
            }
            const country = Data.countries[id]
            if(!context.player.CanPay({money: -country.entranceFee}))
            {
                await context.send("‚ö† –£ –≤–∞—Å –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –º–æ–Ω–µ—Ç –¥–ª—è –æ–ø–ª–∞—Ç—ã –≤—Ö–æ–¥–Ω–æ–π –ø–æ—à–ª–∏–Ω—ã")
                return
            }
            if(Data.cities[context.player.location].isSiege)
            {
                await context.send("‚ö† –ì–æ—Ä–æ–¥ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø–æ–¥ –æ—Å–∞–¥–æ–π, –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ –µ–≥–æ –ø–æ–∫–∏–Ω—É—Ç—å")
                return
            }
            if(Data.countries[context.player.countryID].isSiege)
            {
                await context.send("‚ö† –í —Ñ—Ä–∞–∫—Ü–∏–∏ –≤–≤–µ–¥–µ–Ω–æ –≤–æ–µ–Ω–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ, –≤—ã–µ–∑–¥ –∑–∞–ø—Ä–µ—â–µ–Ω")
                return
            }
            if(Data.countries[id].isSiege)
            {
                await context.send("‚ö† –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —Ñ—Ä–∞–∫—Ü–∏—è, –≤ –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø–æ–¥ –±–ª–æ–∫–∞–¥–æ–π, –≤—ä–µ–∑–¥ –≤ –Ω–µ–µ –Ω–µ –≤–æ–∑–º–æ–∂–µ–Ω")
                return
            }
            if(context.player.status === "worker")
            {
                await context.send("üèô –í—ã –ø—Ä–∏—à–ª–∏ –≤ –≥–æ—Ä–æ–¥ " + Data.GetCityName(country.capitalID))
                context.player.location = country.capitalID
                context.player.countryID = country.id
                await PlayerStatus.update(
                    {location: country.capitalID, countryID: country.id},
                    {where: {id: context.player.id}}
                )
            }
            else
            {
                time.setMinutes(time.getMinutes() + road.dataValues.time)
                context.player.state = context.scenes.WaitingWalkMenu
                await context.send("‚Ñπ –í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏—Å—å –≤ —Ñ—Ä–∞–∫—Ü–∏—é " + country.GetName(context.player.platform === "IOS"))
                context.player.lastActionTime = time
                Data.timeouts["user_timeout_walk_" + context.player.id] = {
                    type: "user_timeout",
                    subtype: "walk",
                    userId: context.player.id,
                    cityID: Data.countries[country.id].capitalID,
                    time: time,
                    timeout: setTimeout(async () => {
                        await api.SendMessageWithKeyboard(context.player.id, "üèô –í—ã –ø—Ä–∏—à–ª–∏ –≤ –≥–æ—Ä–æ–¥ " + Data.GetCityName(country.capitalID), context.scenes.GetStartMenuKeyboard(context))
                        context.player.location = country.capitalID
                        context.player.countryID = country.id
                        if (country.entranceFee !== 0)
                        {
                            await Data.AddPlayerResources(context.player.id, {money: -country.entranceFee})
                            await Data.AddCountryResources(country.id, {money: country.entranceFee})
                        }
                        await PlayerStatus.update(
                            {location: country.capitalID, countryID: country.id},
                            {where: {id: context.player.id}}
                        )
                        if(country.notifications)
                        {
                            await api.SendMessage(country.leaderID, `‚Ñπ –ò–≥—Ä–æ–∫ ${context.player.GetName()} –∑–∞—à–µ–ª –≤ –≤–∞—à—É —Ñ—Ä–∞–∫—Ü–∏—é ${country.GetName(false)}`)
                        }
                        if(Data.cities[country.capitalID].notifications)
                        {
                            await api.SendMessage(Data.cities[country.capitalID].leaderID, `‚Ñπ –ò–≥—Ä–æ–∫ ${context.player.GetName()} –∑–∞—à–µ–ª –≤ –≥–æ—Ä–æ–¥ ${Data.cities[country.capitalID].name}`)
                        }
                        let stayTime = new Date()
                        stayTime.setMinutes(stayTime.getMinutes() + 30)
                        context.player.stayInCityTime = stayTime
                        context.player.state = context.scenes.StartScreen
                        delete Data.timeouts["user_timeout_walk_" + context.player.id]
                    }, road.time * 60000)
                }
            }
        }
        catch (e)
        {
            await api.SendLogs(context, "ChatController/ToOtherCountry", e)
        }
    }


    async RoadMap(context)
    {
        try
        {
            const renderKbString = (array, button) => {
                let kb = []
                const strings = []
                for (let i = 0; i < Math.ceil(array.length / 2); i++)
                {
                    strings.push(array.slice((i * 4), (i * 4) + 4))
                }
                for(let i = 0; i < strings.length; i++)
                {
                    kb[i] = []
                    for(const btn of strings[i])
                    {
                        kb[i].push(button({name: btn[0], type: btn[2], action: btn[1]}))
                    }
                }
                return kb
            }
            let request = `üó∫ –ö–∞—Ä—Ç–∞ –¥–æ—Ä–æ–≥\n\n*id${context.player.id}(–í—ã) –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ ${Data.cities[context.player.location].isCapital ? "—Å—Ç–æ–ª–∏—Ü–µ" : ""} —Ñ—Ä–∞–∫—Ü–∏–∏ ${Data.countries[Data.cities[context.player.location].countryID].GetName(context.player.platform === "IOS")}, –≤ –≥–æ—Ä–æ–¥–µ ${Data.cities[context.player.location].name}\n`
            let kb = []
            let countryKB = []
            let cityKB = []
            const countryRoads = await CountryRoads.findAll({where: {fromID: context.player.countryID, isBlocked: false}, limit: 8, attributes: ["toID", "time"]})
            if(countryRoads.length !== 0) request += "\nüîµ –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è –≤ —Ñ—Ä–∞–∫—Ü–∏–∏:\n"
            for(const key of countryRoads)
            {
                countryKB.push([Data.countries[key.dataValues.toID].name, "ID" + key.dataValues.toID, "to_other_country"])
                request += `üî∏ ${Data.countries[key.dataValues.toID].GetName(context.player.platform === "IOS")} - ${key.dataValues.time} –º–∏–Ω, –≤—ä–µ–∑–¥–Ω–∞—è –ø–æ—à–ª–∏–Ω–∞ - ${Data.countries[key.dataValues.toID].entranceFee} –º–æ–Ω–µ—Ç\n`
            }
            const cityRoads = await CityRoads.findAll({where: {fromID: context.player.location, isBlocked: false}, limit: 8, attributes: ["toID", "time"]})
            if(cityRoads.length !== 0) request += "\n‚ö™ –í—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–µ—Ç–∏—Ç—å –≥–æ—Ä–æ–¥–∞:\n"
            for(const key of cityRoads)
            {
                cityKB.push([Data.cities[key.dataValues.toID].name, "ID" + key.dataValues.toID, "to_other_city"])
                request += `üî∏ ${Data.cities[key.dataValues.toID].name} - ${key.dataValues.time} –º–∏–Ω\n`
            }
            kb = kb.concat(renderKbString(countryKB, keyboard.lightButton))
            kb = kb.concat(renderKbString(cityKB, keyboard.greyButton))
            let msg = await context.send(request, {attachment: Data.variables.roadMap, keyboard: keyboard.build(kb).inline()})
            if(context.chat?.clean)
            {
                setTimeout(async () => {
                    try {
                        await api.api.messages.delete({
                            conversation_message_ids: context.conversationMessageId,
                            delete_for_all: 1,
                            peer_id: context.peerId
                        })
                    } catch (e) {
                    }
                    try {
                        await api.api.messages.delete({
                            conversation_message_ids: msg.conversationMessageId,
                            delete_for_all: 1,
                            peer_id: msg.peerId
                        })
                    } catch (e) {
                    }
                }, 60000)
            }
        }
        catch (e)
        {
            await api.SendLogs(context, "ChatController/RoadMap", e)
        }
    }

    async ShowCountriesInfo(context)
    {
        try
        {
            const getLeaders = (countryID) =>
            {
                let request = ""
                if(Data.officials[countryID])
                {
                    for(const id of Object.keys(Data.officials[countryID]))
                    {
                        if(Data.officials[countryID][id].canAppointMayors)
                        {
                            request += `\n*id${id}(${Data.officials[countryID][id].nick})`
                        }
                    }
                }
                return request
            }
            let request = "üî∞ –ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–∞, –Ω–∞—Å–µ–ª—è—é—â–∏–µ –Ω–∞—à –º–∏—Ä:\n\n"
            let user = undefined
            let population = 0
            let countries = []
            for(const country of Data.countries)
            {
                if(country)
                {
                    population = await PlayerStatus.count({where: {citizenship: country.id}})
                    countries.push([country, population])
                }
            }
            for (let j = countries.length - 1; j > 0; j--)
            {
                for (let i = 0; i < j; i++)
                {
                    if (countries[i][1] < countries[i + 1][1])
                    {
                        let temp = countries[i];
                        countries[i] = countries[i + 1];
                        countries[i + 1] = temp;
                    }
                }
            }
            for(const country of countries)
            {
                user = undefined
                if(country)
                {
                    user = await Player.findOne({where: {id: country[0].leaderID}, attributes: ["nick"]})
                    request += `${country[0].GetName(context.player.platform === "IOS")}\n`
                    request += `üë• –ù–∞—Å–µ–ª–µ–Ω–∏–µ - ${country[1]} —á–µ–ª.\n`
                    request += `üèÜ –°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å - ${country[0].stability}\n`
                    request += `üåÜ –°—Ç–æ–ª–∏—Ü–∞ - ${Data.cities[country[0].capitalID].name}\n`
                    request += `üëë –ü—Ä–∞–≤–∏—Ç–µ–ª${country[0].isParliament ? "–∏:\n" : "—å - "}${country[0].isParliament ? ((user ? `@id${country[0].leaderID}(${user.dataValues.nick})` : "") + getLeaders(country[0].id)) : (user ? `@id${country[0].leaderID}(${user.dataValues.nick})` : "–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω")}\n\n`
                }
            }
            await context.send(request, {disable_mentions: true})
        }
        catch (e)
        {
            await api.SendLogs(context, "ChatController/RoadMap", e)
        }
    }

    async ShowEvents(context)
    {
        try
        {
            let request = "‚è≥ –°–µ–π—á–∞—Å " + NameLibrary.GetGameSeason() + "\n\n"
            let messages = await sequelize.query(`SELECT "name", "description", "date" FROM "events" ORDER BY id DESC LIMIT 5`)
            messages = messages[0]
            if(messages.length > 0)
            {
                for (let i = messages.length - 1; i >= 0; i--)
                {
                    request += `üì∞ ${messages[i].name}\nüïë ${NameLibrary.GetGameTime(messages[i].date)}\n\n${messages[i].description}\n\n\n`
                }
            }
            else
            {
                request += "ü§® –ù–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ"
            }
            for(let i = 0; i < Math.ceil(request.length/3900); i++)
            {
                await context.send(request.slice((i * 3900), (i * 3900) + 3900), {disable_mentions: true})
            }
        }
        catch (e)
        {
            await api.SendLogs(context, "ChatController/RoadMap", e)
        }
    }

    async ShowCountriesActive(context)
    {
        try
        {
            if(context.command.match(/–Ω–µ–¥–µ–ª—è/))
            {
                let {request} = await OutputManager.GetWeekActiveMessage({command: context.command, app: "VK", platform: context.player.platform})
                await context.send(request)
            }
            else
            {
                let {request} = await OutputManager.GetDayActiveMessage({command: context.command, app: "VK", platform: context.player.platform})
                await context.send(request)
            }
        }
        catch (e)
        {
            await api.SendLogs(context, "ChatController/RoadMap", e)
        }
    }

    async ShowCountryChats(context)
    {
        try
        {
            if(NameLibrary.RoleEstimator(context.player.role) < 4)
            {
                return
            }
            let country = null
            let temp = null
            for(const key of Data.countries)
            {
                if(key?.tags)
                {
                    temp = new RegExp(key.tags)
                    if(context.command.match(temp))
                    {
                        country = key
                        break
                    }
                }
            }
            if(!country)
            {
                await context.send("‚ö† –§—Ä–∞–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return
            }
            temp = country.chatID ? country.chatID.split("|") : []
            if(temp.length !== 0)
            {
                let request = `‚úÖ –ß–∞—Ç—ã —Ñ—Ä–∞–∫—Ü–∏–∏ ${country.GetName(context.player.platform === "IOS")}:\n\n`
                for(const chat of temp)
                {
                    request += chat + (parseInt(chat) === context.peerId ? " (–º—ã —Å–µ–π—á–∞—Å –∑–¥–µ—Å—å)" : "") + "\n"
                }
                await context.send(request)
            }
            else
            {
                await context.send(`‚ö† –£ —Ñ—Ä–∞–∫—Ü–∏–∏ ${country.GetName(context.player.platform === "IOS")} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —á–∞—Ç–æ–≤`)
            }
        }
        catch (e)
        {
            await api.SendLogs(context, "ChatController/AddCountryChat", e)
        }
    }

    async RemoveCountryChat(context)
    {
        try
        {
            if(NameLibrary.RoleEstimator(context.player.role) < 4)
            {
                return
            }
            let country = null
            let temp = null
            context.command = context.command.replace(/–¥–æ–±–∞–≤–∏—Ç—å —á–∞—Ç /, "")
            for(let i = 0; i < Data.countries.length; i++)
            {
                if(Data.countries[i])
                {
                    if(Data.countries[i].chatID)
                    {
                        temp = Data.countries[i].chatID.split("|")
                        for(const chat of temp)
                        {
                            if(parseInt(chat) === context.peerId)
                            {
                                country = Data.countries[i]
                            }
                        }
                    }
                }
            }
            if(!country)
            {
                await context.send("‚ö† –≠—Ç–æ—Ç —á–∞—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∞—Ç–æ–º —Ñ—Ä–∞–∫—Ü–∏–∏")
                return
            }
            temp = country.chatID ? country.chatID.split("|") : []
            temp = temp.filter(chat => {return parseInt(chat) !== context.peerId})
            country.chatID = (temp.length === 0 ? null : temp.join("|"))
            await Country.update({chatID: country.chatID}, {where: {id: country.id}})
            await Data.ReloadChats()
            await context.send(`‚úÖ –ß–∞—Ç ${context.peerId} –±–æ–ª—å—à–µ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —Ñ—Ä–∞–∫—Ü–∏–∏ ${country.GetName(context.player.platform === "IOS")}`)
        }
        catch (e)
        {
            await api.SendLogs(context, "ChatController/AddCountryChat", e)
        }
    }

    async AddCountryChat(context)
    {
        try
        {
            if(NameLibrary.RoleEstimator(context.player.role) < 4)
            {
                return
            }
            let country = null
            let temp = null
            context.command = context.command.replace(/–¥–æ–±–∞–≤–∏—Ç—å —á–∞—Ç /, "")
            for(let i = 0; i < Data.countries.length; i++)
            {
                if(Data.countries[i])
                {
                    if(Data.countries[i].chatID)
                    {
                        temp = Data.countries[i].chatID.split("|")
                        for(const chat of temp)
                        {
                            if(parseInt(chat) === context.peerId)
                            {
                                await context.send(`‚ö† –≠—Ç–æ—Ç —á–∞—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ñ—Ä–∞–∫—Ü–∏–µ–π ${Data.countries[i].GetName(context.player.platform === "IOS")}`)
                                return
                            }
                        }
                    }
                }
            }
            for(const key of Data.countries)
            {
                if(key?.tags)
                {
                    temp = new RegExp(key.tags)
                    if(context.command.match(temp))
                    {
                        country = key
                        break
                    }
                }
            }
            if(!country)
            {
                await context.send("‚ö† –§—Ä–∞–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return
            }
            temp = country.chatID ? country.chatID.split("|") : []
            temp.push(context.peerId)
            country.chatID = temp.join("|")
            await Country.update({chatID: country.chatID}, {where: {id: country.id}})
            await Data.ReloadChats()
            await context.send(`‚úÖ –ß–∞—Ç ${context.peerId} —Ç–µ–ø–µ—Ä—å –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —Ñ—Ä–∞–∫—Ü–∏–∏ ${country.GetName(context.player.platform === "IOS")}`)
        }
        catch (e)
        {
            await api.SendLogs(context, "ChatController/AddCountryChat", e)
        }
    }

    async Reset(context)
    {
        try
        {
            if(NameLibrary.RoleEstimator(context.player.role) < 4)
            {
                return
            }
            let users = []
            let request = ""
            if(context.command.match(/—Ñ—Ä–∞–∫—Ü–∏–∏|–≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–∞/))
            {
                await Data.ResetCountries()
                request += "‚ôª –ö–µ—à —Ñ—Ä–∞–∫—Ü–∏–π –æ—á–∏—â–µ–Ω\n\n"
            }
            if(context.command.match(/–≥–æ—Ä–æ–¥/))
            {
                await Data.ResetCities()
                request += "‚ôª –ö–µ—à –≥–æ—Ä–æ–¥–æ–≤ –æ—á–∏—â–µ–Ω\n\n"
            }
            if(context.command.match(/–∑–¥–∞–Ω–∏—è|–ø–æ—Å—Ç—Ä–æ–π–∫–∏|—Å—Ç—Ä–æ–µ–Ω–∏—è/))
            {
                await Data.ResetBuildings()
                request += "‚ôª –ö–µ—à –ø–æ—Å—Ç—Ä–æ–µ–∫ –æ—á–∏—â–µ–Ω\n\n"
            }
            if(context.command.match(/—á–∞—Ç/) && context.peerType === "chat")
            {
                await VKChats.destroy({where: {id: context.chat.id}})
                delete Data.VKChats[context.chat.id]
                request += "‚ôª –ö–µ—à —á–∞—Ç–∞ –æ—á–∏—â–µ–Ω\n\n"
            }
            if(context.replyPlayers.length !== 0)
            {
                users = context.replyPlayers
            }
            else if (request.length === 0)
            {
                users = [context.player.id]
            }
            if(users.length > 0)
            {
                request += "\n‚ôª –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ–± –∏–≥—Ä–æ–∫–∞—Ö:\n"
                for(const user of users)
                {
                    if(Data.users[user])
                    {
                        if(Data.timeouts["user_timeout_sleep_" + user])
                        {
                            clearTimeout(Data.timeouts["user_timeout_sleep_" + user].timeout)
                            delete Data.timeouts["user_timeout_sleep_" + user]
                        }
                        delete Data.users[user]
                        if(Data.samples[user]) delete Data.samples[user]
                        if(Data.requests[user]) delete Data.requests[user]
                        if(Data.censorship[user])
                        {
                            clearTimeout(Data.censorship[context.replyPlayers[0]].timeout)
                            delete Data.censorship[context.replyPlayers[0]]
                        }
                        if(Data.mute[user])
                        {
                            clearTimeout(Data.mute[context.replyPlayers[0]].timeout)
                            delete Data.mute[context.replyPlayers[0]]
                        }
                        if(Data.voiceMute[user])
                        {
                            clearTimeout(Data.voiceMute[context.replyPlayers[0]].timeout)
                            delete Data.voiceMute[context.replyPlayers[0]]
                        }
                        if(Data.activeIgnore[user])
                        {
                            clearTimeout(Data.activeIgnore[context.replyPlayers[0]].timeout)
                            delete Data.activeIgnore[context.replyPlayers[0]]
                        }
                        if(Data.ignore[user])
                        {
                            clearTimeout(Data.ignore[context.replyPlayers[0]].timeout)
                            delete Data.ignore[context.replyPlayers[0]]
                        }
                        request += `*id${user}(${user}) - —É–¥–∞–ª–µ–Ω –∏–∑ –∫—ç—à–∞ ‚úÖ\n`
                    }
                    else
                    {
                        request += `*id${user}(${user}) - –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –∫—ç—à–µ ‚ö†\n`
                    }
                }
            }
            await context.send(request)
        }
        catch (e)
        {
            await api.SendLogs(context, "ChatController/Reset", e)
        }
    }

    async Reload(context)
    {
        try
        {
            if(NameLibrary.RoleEstimator(context.player.role) < 4)
            {
                return
            }
            let request = ""
            if(context.command.match(/—Ñ—Ä–∞–∫—Ü–∏–∏|–≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–∞/))
            {
                await Data.LoadCountries()
                request += "‚ôª –§—Ä–∞–∫—Ü–∏–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω—ã\n\n"
            }
            if(context.command.match(/–≥–æ—Ä–æ–¥/))
            {
                await Data.LoadCities()
                request += "‚ôª –ì–æ—Ä–æ–¥–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω—ã\n\n"
            }
            if(context.command.match(/–∑–¥–∞–Ω–∏—è|–ø–æ—Å—Ç—Ä–æ–π–∫–∏|—Å—Ç—Ä–æ–µ–Ω–∏—è/))
            {
                await Data.LoadBuildings()
                request += "‚ôª –ü–æ—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω—ã\n\n"
            }
            if(context.command.match(/—á–∞—Ç/))
            {
                await Data.LoadVKChats()
                request += "‚ôª –ß–∞—Ç—ã –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω—ã\n\n"
            }
            if(context.command.match(/—á–∏–Ω–æ–≤–Ω–∏–∫/))
            {
                await Data.LoadOfficials()
                request += "‚ôª –ß–∏–Ω–æ–≤–Ω–∏–∫–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω—ã\n\n"
            }
            if(request.length !== 0)
            {
                await context.send(request)
            }
        }
        catch (e)
        {
            await api.SendLogs(context, "ChatController/Reset", e)
        }
    }

    async Work(context)
    {
        try
        {
            const country = Data.countries[context.player.countryID]
            const kb = []
            country.resources.match(/wood/) && kb.push([keyboard.greenButton({name: "üå≥ –õ–µ—Å ü™ì", type: "extract", action: "wood"})])
            country.resources.match(/wheat/) && kb.push([keyboard.greyButton({name: "üåæ –°–æ–±—Ä–∞—Ç—å –∑–µ—Ä–Ω–æ üåæ", type: "extract", action: "wheat"})])
            country.resources.match(/stone/) && kb.push([keyboard.greyButton({name: "ü™® –ö–æ–ø–∞—Ç—å –∫–∞–º–µ–Ω—å ‚õè", type: "extract", action: "stone"})])
            country.resources.match(/iron/) && kb.push([keyboard.lightButton({name: "üåë –î–æ–±—ã—Ç—å –∂–µ–ª–µ–∑–æ ‚õè", type: "extract", action: "iron"})])
            country.resources.match(/copper/) && kb.push([keyboard.lightButton({name: "ü•â –î–æ–±—ã—Ç—å –±—Ä–æ–Ω–∑—ã ‚õè", type: "extract", action: "copper"})])
            country.resources.match(/silver/) && kb.push([keyboard.lightButton({name: "ü•à –î–æ–±—ã—Ç—å —Å–µ—Ä–µ–±—Ä–∞ ‚õè", type: "extract", action: "silver"})])
            let msg = await context.send(`üöß –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π, *id${context.player.id}(–ø—É—Ç–Ω–∏–∫). –í–∏–∂—É, —Ä–∞–±–æ—Ç–∞—Ç—å —Ö–æ—á–µ—à—å? –ß—Ç–æ-–∂, –µ—Å—Ç—å –¥–ª—è —Ç–µ–±—è –ø–∞—Ä—É –∑–∞–Ω—è—Ç–∏–π...`, {keyboard: keyboard.build(kb).inline()})
            if(context.chat?.clean)
            {
                setTimeout(async () => {
                    try {
                        await api.api.messages.delete({
                            conversation_message_ids: context.conversationMessageId,
                            delete_for_all: 1,
                            peer_id: context.peerId
                        })
                    } catch (e) {
                    }
                    try {
                        await api.api.messages.delete({
                            conversation_message_ids: msg.conversationMessageId,
                            delete_for_all: 1,
                            peer_id: msg.peerId
                        })
                    } catch (e) {
                    }
                }, 60000)
            }
        }
        catch (e)
        {
            await api.SendLogs(context, "ChatController/Relax", e)
        }
    }

    async Relax(context)
    {
        try
        {
            if(context.player.fatigue === 100)
            {
                await context.send("üí™ –í—ã –ø–æ–ª–Ω—ã —Å–∏–ª")
                return
            }
            let result = await CrossStates.Relaxing(context)
            let msg = null
            if(result.sleep)
            {
                msg = await context.send(`üí§ –í—ã –ø–µ—Ä–µ—à–ª–∏ –≤ —Ä–µ–∂–∏–º –æ—Ç–¥—ã—Ö–∞, –¥–æ –ø–æ–ª–Ω–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–∏–ª ${NameLibrary.ParseFutureTime(result.time)}`)
            }
            else
            {
                msg = await context.send(`üí™ –í–∞—à —É—Ä–æ–≤–µ–Ω—å —ç–Ω–µ—Ä–≥–∏–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–æ ${result.fatigue}%`)
            }
            if(context.chat?.clean)
            {
                setTimeout(async () => {
                    try {
                        await api.api.messages.delete({
                            conversation_message_ids: context.conversationMessageId,
                            delete_for_all: 1,
                            peer_id: context.peerId
                        })
                    } catch (e) {
                    }
                    try {
                        await api.api.messages.delete({
                            conversation_message_ids: msg.conversationMessageId,
                            delete_for_all: 1,
                            peer_id: msg.peerId
                        })
                    } catch (e) {
                    }
                }, 60000)
            }
        }
        catch (e)
        {
            await api.SendLogs(context, "ChatController/Relax", e)
        }
    }

    async SendResource(context)
    {
        try
        {
            if(context.player.CantTransact())
            {
                await context.send("‚ö† –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –¥–µ–ª–∞—Ç—å –ø–µ—Ä–µ–≤–æ–¥—ã, –ø—Ä–∏—á–∏–Ω–∞:\n\n" + context.player.WhyCantTransact())
                return
            }
            const getTax = async (toUserID) => {
                const user = await PlayerStatus.findOne({where: {id: toUserID}})
                if(user.dataValues.countryID === context.player.countryID && context.player.citizenship && user.dataValues.citizenship) return {outTax: 0, inTax: 0}
                let outTax = context.player.countryID === context.player.citizenship ? Data.countries[context.player.countryID].citizenTax : Data.countries[context.player.countryID].nonCitizenTax
                let inTax = user.dataValues.countryID === user.dataValues.citizenship ? Data.countries[user.dataValues.countryID].citizenTax : Data.countries[user.dataValues.countryID].nonCitizenTax
                if(context.player.countryID === context.player.citizenship)
                {
                    let countryTax = await CountryTaxes.findOne({where: {countryID: user.dataValues.countryID, toCountryID: context.player.countryID}})
                    inTax = countryTax ? countryTax.dataValues.tax : Data.countries[user.dataValues.countryID].nonCitizenTax
                }
                return {outTax: outTax, inTax: inTax}
            }
            let country = false
            let city = false
            let user
            let resource = null
            let sends = context.command.split(",")
            let objOUT = {}
            let objIN = {}
            let count
            let request = ""
            let esterEgg = {}
            if(context.command.match(/–±—é–¥–∂–µ—Ç|–≥–æ—Å—É–¥|—Ñ—Ä–∞–∫—Ü/))
            {
                country = true
            }
            if(context.command.match(/–≥–æ—Ä–æ–¥/))
            {
                country = false
                city = true
            }
            if(country && Data.countries[context.player.countryID].capitalID !== context.player.location)
            {
                await context.send("‚ö† –ü–µ—Ä–µ–≤–æ–¥–∏—Ç—å —Ä–µ—Å—É—Ä—Å—ã –≤ –±—é–¥–∂–µ—Ç —Ñ—Ä–∞–∫—Ü–∏–∏ –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –∏–∑ —Å—Ç–æ–ª–∏—Ü—ã")
                return
            }
            if(!country && !city && context.replyPlayers?.length === 0)
            {
                await context.send("‚ö† –í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä–æ–∫–∞")
                return
            }
            if(!country && !city)
            {
                user = await Player.findOne({where: {id: context.replyPlayers[0]}})
                if(!user)
                {
                    await context.send("‚ö† –ò–≥—Ä–æ–∫ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
                    return
                }
            }
            if(context.replyPlayers[0] === context.player.id)
            {
                await context.send("‚ùì –ö–∞–∫–æ–π —Å–º—ã—Å–ª –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å —Ä–µ—Å—É—Ä—Å—ã —Å–∞–º–æ–º—É —Å–µ–±–µ? –í–æ—Ç –ø—Ä–æ—Å—Ç–æ –∑–∞—á–µ–º? –ß—Ç–æ–±—ã —á—Ç–æ?")
                return
            }
            for(let send of sends)
            {
                resource = null
                if(send.match(Commands.money)) resource = "money"
                if(send.match(Commands.wheat)) resource = "wheat"
                if(send.match(Commands.stone)) resource = "stone"
                if(send.match(Commands.wood)) resource = "wood"
                if(send.match(Commands.iron)) resource = "iron"
                if(send.match(Commands.copper)) resource = "copper"
                if(send.match(Commands.silver)) resource = "silver"
                if(send.match(Commands.diamond)) resource = "diamond"
                if(send.match(Commands.carrot)) resource = "carrot"
                if(send.match(Commands.tea)) resource = "tea"
                if(send.match(Commands.beer)) resource = "beer"
                if(send.match(Commands.ale)) resource = "ale"
                if(send.match(Commands.elephant)) resource = "elephant"
                if(send.match(Commands.dick)) resource = "dick"
                if(send.match(Commands.mushroom)) resource = "mushroom"
                if(send.match(Commands.vine))
                {
                    resource = "vine"
                    if(send.match(/—Ñ–∞–ª–µ—Ä–Ω/))
                    {
                        resource = "florence vine"
                    }
                    else if(send.match(/—Å–∏—Ü–∏–ª/))
                    {
                        resource = "sicilian vine"
                    }
                }
                if(!resource) continue
                count = send.match(/\d+/)
                count = parseInt( count ? count[0] : send)
                if(isNaN(count))
                {
                    count = 1
                }
                if(resource.match(/money|wheat|stone|wood|iron|copper|silver|diamond/))
                {
                    if(send.match(/–≤—Å–µ|–≤—Å—ë|–≤—Å—é|–≤—Å–µ—Ö|–≤–µ—Å—å/) || context.player[resource] < count)
                    {
                        count = context.player[resource]
                    }
                    if(count === 0) continue
                    objOUT[resource] = objOUT[resource] ? objOUT[resource] + Math.abs(count) : Math.abs(count)
                }
                else
                {
                    esterEgg[resource] = count
                }
            }
            if(Object.keys(esterEgg).length !== 0 && !country && !city)
            {
                for(const res of Object.keys(esterEgg))
                {
                    if(res === "carrot")
                    {
                        if(!NameLibrary.GetChance((1 / esterEgg[res]) * 100))
                        {
                            request += "\n–£ –≤–∞—Å —Å–ª–∏—à–∫–æ–º –º–∞–ª–æ –º–æ—Ä–∫–æ–≤–∫–∏!ü•ïü•ïü•ï"
                        }
                        else
                        {
                            request += "\nü•ï –ú–æ—Ä–∫–æ–≤–∫–∞ - ‚úÖ –ü–µ—Ä–µ–¥–∞–Ω–æ " + esterEgg[res]
                            await api.SendNotification(user.dataValues.id, `‚úÖ –ò–≥—Ä–æ–∫ ${context.player.GetName()} –ø–æ–¥–µ–ª–∏–ª—Å—è —Å –≤–∞–º–∏ –º–∞—Ä–∫–æ–≤–∫–æ–π, –Ω–æ –∏–∑ –∑–∞ —Ç–æ–≥–æ —á—Ç–æ —è –±—ã–ª –≥–æ–ª–æ–¥–Ω—ã–π - —è –µ–µ –Ω–µ –¥–æ–Ω–µ—Å\nüëâüëà`)
                        }
                    }
                    if(res === "tea")
                    {
                        request += "\nüçµ –ß–∞–π - ‚úÖ –ü–µ—Ä–µ–¥–∞–Ω–æ " + esterEgg[res]
                        await api.SendNotification(user.dataValues.id, `‚úÖ –ò–≥—Ä–æ–∫ ${context.player.GetName()} —É–≥–æ—Å—Ç–∏–ª –≤–∞—Å üçµ —á–∞–µ–º!`)
                    }
                    if(res === "beer")
                    {
                        request += "\nüç∫ –ü–∏–≤–æ - ‚úÖ –ü–µ—Ä–µ–¥–∞–Ω–æ " + esterEgg[res]
                        await api.SendNotification(user.dataValues.id, `‚úÖ –¢–∞–º —ç—Ç–æ, –∫–∞–∫ —Ç–∞–º –µ–≥–æ, –∏–≥—Ä–æ–∫ ${context.player.GetName()} —Å –≤–∞–º–∏ üç∫ –ø–∏–≤–æ–º –ø–æ–¥–µ–ª–∏–ª—Å—è.\n\nü•¥ü•¥ü•¥ –í–∫—É—Å–Ω–æ–µ –ø–∏–≤–æ –±—ã–ª–æ, –∞ —á—ë —è –ø—Ä–∏—à–µ–ª?\n\nü•¥ü•¥ü•¥–ù–µ –ø–æ–º–Ω—é —É–∂–µ`)
                    }
                    if(res === "ale")
                    {
                        request += "\nü•É –≠–ª—å - ‚úÖ –ü–µ—Ä–µ–¥–∞–Ω–æ " + esterEgg[res]
                        await api.SendNotification(user.dataValues.id, `‚úÖ –ò–≥—Ä–æ–∫ ${context.player.GetName()} —É–≥–æ—Å—Ç–∏–ª –≤–∞—Å ü•É —ç–ª–µ–º, –Ω–æ –ø–æ–≥—Ä–∞–Ω–∏—á–Ω–∏–∫–∏ –æ—Ç–æ–±—Ä–∞–ª–∏ –µ–≥–æ —É –º–µ–Ω—è!`)
                    }
                    if(res === "mushroom")
                    {
                        request += "\nüçÑ –ú—É—Ö–æ–º–æ—Ä—ã - ‚úÖ –ü–µ—Ä–µ–¥–∞–Ω–æ " + esterEgg[res]
                        await api.SendNotification(user.dataValues.id, `‚úÖ –ò–≥—Ä–æ–∫ ${context.player.GetName()} ü§¢ –ø–æ–¥–µ–ª–∏–ª—Å—è —Å –≤–∞–º–∏ üçÑ –º—É—Ö–æ–º–æ—Ä–∞–º–∏ ü§¢, –∞ —è –∏—Ö ü§¢ü§¢ —Å—ä–µ–ª. ü§Æü§Æü§Æ\n–û, –º—É–ª—å—Ç–∏–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç!`)
                    }
                    if(res === "elephant")
                    {
                        request += "\nüêò –°–ª–æ–Ω - ‚úÖ –ü–µ—Ä–µ–¥–∞–Ω–æ " + esterEgg[res]
                        await api.SendNotification(user.dataValues.id, `‚úÖ –ò–≥—Ä–æ–∫ ${context.player.GetName()} –æ—Ç–¥–∞–ª –≤–∞–º üêò —Å–ª–æ–Ω–∞, –∞ –æ–Ω —É—à–µ–ª! –°–∞–º.`)
                    }
                    if(res === "vine")
                    {
                        request += "\nüçæ –í–∏–Ω–æ - ‚úÖ –ü–µ—Ä–µ–¥–∞–Ω–æ " + esterEgg[res]
                        await api.SendNotification(user.dataValues.id, `‚úÖ –ò–≥—Ä–æ–∫ ${context.player.GetName()} –ø–æ–¥–µ–ª–∏–ª—Å—è —Å –≤–∞–º–∏ –≤–∏–Ω–æ–º.`)
                    }
                    if(res === "florence vine")
                    {
                        request += "\nüç∑ –§–∞–ª–µ—Ä–Ω—Å–∫–æ–µ –≤–∏–Ω–æ - ‚úÖ –ü–µ—Ä–µ–¥–∞–Ω–æ " + esterEgg[res]
                        await api.SendNotification(user.dataValues.id, `‚úÖ –ò–≥—Ä–æ–∫ ${context.player.GetName()} –ø–æ–¥–µ–ª–∏–ª—Å—è —Å –≤–∞–º–∏ –≤–∏–Ω–æ–º. –ü–æ—Ö–æ–∂–µ –Ω–∞ —Ñ–∞–ª–µ—Ä–Ω—Å–∫–æ–µ.`)
                    }
                    if(res === "sicilian vine")
                    {
                        request += "\nüç∑ –°–∏—Ü–∏–ª–∏–π—Å–∫–æ–µ –≤–∏–Ω–æ - ‚úÖ –ü–µ—Ä–µ–¥–∞–Ω–æ " + esterEgg[res]
                        await api.SendNotification(user.dataValues.id, `‚úÖ –ò–≥—Ä–æ–∫ ${context.player.GetName()} –ø–æ–¥–µ–ª–∏–ª—Å—è —Å –≤–∞–º–∏ –≤–∏–Ω–æ–º. –ù–∞ –≤–∫—É—Å - —Å–∏—Ü–∏–ª–∏–π—Å–∫–æ–µ.`)
                    }
                    if(res === "dick")
                    {
                        request += "\nüëÑ –ü–æ –≥—É–±–∞–º - ‚úÖ –ü—Ä–æ–≤–µ–¥–µ–Ω–æ üçå"
                        await api.SendNotification(user.dataValues.id, `‚úÖ –ò–≥—Ä–æ–∫ ${context.player.GetName()} –ø—Ä–æ–≤–µ–ª –≤–∞–º –ø–æ üëÑ –≥—É–±–∞–º üçå`)
                    }
                }
            }
            for(const res of Object.keys(objOUT))
            {
                if(Math.abs(objOUT[res]) !== 0)
                {
                    objOUT[res] = Math.abs(Math.min(objOUT[res], context.player[res]))
                    objIN[res] = -objOUT[res]
                    request += `${NameLibrary.GetResourceName(res)} - ‚úÖ –ü–µ—Ä–µ–¥–∞–Ω–æ ${objOUT[res]}\n`
                }
            }
            if(Object.keys(objOUT).length !== 0)
            {
                if(country)
                {
                    await Data.AddCountryResources(context.player.countryID, objOUT)
                    await Data.AddPlayerResources(context.player.id, objIN)
                    await api.SendNotification(Data.countries[context.player.countryID].leaderID, `‚úÖ –í –±—é–¥–∂–µ—Ç —Ñ—Ä–∞–∫—Ü–∏–∏ ${Data.countries[context.player.countryID].GetName()} –ø–æ—Å—Ç—É–ø–∏–ª –ø–µ—Ä–µ–≤–æ–¥ –æ—Ç –∏–≥—Ä–æ–∫–∞ ${context.player.GetName()} –≤ —Ä–∞–∑–º–µ—Ä–µ:\n${NameLibrary.GetPrice(objIN)}`)
                    await Transactions.create({
                        fromID: context.player.id,
                        toID: context.player.countryID,
                        type: "ptctr",
                        money: objOUT.money ? objOUT.money : null,
                        stone: objOUT.stone ? objOUT.stone : null,
                        wood: objOUT.wood ? objOUT.wood : null,
                        wheat: objOUT.wheat ? objOUT.wheat : null,
                        iron: objOUT.iron ? objOUT.iron : null,
                        copper: objOUT.copper ? objOUT.copper : null,
                        silver: objOUT.silver ? objOUT.silver : null,
                        diamond: objOUT.diamond ? objOUT.diamond : null
                    })
                }
                else if(city)
                {
                    await Data.AddCityResources(context.player.location, objOUT)
                    await Data.AddPlayerResources(context.player.id, objIN)
                    await api.SendNotification(Data.cities[context.player.location].leaderID, `‚úÖ –í –±—é–¥–∂–µ—Ç –≥–æ—Ä–æ–¥–∞ ${Data.cities[context.player.location].name} –ø–æ—Å—Ç—É–ø–∏–ª –ø–µ—Ä–µ–≤–æ–¥ –æ—Ç –∏–≥—Ä–æ–∫–∞ ${context.player.GetName()} –≤ —Ä–∞–∑–º–µ—Ä–µ:\n${NameLibrary.GetPrice(objIN)}`)
                    await Transactions.create({
                        fromID: context.player.id,
                        toID: context.player.location,
                        type: "ptct",
                        money: objOUT.money ? objOUT.money : null,
                        stone: objOUT.stone ? objOUT.stone : null,
                        wood: objOUT.wood ? objOUT.wood : null,
                        wheat: objOUT.wheat ? objOUT.wheat : null,
                        iron: objOUT.iron ? objOUT.iron : null,
                        copper: objOUT.copper ? objOUT.copper : null,
                        silver: objOUT.silver ? objOUT.silver : null,
                        diamond: objOUT.diamond ? objOUT.diamond : null
                    })
                }
                else
                {
                    const {outTax, inTax} = await getTax(user.dataValues.id)
                    if(outTax === 100 || inTax === 100 && !(NameLibrary.RoleEstimator(context.player.role) >= 2 || NameLibrary.RoleEstimator(user.dataValues.role)))
                    {
                        await context.send("‚ö† –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω 100% –Ω–∞–ª–æ–≥, –Ω–µ—Ç —Å–º—ã—Å–ª–∞ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å —Ä–µ—Å—É—Ä—Å—ã")
                        return
                    }
                    if(outTax === 0 || inTax === 0 || (NameLibrary.RoleEstimator(context.player.role) >= 2 || NameLibrary.RoleEstimator(user.dataValues.role)))
                    {
                        await Data.AddPlayerResources(user.dataValues.id, objOUT)
                        await Data.AddPlayerResources(context.player.id, objIN)
                        await api.SendNotification(user.dataValues.id, `‚úÖ –í–∞–º –ø–æ—Å—Ç—É–ø–∏–ª –ø–µ—Ä–µ–≤–æ–¥ –æ—Ç –∏–≥—Ä–æ–∫–∞ ${context.player.GetName()} –≤ —Ä–∞–∑–º–µ—Ä–µ:\n${NameLibrary.GetPrice(objIN)}`)
                        await Transactions.create({
                            fromID: context.player.id,
                            toID: user.dataValues.id,
                            type: "ptp",
                            money: objOUT.money ? objOUT.money : null,
                            stone: objOUT.stone ? objOUT.stone : null,
                            wood: objOUT.wood ? objOUT.wood : null,
                            wheat: objOUT.wheat ? objOUT.wheat : null,
                            iron: objOUT.iron ? objOUT.iron : null,
                            copper: objOUT.copper ? objOUT.copper : null,
                            silver: objOUT.silver ? objOUT.silver : null,
                            diamond: objOUT.diamond ? objOUT.diamond : null
                        })
                    }
                    else
                    {
                        let kb = [[], [], []]
                        let canRefund = false
                        const playerLocation = await PlayerStatus.findOne({where: {id: user.dataValues.id}, attributes: ["countryID"]})
                        let refundTax = NameLibrary.PriceTaxRefund(NameLibrary.PriceTaxRefund(objIN, outTax), inTax)
                        if(context.player.CanPay(refundTax))
                        {
                            kb[0].push(keyboard.positiveCallbackButton({label: "üí∏ –ü–æ–∫—Ä—ã—Ç—å", payload: {
                                command: "transaction_refund_tax",
                                transaction: {
                                    price: refundTax,
                                    tax: {
                                        in: inTax,
                                        out: outTax
                                    },
                                    countries: {
                                        in: context.player.countryID,
                                        out: playerLocation.dataValues.countryID
                                    },
                                    toUser: user.dataValues.id
                                }
                            }}))
                            canRefund = true
                        }
                        kb[0].push(keyboard.positiveCallbackButton({label: "üí∏ –û–ø–ª–∞—Ç–∏—Ç—å", payload: {
                            command: "transaction_tax",
                            transaction: {
                                price: objIN,
                                tax: {
                                    in: inTax,
                                    out: outTax
                                },
                                countries: {
                                    in: context.player.countryID,
                                    out: playerLocation.dataValues.countryID
                                },
                                toUser: user.dataValues.id
                            }
                        }}))
                        kb[1].push(keyboard.secondaryCallbackButton({label: "üí∞ –£–∫–ª–æ–Ω–∏—Ç—å—Å—è", payload: {
                            command: "transaction_tax_evasion",
                            transaction: {
                                price: objIN,
                                tax: {
                                    in: inTax,
                                    out: outTax
                                },
                                countries: {
                                    in: context.player.countryID,
                                    out: playerLocation.dataValues.countryID
                                },
                                toUser: user.dataValues.id
                            }
                        }}))
                        kb[2].push(keyboard.negativeCallbackButton({label: "üö´ –û—Ç–º–µ–Ω–∏—Ç—å", payload: {
                            command: "hide_message"
                        }}))
                        await context.send("‚Ñπ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ–ø–ª–∞—Ç—É –Ω–∞–ª–æ–≥–∞ –≤ –õ–°")
                        await api.api.messages.send({
                            user_id: context.player.id,
                            random_id: Math.round(Math.random() * 100000),
                            message: `‚Ñπ –î–ª—è —Å–æ–≤–µ—Ä—à–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞ –∏–≥—Ä–æ–∫—É *id${user.dataValues.id}(${user.dataValues.nick}) –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–ø–ª–∞—Ç–∏—Ç—å –Ω–∞–ª–æ–≥–∏ –≤ —Ä–∞–∑–º–µ—Ä–µ ${inTax}% –∏ ${outTax}%\n\n–ü–µ—Ä–µ–≤–æ–¥ –≤ —Ä–∞–∑–º–µ—Ä–µ:\n${NameLibrary.GetPrice(objIN)}\n\n–ü–æ—Å–ª–µ —É–ø–ª–∞—Ç—ã –Ω–∞–ª–æ–≥–∞ –æ—Å—Ç–∞–Ω–µ—Ç—Å—è:\n${NameLibrary.GetPrice(NameLibrary.AfterPayTax(NameLibrary.AfterPayTax(objIN, inTax), outTax))}\n\n${canRefund ? "‚Ñπ –¢–∞–∫–∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –≤–∑—è—Ç—å –Ω–∞ —Å–µ–±—è –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏—é –Ω–∞–ª–æ–≥–∞, –Ω–æ —Ç–æ–≥–¥–∞ —Å—É–º–º–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ –±—É–¥–µ—Ç —Å–æ—Å—Ç–∞–≤–ª—è—Ç—å:\n" + NameLibrary.GetPrice(refundTax) : ""}`,
                            keyboard: keyboard.build(kb).inline()
                        })
                        return
                    }
                }
            }
            if(request.length !== 0) await context.send(request)
        }
        catch (e)
        {
            console.log(e)
        }
    }

    async CheatResource(context)
    {
        try
        {
            if(NameLibrary.RoleEstimator(context.player.role) < 2)
            {
                return
            }
            let user
            if(context.replyPlayers?.length !== 0)
            {
                user = context.replyPlayers
            }
            else
            {
                user = [context.player.id]
            }
            let player = await Player.count({where: {id: user}})
            if(player === 0)
            {
                await context.send("‚ö† –ò–≥—Ä–æ–∫ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
                return
            }
            context.command = context.command.replace(Commands.cheating, "")
            let resource = null
            let sends = context.command.split(",")
            let objOUT = {}
            let count
            let request = ""
            let temp = null
            for(const u of user)
            {
                temp = await Player.findOne({where: {id: u}, attributes: ["nick"]})
                request += "\n" + temp.dataValues?.nick + ":" + "\n"
                for(let send of sends)
                {
                    if(send.match(Commands.money))
                    {
                        resource = "money"
                    }
                    if(send.match(Commands.wheat))
                    {
                        resource = "wheat"
                    }
                    if(send.match(Commands.stone))
                    {
                        resource = "stone"
                    }
                    if(send.match(Commands.wood))
                    {
                        resource = "wood"
                    }
                    if(send.match(Commands.iron))
                    {
                        resource = "iron"
                    }
                    if(send.match(Commands.copper))
                    {
                        resource = "copper"
                    }
                    if(send.match(Commands.silver))
                    {
                        resource = "silver"
                    }
                    if(!resource)
                    {
                        return
                    }
                    count = send.match(/\d+/)
                    count = parseInt( count ? count[0] : send)
                    if(isNaN(count))
                    {
                        count = 1
                    }
                    objOUT[resource] = Math.abs(count)
                    request += `${NameLibrary.GetResourceName(resource)} - ‚úÖ –ù–∞–∫—Ä—É—á–µ–Ω–æ ${Math.abs(count)}\n`
                }
                await Data.AddPlayerResources(u, objOUT)
                await api.SendNotification(u, `‚úÖ –í–∞–º –ø–æ—Å—Ç—É–ø–∏–ª –ø–µ—Ä–µ–≤–æ–¥ –≤ —Ä–∞–∑–º–µ—Ä–µ:\n${NameLibrary.GetPrice(objOUT)}`)
                await Transactions.create({
                    fromID: context.player.id,
                    toID: u,
                    type: "gmtp",
                    money: objOUT.money ? objOUT.money : null,
                    stone: objOUT.stone ? objOUT.stone : null,
                    wood: objOUT.wood ? objOUT.wood : null,
                    wheat: objOUT.wheat ? objOUT.wheat : null,
                    iron: objOUT.iron ? objOUT.iron : null,
                    copper: objOUT.copper ? objOUT.copper : null,
                    silver: objOUT.silver ? objOUT.silver : null,
                    diamond: objOUT.diamond ? objOUT.diamond : null
                })
            }
            await context.send(request, {disable_mentions: true})
        }
        catch (e)
        {
            console.log(e)
        }
    }

    async PickUpResource(context)
    {
        try
        {
            if(NameLibrary.RoleEstimator(context.player.role) < 2)
            {
                return
            }
            let user
            if(context.replyPlayers?.length !== 0)
            {
                user = context.replyPlayers[0]
            }
            else
            {
                user = context.player.id
            }
            let player = await PlayerResources.findOne({where: {id: user}})
            if(player === 0)
            {
                await context.send("‚ö† –ò–≥—Ä–æ–∫ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
                return
            }
            context.command = context.command.replace(Commands.pickUp, "")
            let resource = null
            let sends = context.command.split(",")
            let objOUT = {}
            let count
            let request = ""
            for(let send of sends)
            {
                if(send.match(Commands.money))
                {
                    resource = "money"
                }
                if(send.match(Commands.wheat))
                {
                    resource = "wheat"
                }
                if(send.match(Commands.stone))
                {
                    resource = "stone"
                }
                if(send.match(Commands.wood))
                {
                    resource = "wood"
                }
                if(send.match(Commands.iron))
                {
                    resource = "iron"
                }
                if(send.match(Commands.copper))
                {
                    resource = "copper"
                }
                if(send.match(Commands.silver))
                {
                    resource = "silver"
                }
                if(send.match(Commands.diamond))
                {
                    resource = "diamond"
                }
                if(send.match(Commands.carrot))
                {
                    resource = "carrot"
                }
                if(!resource)
                {
                    return
                }
                count = send.match(/\d+/)
                count = parseInt( count ? count[0] : send)
                if(isNaN(count))
                {
                    count = 1
                }
                if(send.match(/–≤—Å–µ|–≤—Å—ë|–≤—Å—é|–≤—Å–µ—Ö|–≤–µ—Å—å/) || player.dataValues[resource] < count)
                {
                    count = player.dataValues[resource]
                }
                objOUT[resource] = -Math.abs(count)
                request += `${NameLibrary.GetResourceName(resource)} - ‚úÖ –û—Ç–æ–±—Ä–∞–Ω–æ ${Math.abs(count)}\n`
            }
            await Data.AddPlayerResources(user, objOUT)
            await api.SendNotification(user, `‚úÖ –£ –≤–∞—Å –±—ã–ª–æ –æ—Ç–æ–±—Ä–∞–Ω–æ:\n${NameLibrary.GetPrice(objOUT)}`)
            await Transactions.create({
                fromID: context.player.id,
                toID: user,
                type: "ptgm",
                money: objOUT.money ? objOUT.money : null,
                stone: objOUT.stone ? objOUT.stone : null,
                wood: objOUT.wood ? objOUT.wood : null,
                wheat: objOUT.wheat ? objOUT.wheat : null,
                iron: objOUT.iron ? objOUT.iron : null,
                copper: objOUT.copper ? objOUT.copper : null,
                silver: objOUT.silver ? objOUT.silver : null,
                diamond: objOUT.diamond ? objOUT.diamond : null
            })
            await context.send(request)
        }
        catch (e)
        {
            console.log(e)
        }
    }

    async CheckDocs(context)
    {
        try
        {
            if(context.replyPlayers?.length === 0)
            {
                await context.send("‚ö† –í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä–æ–∫–∞")
                return
            }
            const user = await Player.findOne({where: {id: context.replyPlayers[0]}})
            if(!user)
            {
                await context.send("‚ö† –ò–≥—Ä–æ–∫ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
                return
            }
            const userInfo = await PlayerInfo.findOne({where: {id: context.replyPlayers[0]}})
            const userStatus = await PlayerStatus.findOne({where: {id: context.replyPlayers[0]}})
            await context.send(`üìå–ò–≥—Ä–æ–∫ *id${user.dataValues.id}(${user.dataValues.nick}):\n\nüìÖ –í–æ–∑—Ä–∞—Å—Ç: ${userInfo.dataValues.age}\n‚ö§ –ü–æ–ª: ${user.dataValues.gender ? "‚ôÇ –ú—É–∂—á–∏–Ω–∞" : "‚ôÄ –ñ–µ–Ω—â–∏–Ω–∞"}\nüç£ –ù–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å: ${userInfo.dataValues.nationality}\nüíç –ë—Ä–∞–∫: ${userInfo.dataValues.marriedID ? (user.dataValues.gender ? `*id${userInfo.dataValues.marriedID}(üíò –ñ–µ–Ω–∞)` : `*id${userInfo.dataValues.marriedID}(üíò –ú—É–∂)`) : "–ù–µ—Ç"}\nü™Ñ –†–æ–ª—å: ${NameLibrary.GetRoleName(user.dataValues.role)}\nüëë –°—Ç–∞—Ç—É—Å: ${NameLibrary.GetStatusName(user.dataValues.status)}\nüî∞ –ì—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ: ${userStatus.dataValues.citizenship ? Data.GetCountryName(userStatus.dataValues.citizenship) : "–ù–µ—Ç"}\nüìç –ü—Ä–æ–ø–∏—Å–∫–∞: ${userStatus.dataValues.registration ? Data.GetCityName(userStatus.dataValues.registration) : "–ù–µ—Ç"}\nüç∫ –í—ã–ø–∏—Ç–æ –ø–∏–≤–∞: ${parseFloat(user.dataValues.beer).toFixed(1)} –ª.\nüí≠ –û–ø–∏—Å–∞–Ω–∏–µ: ${userInfo.dataValues.description}`, {disable_mentions: true, attachment: user.dataValues.avatar})
        }
        catch (e)
        {
            await api.SendLogs(context, "ChatController/CheckLocation", e)
        }
    }

    async CheckLocation(context)
    {
        try
        {
            if(context.replyPlayers?.length === 0)
            {
                await context.send("‚ö† –í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä–æ–∫–∞")
                return
            }
            if(context.replyPlayers[0] === context.player.id)
            {
                await context.send("‚ûï –î–∞, –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –æ–¥–Ω–æ–º –≥–æ—Ä–æ–¥–µ —Å —Å–∞–º–∏–º —Å–æ–±–æ–π")
                return
            }
            const user = await PlayerStatus.findOne({where: {id: context.replyPlayers[0]}})
            if(!user)
            {
                await context.send("‚ö† –ò–≥—Ä–æ–∫ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
                return
            }
            if(user.dataValues.location === context.player.location)
            {
                await context.send("‚ûï –í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –æ–¥–Ω–æ–º –≥–æ—Ä–æ–¥–µ")
            }
            else
            {
                if(user.dataValues.countryID === context.player.countryID)
                {
                    await context.send("‚ûñ –í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ —Ä–∞–∑–Ω—ã—Ö –≥–æ—Ä–æ–¥–∞—Ö –æ–¥–Ω–æ–π —Ñ—Ä–∞–∫—Ü–∏–∏")
                }
                else
                {
                    await context.send("‚ûñ –í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ —Ä–∞–∑–Ω—ã—Ö –≥–æ—Ä–æ–¥–∞—Ö")
                }
            }
        }
        catch (e)
        {
            await api.SendLogs(context, "ChatController/CheckLocation", e)
        }
    }

    async ExtractResource(context, resource)
    {
        try
        {
            if(context.player.CantExtraction())
            {
                await context.send(`ü•¥ –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –¥–æ–±—ã–≤–∞—Ç—å —Ä–µ—Å—É—Ä—Å—ã, ${context.player.WhyCantTransact()}`)
                return
            }
            if(context.player.fatigue <= 0)
            {
                await context.send("üò¢ –•–≤–∞—Ç–∏—Ç —Ä–∞–±–æ—Ç–∞—Ç—å, –∏–¥–∏ –ø–æ—Å–ø–∏.")
                return
            }
            if(!context.player.citizenship)
            {
                await context.send("ü•∏ –î–ª—è –¥–æ–±—ã—á–∏ —Ä–µ—Å—É—Ä—Å–æ–≤ –Ω–∞–¥–æ –∏–º–µ—Ç—å –≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ")
                return
            }
            if(Data.countries[context.player.countryID]?.resources?.match(resource) && Data.countries[context.player.citizenship]?.resources?.match(resource))
            {
                const extract = {
                    wood: {min: 2.5, max: 5, img: Data.variables["woodPicture"]},
                    wheat: {min: 2.5, max: 7.5, img: Data.variables["wheatPicture"]},
                    stone: {min: 2.5, max: 5, img: Data.variables["stonePicture"]},
                    iron: {min: 0.65, max: 1.85, img: Data.variables["ironPicture"]},
                    copper: {min: 0.65, max: 1.85, img: Data.variables["copperPicture"]},
                    silver: {min: 1.25, max: 2.5, img: Data.variables["silverPicture"]}
                }
                let obj = {}
                const extraction = NameLibrary.GetRandomNumb(extract[resource].min * context.player.fatigue, extract[resource].max * context.player.fatigue)
                context.player.fatigue = context.player.HasEffect("industriousness") ? Math.max(0, context.player.fatigue - 50) : 0
                if(NameLibrary.GetChance(0.1 * (context.player.HasEffect("luck") ? 2 : 1)))
                {
                    obj["diamond"] = 1
                    await context.send(`üíé –í—ã –Ω–∞—à–ª–∏ –∞–ª–º–∞–∑!`, {attachment: Data.variables["diamondPicture"]})
                }
                obj[resource] = extraction
                await Data.AddPlayerResources(context.player.id, obj)
                let msg = await context.send(`‚úÖ –í—ã –¥–æ–±—ã–ª–∏ ${NameLibrary.GetResourceName(resource)} ${extraction}`, {attachment: extract[resource].img})
                setTimeout(async () => {
                    try
                    {
                        await api.api.messages.delete({
                            conversation_message_ids: context.conversationMessageId,
                            delete_for_all: 1,
                            peer_id: context.peerId
                        })
                    }catch (e) {}
                    try
                    {
                        await api.api.messages.delete({
                            conversation_message_ids: msg.conversationMessageId,
                            delete_for_all: 1,
                            peer_id: msg.peerId
                        })
                    }catch (e) {}
                }, 60000)
            }
            else
            {
                await context.send("ü•∏ –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –¥–æ–±—ã—Ç—å —ç—Ç–æ—Ç —Ä–µ—Å—É—Ä—Å.")
            }
        }
        catch (e)
        {
            await api.SendLogs(context, "ChatController/ExtractResource", e)
        }
    }

    async LocationRequest(context)
    {
        try
        {
            const country = Data.countries[context.player.countryID]
            const kb = [[], [], []]
            country.resources.match(/wood/) && kb[0].push(keyboard.greenButton({name: "üå≥ –õ–µ—Å ü™ì", type: "extract", action: "wood"}))
            country.resources.match(/wheat/) && kb[0].push(keyboard.greyButton({name: "üåæ –°–æ–±—Ä–∞—Ç—å –∑–µ—Ä–Ω–æ üåæ", type: "extract", action: "wheat"}))
            country.resources.match(/stone/) && kb[1].push(keyboard.greyButton({name: "ü™® –ö–æ–ø–∞—Ç—å –∫–∞–º–µ–Ω—å ‚õè", type: "extract", action: "stone"}))
            country.resources.match(/iron/) && kb[1].push(keyboard.lightButton({name: "üåë –î–æ–±—ã—Ç—å –∂–µ–ª–µ–∑–æ ‚õè", type: "extract", action: "iron"}))
            country.resources.match(/copper/) && kb[2].push(keyboard.lightButton({name: "ü•â –î–æ–±—ã—Ç—å –±—Ä–æ–Ω–∑—ã ‚õè", type: "extract", action: "copper"}))
            country.resources.match(/silver/) && kb[2].push(keyboard.lightButton({name: "ü•à –î–æ–±—ã—Ç—å —Å–µ—Ä–µ–±—Ä–∞ ‚õè", type: "extract", action: "silver"}))
            const photo = Data.cities[context.player.location].photoURL || country.photoURL
            const msg = await context.send(`üß≠ *id${context.player.id}(–í—ã) –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ ${Data.cities[context.player.location].isCapital ? "—Å—Ç–æ–ª–∏—Ü–µ" : ""} —Ñ—Ä–∞–∫—Ü–∏–∏ ${country.GetName(context.player.platform === "IOS")}, –≤ –≥–æ—Ä–æ–¥–µ ${Data.cities[context.player.location].name}\n\n${Data.cities[context.player.location].description}`, {attachment: photo, keyboard: keyboard.build(kb).inline()})
            if(context.chat?.clean)
            {
                setTimeout(async () => {
                    try
                    {
                        await api.api.messages.delete({
                            conversation_message_ids: context.conversationMessageId,
                            delete_for_all: 1,
                            peer_id: context.peerId
                        })
                    }catch (e) {}
                    try
                    {
                        await api.api.messages.delete({
                            conversation_message_ids: msg.conversationMessageId,
                            delete_for_all: 1,
                            peer_id: msg.peerId
                        })
                    }catch (e) {}
                }, 60000)
            }
        }
        catch (e)
        {
            await api.SendLogs(context, "ChatController/LocationRequest", e)
        }
    }

    async SendWarningForm(context)
    {
        try
        {
            if(context.replyPlayers?.length === 0)
            {
                await context.send("‚ö† –í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä–æ–∫–æ–≤")
                return
            }
            let time = new Date()
            if(NameLibrary.RoleEstimator(context.player.role) === 0)
            {
                await this.SendReport(context)
                return
            }
            let adminsFlag = false
            let unregFlag = false
            let temp = null
            for(const i of context.replyPlayers)
            {
                if(Data.users[i])
                {
                    if(NameLibrary.RoleEstimator(Data.users[i].role) >= NameLibrary.RoleEstimator(context.player.role))
                    {
                        adminsFlag = true
                    }
                }
                else
                {
                    temp = await Player.findOne({where: {id: i}})
                    if(temp)
                    {
                        if(NameLibrary.RoleEstimator(temp.dataValues.role) >= NameLibrary.RoleEstimator(context.player.role))
                        {
                            adminsFlag = true
                        }
                    }
                    else
                    {
                        unregFlag = true
                    }
                }
            }
            if(adminsFlag)
            {
                await context.send("‚ö† –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤–∞ –≤—ã–¥–∞–≤–∞—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞–º")
                return
            }
            if(unregFlag)
            {
                await context.send("‚ö† –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≤—ã–¥–∞—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")
                return
            }
            const users = context.replyPlayers.join(";")
            context.player.lastReportTime = time
            await api.SendMessageWithKeyboard(context.player.id, `–í—ã –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ —Ä–µ–∂–∏–º –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö.\n\n‚Ñπ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É \"–ù–∞—á–∞—Ç—å\" —á—Ç–æ–±—ã –≤–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ —Ä–µ–ø–æ—Ä—Ç–∞ –Ω–∞ –∏–≥—Ä–æ–∫–æ–≤:\n${context.replyPlayers?.map(user => {
                return `*id${user}(${user})\n`
            })}`, [[keyboard.startButton({type: "new_warning", users: users})], [keyboard.backButton]])
            context.player.state = context.scenes.FillingOutTheForm
            await context.send("‚Ñπ –ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É –≤ –õ–°")
        }
        catch (e)
        {
            await api.SendLogs(context, "ChatController/SendWarningForm", e)
        }
    }

    async SendReport(context)
    {
        try
        {
            let time = new Date()
            if(context.player.lastReportTime)
            {
                if(time - context.player.lastReportTime < 3600000)
                {
                    await context.send("‚ö† –í—ã —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ –∂–∞–ª–æ–±—ã")
                    return
                }
            }
            if(!context.player.CanPay({money: -150}))
            {
                await context.send("‚ö† –£ –≤–∞—Å –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –º–æ–Ω–µ—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∂–∞–ª–æ–±—ã (—Å—Ç–æ–∏–º–æ—Å—Ç—å 150 –º–æ–Ω–µ—Ç)")
                return
            }
            const users = context.replyPlayers.join(";")
            context.player.lastReportTime = time
            await api.SendMessageWithKeyboard(context.player.id, `–í—ã –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ —Ä–µ–∂–∏–º –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö.\n\n‚Ñπ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É \"–ù–∞—á–∞—Ç—å\" —á—Ç–æ–±—ã –≤–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ —Ä–µ–ø–æ—Ä—Ç–∞ –Ω–∞ –∏–≥—Ä–æ–∫${context.replyPlayers.length > 1 ? "–æ–≤" : "–∞"}:\n${context.replyPlayers?.map(user => {
                return `*id${user}(${user})\n`
            })}`, [[keyboard.startButton({type: "new_report", users: users})], [keyboard.backButton]])
            context.player.state = context.scenes.FillingOutTheForm
            await context.send("‚Ñπ –ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É –≤ –õ–°")
        }
        catch (e)
        {
            await api.SendLogs(context, "ChatController/SendWarningForm", e)
        }
    }

    async SendBanForm(context)
    {
        try
        {
            if(NameLibrary.RoleEstimator(context.player.role) < 3)
            {
                await context.send("‚ö† –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É")
                return
            }
            if(StopList.includes(context.replyPlayers[0]))
            {
                await context.reply("‚ö† –û—Å—É–∂–¥–∞—é")
                return
            }
            if(context.replyPlayers?.length === 0)
            {
                await context.send("‚ö† –í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä–æ–∫–æ–≤")
                return
            }
            let time = new Date()
            let adminsFlag = false
            let unregFlag = false
            let temp = null
            const users = context.replyPlayers[0]
            if(Data.users[users])
            {
                if(NameLibrary.RoleEstimator(Data.users[users].role) >= NameLibrary.RoleEstimator(context.player.role))
                {
                    adminsFlag = true
                }
            }
            else
            {
                temp = await Player.findOne({where: {id: users}})
                if(temp)
                {
                    if(NameLibrary.RoleEstimator(temp.dataValues.role) >= NameLibrary.RoleEstimator(context.player.role))
                    {
                        adminsFlag = true
                    }
                }
                else
                {
                    unregFlag = true
                }
            }
            if(adminsFlag)
            {
                await context.send("‚ö† –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≤—ã–¥–∞–≤–∞—Ç—å –±–∞–Ω—ã –∞–¥–º–∏–Ω–∞–º")
                return
            }
            if(unregFlag)
            {
                await context.send("‚ö† –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≤—ã–¥–∞—Ç—å –±–∞–Ω –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")
                return
            }
            context.player.lastReportTime = time
            await api.SendMessageWithKeyboard(context.player.id, `–í—ã –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ —Ä–µ–∂–∏–º –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö.\n\n‚Ñπ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É \"–ù–∞—á–∞—Ç—å\" —á—Ç–æ–±—ã –≤–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ –ì–ª–æ–ë–∞–Ω–∞ –Ω–∞ –∏–≥—Ä–æ–∫–∞: ${context.replyPlayers?.map(user => {
                return `*id${user}(${user})\n`
            })}`, [[keyboard.startButton({type: "new_ban", users: users})], keyboard.backButton])
            context.player.state = context.scenes.FillingOutTheForm
            await context.send("‚Ñπ –ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É –≤ –õ–°")
        }
        catch (e)
        {
            await api.SendLogs(context, "ChatController/SendBanForm", e)
        }
    }
}

module.exports = new ChatController()