const InputManager = require("./InputManager");
const OutputManager = require("./OutputManager")
const Data = require("../models/CacheData");
const keyboard = require("../variables/Keyboards");
const {City, Country, PlayerStatus, Player, Ban, LastWills, Buildings,
    CountryResources, CityResources, PlayerInfo, CountryRoads, Keys, OfficialInfo, Messages, Chats,
    Warning, CityRoads, Transactions, CountryTaxes, CountryNotes, CityNotes, PlayerNotes, Events,
    PlayerResources, UnitClass, UnitType, Army, LongTimeouts, EmpireRules
} = require("../database/Models");
const api = require("../middleware/API");
const NameLibrary = require("../variables/NameLibrary")
const Prices = require("../variables/Prices")
const Nations = require("../variables/Nations")
const sequelize = require("../database/DataBase")
const Effects = require("../variables/Effects")
const User = require("../models/User")
const fs = require('fs')
const path = require("path")
const axios = require("axios")
const APIKeysGenerator = require("../models/ApiKeysGenerator")
const CrossStates = require("./CrossStates")
const StopList = require("../files/StopList.json");

class BuildersAndControlsScripts
{
    async Registration(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                let name = await InputManager.InputString(context, `1Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫–Ω–µ–π–º, –∫–æ—Ç–æ—Ä—ã–º –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤ –±—É–¥—É—â–µ–º. –£—á—Ç–∏—Ç–µ, —á—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–Ω—Ç–∏—á–Ω–æ–µ –∏–º—è, —Ä–µ–∞–ª—å–Ω–æ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–≤—à–µ–µ –≤ –∏—Å—Ç–æ—Ä–∏–∏. –°–æ —Å–ø–∏—Å–∫–æ–º —Ç–∞–∫–∏—Ö –≤—ã –º–æ–∂–µ—Ç–µ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è –Ω–∏–∂–µ.\nüëâüèæ –ì—Ä–µ—á–µ—Å–∫–∏–µ –∏–º–µ–Ω–∞: https://ru.m.wikipedia.org/wiki/–°–ø–∏—Å–æ–∫_–∏–º—ë–Ω_–≥—Ä–µ—á–µ—Å–∫–æ–≥–æ_–ø—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏—è\nüëâüèæ –†–∏–º—Å–∫–∏–µ –∏–º–µ–Ω–∞: https://ru.m.wikipedia.org/wiki/–†–∏–º—Å–∫–∏–µ_–∏–º–µ–Ω–∞\nüëâüèæ –ü–µ—Ä—Å–∏–¥—Å–∫–∏–µ –∏–º–µ–Ω–∞: https://ru.m.wikipedia.org/wiki/–ü–µ—Ä—Å–∏–¥—Å–∫–∏–µ_–∏–º–µ–Ω–∞`, current_keyboard,2, 35)
                if(!name) return resolve(false)
                let temp = await Player.findOne({where: {nick: name}})
                while(temp)
                {
                    name = await InputManager.InputString(context, `‚ö† –≠—Ç–æ—Ç –Ω–∏–∫ –∑–∞–Ω—è—Ç`, current_keyboard, 2, 20)
                    if(!name) return resolve(false)
                    temp = await Player.findOne({where: {nick: name}})
                }

                const age = await InputManager.InputInteger(context, `2Ô∏è‚É£ –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç –≤–∞—à–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞.\n‚ö† –í–æ–∑—Ä–∞—Å—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã–±—Ä–∞–Ω –æ—Ç 16 –¥–æ 100 –ª–µ—Ç.`, current_keyboard, 1, 100)
                if(age === null) return resolve(false)

                const gender = await InputManager.InputBoolean(context, `3Ô∏è‚É£ –£–∫–∞–∂–∏—Ç–µ –ø–æ–ª –≤–∞—à–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞.`, current_keyboard, keyboard.manButton, keyboard.womanButton)
                if(gender === null) return resolve(false)

                const nationKeyboard = []
                Object.keys(Nations).forEach(key => {
                    nationKeyboard.push([Nations[key].name, key])
                })

                let nation = await InputManager.KeyboardBuilder(context, "4Ô∏è‚É£ –ö–∞–∫–æ–≤–∞ –Ω–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –≤–∞—à–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞?", nationKeyboard, current_keyboard)
                if(!nation) return resolve()

                const clan = await InputManager.InputString(context, `5Ô∏è‚É£ –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–≤–æ—ë–º –∫–ª–∞–Ω–µ/–ø–ª–µ–º–µ–Ω–∏/—Ñ–∏–ª–µ/–¥–æ–º–µ –∏ —Ç–¥, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å\n\n‚ö† –î–ª–∏–Ω–∞ –¥–æ 100 —Å–∏–º–≤–æ–ª–æ–≤. –ß—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –Ω–∞–∂–º–∏—Ç–µ –æ—Ç–º–µ–Ω–∞.`, current_keyboard, 0, 100)
                const position = await InputManager.InputString(context, `6Ô∏è‚É£ –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –ø–æ–ª–æ–∂–µ–Ω–∏–∏ –≤ –æ–±—â–µ—Å—Ç–≤–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä: –ø–æ–ª–∏—Ç–∏–∫, —Ä–µ–ª–∏–≥–∏–æ–∑–Ω—ã–π –¥–µ—è—Ç–µ–ª—å, —Ç–æ—Ä–≥–æ–≤–µ—Ü, —Å–æ–ª–¥–∞—Ç –∏ —Ç.–¥.\n\n‚ö† –î–ª–∏–Ω–∞ –¥–æ 100 —Å–∏–º–≤–æ–ª–æ–≤. –ß—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –Ω–∞–∂–º–∏—Ç–µ –æ—Ç–º–µ–Ω–∞.`, current_keyboard, 0, 100)
                const appearance = await InputManager.InputString(context, `7Ô∏è‚É£ –£–∫–∞–∂–∏—Ç–µ –≤–Ω–µ—à–Ω–æ—Å—Ç—å, —Ç–µ–ª–æ—Å–ª–æ–∂–µ–Ω–∏–µ, –≥—Ä–∞–∂–¥–∞–Ω—Å–∫–∞—è –æ–¥–µ–∂–¥–∞\n\n‚ö† –î–ª–∏–Ω–∞ –¥–æ 150 —Å–∏–º–≤–æ–ª–æ–≤. –ß—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –Ω–∞–∂–º–∏—Ç–µ –æ—Ç–º–µ–Ω–∞.`, current_keyboard, 0, 150)
                const personality = await InputManager.InputString(context, `8Ô∏è‚É£ –û–ø–∏—à–∏—Ç–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä, –≤–∑–≥–ª—è–¥—ã, —Ü–µ–Ω–Ω–æ—Å—Ç–∏. –ï—Å–ª–∏ –≤—ã –æ–ø—ã—Ç–Ω—ã–π —Ä–æ–ª–µ–≤–∏–∫, —Ç–æ –∏–º–µ–Ω–Ω–æ –Ω–∞ —ç—Ç–æ—Ç –ø—É–Ω–∫—Ç –≤—ã –¥–æ–ª–∂–Ω—ã —Å–¥–µ–ª–∞—Ç—å –∞–∫—Ü–µ–Ω—Ç.\n‚ö† –î–ª–∏–Ω–∞ –¥–æ 250 —Å–∏–º–≤–æ–ª–æ–≤.`, current_keyboard, 0, 250)
                const description = await InputManager.InputString(context, `9Ô∏è‚É£ –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–≤–æ—ë–º –ø–µ—Ä—Å–æ–Ω–∞–∂–µ! –û—Ç–∫—É–¥–∞ –æ–Ω —Ä–æ–¥–æ–º, —á–µ–º –∑–∞–Ω–∏–º–∞–µ—Ç—Å—è. –í–æ–∑–º–æ–∂–Ω–æ –µ—Å—Ç—å –ª–∏ —É –Ω–µ–≥–æ —Å–µ–º—å—è, –¥–µ—Ç–∏. –° –∫–∞–∫–æ–π —Ü–µ–ª—å—é –æ–Ω –ø—Ä–∏—à—ë–ª –≤ —Ç–æ –º–µ—Å—Ç–æ, –≥–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —Å–µ–π—á–∞—Å.\n‚ö† –î–ª–∏–Ω–∞ –¥–æ 1000 —Å–∏–º–≤–æ–ª–æ–≤.`, current_keyboard, 0, 1000)
                if(!description) return resolve(false)
                await context.send(Nations[nation].description)
                nation = Nations[nation].name
                await Player.update({
                    nick: name,
                    gender: gender,
                    clan: clan,
                    position: position,
                    appearance: appearance,
                    personality: personality
                }, {where: {id: context.player.id}})
                await PlayerInfo.update({
                    description: description,
                    nationality: nation,
                    age: age
                }, {where: {id: context.player.id}})
                context.player.nick = name
                context.player.gender = gender
                context.player.clan = clan
                context.player.position = position
                context.player.appearance = appearance
                context.player.personality = personality
                context.player.description = description
                context.player.nationality = nation
                context.player.age = age
                await context.send("‚úÖ –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã", {keyboard: keyboard.build(current_keyboard)})
                context.player.state = context.scenes.StartScreen
                return resolve(true)
            }
            catch (e)
            {
                await api.SendLogs(context, "BuildersAndControlsScripts/Registration", e)
            }
        })
    }

    async NewCountry(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                const showTags = (array) =>
                {
                    if(array.length === 0) return "–¢–µ–≥–æ–≤ –Ω–µ—Ç"
                    let request = `–¢–µ–≥–∏:\n\n`
                    for(const tag of array)
                    {
                        request += "- " + tag + "\n"
                    }
                    return request
                }

                let name = await InputManager.InputString(context, "1Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ—Ä–∞–∫—Ü–∏–∏ (–æ—Ç 2 –¥–æ 35 —Å–∏–º–≤–æ–ª–æ–≤):", current_keyboard, 2, 35)
                if (!name) return resolve()
                let country = await Country.count({where: {name: name}})
                while(country > 0)
                {
                    name = await InputManager.InputString(context, "‚ö† –§—Ä–∞–∫—Ü–∏—è —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.", current_keyboard, 2,30)
                    if (!name) return resolve()
                    country = await Country.count({where: {name: name}})
                }

                const description = await InputManager.InputString(context,"2Ô∏è‚É£ –°–¥–µ–ª–∞–π—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ñ—Ä–∞–∫—Ü–∏–∏. (–¥–æ 1000 —Å–∏–º–≤–æ–ª–æ–≤)",current_keyboard,0,1000)
                if(!description) return resolve()

                const preview = await InputManager.InputPhoto(context,`3Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è –∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏–∏.\n‚ö† –≠—Ç–æ —Ñ–æ—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–∞—Ä—É—Å–µ–ª–∏ —Å —Ñ—Ä–∞–∫—Ü–∏—è–º–∏ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –∏–≥—Ä–æ–∫–æ–≤, —Å–æ–∑–¥–∞—Ç—å —Ñ—Ä–∞–∫—Ü–∏—é –±–µ–∑ —Ñ–æ—Ç–æ - –Ω–µ–ª—å–∑—è.\n\n‚ö†‚ö†‚ö† –¢—Ä–µ–±—É–µ—Ç—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ —Å —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ–º —Å—Ç–æ—Ä–æ–Ω 13/8 (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ 650x400), –∏–Ω–∞—á–µ –±—É–¥—É—Ç –æ—à–∏–±–∫–∏ —Å –∫–∞—Ä—É—Å–µ–ª—å—é, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –≤—ã–ª–µ—Ç—É\n\n–ë—ã—Å—Ç—Ä–æ –∏–∑–º–µ–Ω–∏—Ç—å —Ä–∞–∑–º–µ—Ä —Ñ–æ—Ç–æ –º–æ–∂–Ω–æ –∑–¥–µ—Å—å: https://www.visualwatermark.com/ru/image-resizer/`, current_keyboard)
                if (!preview) return resolve()

                const welcomePhoto = await InputManager.InputPhoto(context,`4Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Ñ–æ—Ç–æ\n‚ö† –≠—Ç–æ —Ñ–æ—Ç–æ –±—É–¥–µ—Ç –≤—Å—Ç—Ä–µ—á–∞—Ç—å –Ω–æ–≤—ã—Ö –≥—Ä–∞–∂–¥–∞–Ω. (–§–æ—Ç–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)`, current_keyboard)
                if(!welcomePhoto) return resolve()

                let capitalName = await InputManager.InputString(context, "5Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–æ–ª–∏—Ü—ã (–æ—Ç 2 –¥–æ 30 —Å–∏–º–≤–æ–ª–æ–≤):", current_keyboard, 2,30)
                if (!capitalName) return resolve()

                let capital = await City.count({where: {name: capitalName}})
                while(capital > 0)
                {
                    capitalName = await InputManager.InputString(context, "‚ö† –ì–æ—Ä–æ–¥ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.", current_keyboard, 2, 30)
                    if (!capitalName) return resolve()
                    capital = await City.count({where: {name: capitalName}})
                }

                let leader = await InputManager.InputUser(context, "6Ô∏è‚É£ –¢–µ–ø–µ—Ä—å –Ω—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –ø—Ä–∞–≤–∏—Ç–µ–ª—è.")
                if(!leader) return resolve()
                while(leader.dataValues.status.match(/leader/))
                {
                    if(leader.dataValues.status.match(/leader/)) leader = await InputManager.InputUser(context, `‚ö† *id${leader.dataValues.id}(${leader.dataValues.nick}) —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –ø—Ä–∞–≤–∏—Ç–µ–ª–µ–º. –ó–∞–±–µ—Ä–∏—Ç–µ —É –Ω–µ–≥–æ —Å—Ç–∞—Ç—É—Å –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–≥–æ –∏–≥—Ä–æ–∫–∞.`, current_keyboard)
                    if(!leader) return resolve()
                }
                let groupId = await InputManager.InputGroup(context, `7Ô∏è‚É£ –£–∫–∞–∂–∏—Ç–µ –≥—Ä—É–ø–ø—É —ç—Ç–æ–π —Ñ—Ä–∞–∫—Ü–∏–∏.`, current_keyboard)
                if(!groupId) return resolve()

                await context.send("8Ô∏è‚É£ –¢–µ–ø–µ—Ä—å –Ω–∞–¥–æ —É–∫–∞–∑–∞—Ç—å —Ç–µ–≥–∏ —Ñ—Ä–∞–∫—Ü–∏–∏, –æ–Ω–∏ –Ω—É–∂–Ω—ã –¥–ª—è —É–∫–∞–∑–∞–Ω–∏—è —Ç—Ä–µ–±—É–µ–º–æ–π —Ñ—Ä–∞–∫—Ü–∏–∏ –≤ —á–∞—Ç-–∫–æ–º–∞–Ω–¥–∞—Ö. –í–≤–æ–¥–∏—Ç–µ –Ω–µ —Å–ª–æ–≤–∞ —Ü–µ–ª–∏–∫–æ–º, –∞, –∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ, –∏—Ö –∫–æ—Ä–Ω–∏.", {keyboard: keyboard.build(current_keyboard)})
                let tags = []
                let newTag = ""
                do
                {
                    await context.send(showTags(tags))
                    newTag = await InputManager.InputString(context, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–≥", current_keyboard)
                    if(newTag)
                    {
                        tags.push(newTag)
                    }
                }
                while(newTag)
                if(tags.length === 0) return resolve()

                let resourcesKeyboard = [
                    ["üåæ –ó–µ—Ä–Ω–æ", "wheat", false],
                    ["ü™µ –î—Ä–µ–≤–µ—Å–∏–Ω–∞", "wood", false],
                    ["ü™® –ö–∞–º–µ–Ω—å", "stone", false],
                    ["üåë –ñ–µ–ª–µ–∑–æ", "iron", false],
                    ["ü•â –ë—Ä–æ–Ω–∑–∞", "copper", false],
                    ["ü•à –°–µ—Ä–µ–±—Ä–æ", "silver", false]
                ]
                let resources = await InputManager.RadioKeyboardBuilder(context, "8Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ—Å—É—Ä—Å—ã —Ñ—Ä–∞–∫—Ü–∏–∏:", resourcesKeyboard, current_keyboard)
                if(!resources) return resolve()
                resources = resources.filter(key => {
                    return key[1]
                }).map(key => {
                    return key[0]
                })
                let resName = ""
                 resources.forEach(key => {
                     resName += NameLibrary.GetResourceName(key) + "\n"
                })
                resources = resources.join(".")

                let accept = await InputManager.InputBoolean(context, `–ò—Ç–∞–∫, –º—ã –∏–º–µ–µ–º —Å–ª–µ–¥—É—é—â–µ–µ:\n\nüìå –ù–∞–∑–≤–∞–Ω–∏–µ: *public${groupId}(${name})\nüèô –°—Ç–æ–ª–∏—Ü–∞: ${capitalName}\nüëë –ü—Ä–∞–≤–∏—Ç–µ–ª—å: *id${leader.dataValues.id}(${leader.dataValues.nick})\n\n‚õè –†–µ—Å—É—Ä—Å—ã –¥–ª—è –¥–æ–±—ã—á–∏:\n ${resName}\n\n–í–µ—Ä–Ω–æ?`, current_keyboard)
                if(!accept)
                {
                    await context.send('üö´ –í–≤–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω.', {
                        keyboard: keyboard.build(current_keyboard)
                    })
                    return resolve()
                }

                const city = await City.create({
                    leaderID: leader.dataValues.id,
                    name: capitalName,
                    description: `–°—Ç–æ–ª–∏—Ü–∞ —Ñ—Ä–∞–∫—Ü–∏–∏ *public${groupId}(${name})`,
                    photoURL: preview,
                    isCapital: true,
                    maxBuildings: 8
                })
                await CityResources.create({
                    id: city.dataValues.id
                })
                country = await Country.create({
                    name: name,
                    description: description,
                    photoURL: preview,
                    welcomePhotoURL: welcomePhoto,
                    leaderID: leader.dataValues.id,
                    groupID: groupId,
                    resources: resources,
                    capital: capitalName,
                    capitalID: city.dataValues.id,
                    tested: true,
                    tags: tags.join("|")
                })
                await CountryResources.create({id: country.dataValues.id})
                await PlayerStatus.update({
                    location: city.dataValues.id,
                    countryID: country.dataValues.id,
                    citizenship: country.dataValues.id
                }, {where: {id: leader.dataValues.id}})
                city.set({
                    countryID: country.dataValues.id,
                    capitalID: country.dataValues.id
                })
                leader.set({
                    status: leader.dataValues.status === "worker" ? "worker" : "leader"
                })
                await city.save()
                await leader.save()

                if(Data.users[leader.dataValues.id]?.status !== "worker") Data.users[leader.dataValues.id].status = "leader"
                await Data.LoadCountries()
                await Data.LoadCities()
                await Data.LoadOfficials()
                await api.SendMessage(leader.dataValues.id,`üëë –í—ã –±—ã–ª–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –ø—Ä–∞–≤–∏—Ç–µ–ª–µ–º —Ç–æ–ª—å–∫–æ —á—Ç–æ —Å–æ–∑–¥–∞–Ω–Ω–æ–π —Ñ—Ä–∞–∫—Ü–∏–∏ ${name}\n–í–∞—à —Å—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ "üëë –ü—Ä–∞–≤–∏—Ç–µ–ª—å"`)
                await context.send("‚úÖ –§—Ä–∞–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞!\n–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –¥–æ—Ä–æ–≥–∏ —á–µ—Ä–µ–∑ –ì–ú-–º–µ–Ω—é", {keyboard: keyboard.build(current_keyboard)})
                return resolve()
            }
            catch (e)
            {
                await api.SendLogs(context, "BuildersAndControlsScripts/NewCountry", e)
            }
        })
    }

    async ChangeRole(context, current_keyboard, tools)
    {
        return new Promise(async (resolve) => {
            try
            {
                const user = await InputManager.InputUser(context, "1Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä–æ–∫–∞.", current_keyboard)
                if (!user) return resolve()
                if(NameLibrary.RoleEstimator(context.player.role) <= NameLibrary.RoleEstimator(user.dataValues.role))
                {
                    await context.send(`üö´ –í—ã –Ω–µ –∏–º–µ–µ—Ç–µ –ø—Ä–∞–≤–∞ –∏–∑–º–µ–Ω—è—Ç—å —Ä–æ–ª—å –∏–≥—Ä–æ–∫–∞ *id${user.dataValues.id}(${user.dataValues.nick}).`, {
                        keyboard: keyboard.build(current_keyboard)
                    })
                    return resolve()
                }
                let giveRoleKB = [
                    ["üë∂ –ò–≥—Ä–æ–∫", "player"],
                    ["üßí –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä", "moder"],
                    ["üßë –ì–µ–π–º-–º–∞—Å—Ç–µ—Ä", "GM"]
                ]
                context.player.role.match(/owner|project_head|support|MGM|Madmin/) && giveRoleKB.push(["üë®‚Äçü¶≥ –ê–¥–º–∏–Ω", "admin"])
                context.player.role.match(/owner|project_head|support|Madmin/) && giveRoleKB.push(["üîùüïπ –°—Ç–∞—Ä—à–∏–π –≥–µ–π–º-–º–∞—Å—Ç–µ—Ä", "MGM"])
                context.player.role.match(/owner|project_head|support/) && giveRoleKB.push(["üîùüêì –°—Ç–∞—Ä—à–∏–π –∞–¥–º–∏–Ω", "Madmin"])
                context.player.role.match(/owner|project_head|support/) && giveRoleKB.push(["üîß –¢–µ—Ö-–ø–æ–¥–¥–µ—Ä–∂–∫–∞", "support"])
                context.player.role.match(/owner/) && giveRoleKB.push(["ü§¥ –ì–ª–∞–≤–∞ –ø—Ä–æ–µ–∫—Ç–∞", "project_head"])
                let role = await InputManager.KeyboardBuilder(context, `‚úÖ –í—ã–±—Ä–∞–Ω –∏–≥—Ä–æ–∫ *id${user.dataValues.id}(${user.dataValues.nick})\n2Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é —Ä–æ–ª—å.`, giveRoleKB, current_keyboard)
                if(!role) return resolve()
                const status = role.match(/player|moder/) ? await Data.GetUserStatus(user.dataValues.id) : "worker"
                user.set({role: role, status: status})
                await user.save()
                if(Data.users[user.dataValues.id])
                {
                    Data.users[user.dataValues.id].status = status
                    Data.users[user.dataValues.id].role = role
                    Data.users[user.dataValues.id].state = tools.StayInStartScreen
                }
                role = NameLibrary.GetRoleName(role)
                await api.SendMessageWithKeyboard(user.dataValues.id, `‚Ñπ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${context.player.GetName()} –Ω–∞–∑–Ω–∞—á–∏–ª –≤–∞—Å –Ω–∞ —Ä–æ–ª—å: ${role}`, tools.GetStartMenuKeyboard(context))
                await context.send(`‚Ñπ –ò–≥—Ä–æ–∫ *id${user.dataValues.id}(${user.dataValues.nick}) –Ω–∞–∑–Ω–∞—á–µ–Ω –Ω–∞ —Ä–æ–ª—å: ${role}`, {keyboard: keyboard.build(current_keyboard)})
                await Data.LoadWorkers()
                return resolve()
            }
            catch (e)
            {
                await api.SendLogs(context, "BuildersAndControlsScripts/ChangeRole", e)
            }
        })
    }

    async AppointLeader(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                const buttons = Data.GetCountryButtons()
                if(buttons.length === 0)
                {
                    await context.send("‚ö† –§—Ä–∞–∫—Ü–∏–∏ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã.")
                    return resolve()
                }
                let country = await InputManager.KeyboardBuilder(context, "1Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–æ", buttons, current_keyboard)
                if(!country) return resolve()
                country = Data.ParseButtonID(country)
                country = Data.countries[country]

                let user = await InputManager.InputUser(context, "2Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", current_keyboard)
                if(!user) return resolve()
                if(user.dataValues.status === "worker")
                {
                    context.send(`üö´ –ù–∞–∑–Ω–∞—á–∞—Ç—å –∏–≥—Ä–æ–∫–æ–≤ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º ‚öô –†–∞–±–æ—Ç–Ω–∏–∫ –Ω–∞ –¥–æ–ª–∂–Ω–æ—Å—Ç—å –ø—Ä–∞–≤–∏—Ç–µ–ª—è –∑–∞–ø—Ä–µ—â–µ–Ω–æ`, {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                let oldCountry = null
                for(let i = 0; i < Data.countries?.length; i++)
                {
                    if(Data.countries[i]?.leaderID === user.dataValues.id)
                    {
                        oldCountry = await Country.findOne({where: {id: Data.countries[i].id}, attributes: ["id"]})
                        await context.send(`‚ö† *id${user.dataValues.id}(${user.dataValues.nick}) —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –ø—Ä–∞–≤–∏—Ç–µ–ª–µ–º!`)
                        break
                    }
                }
                const access = await InputManager.InputBoolean(context, `‚Ñπ –ù–∞–∑–Ω–∞—á–∏—Ç—å –∏–≥—Ä–æ–∫–∞ *id${user.dataValues.id}(${user.dataValues.nick}) –ø—Ä–∞–≤–∏—Ç–µ–ª–µ–º —Ñ—Ä–∞–∫—Ü–∏–∏ ${country.GetName(context.player.platform === "IOS")}?`, current_keyboard)
                if(!access)
                {
                    context.send("–û—Ç–º–µ–Ω–µ–Ω–æ", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                if(oldCountry)
                {
                    oldCountry.set({leaderID: null})
                    await oldCountry.save()
                    Data.countries[oldCountry.dataValues.id].leaderID = null
                    await context.send(`‚ö† –§—Ä–∞–∫—Ü–∏—è ${Data.countries[oldCountry.dataValues.id].GetName(context.player.platform === "IOS")} –æ—Å—Ç–∞–ª–∞—Å—å –±–µ–∑ –ø—Ä–∞–≤–∏—Ç–µ–ª—è.`)
                }
                await Country.update({leaderID: user.dataValues.id}, {where: {id: country.id}})
                Data.countries[country.id].leaderID = user.dataValues.id
                await PlayerStatus.update({citizenship: country.id},{where: {id: user.dataValues.id}})
                await OfficialInfo.destroy({where: {id: user.dataValues.id}})
                const oldLeader = await Player.findOne({where: {id: country.leaderID}, attributes: ["status"]})
                if(oldLeader?.dataValues.status !== "worker")
                {
                    await Player.update({status: "official"}, {where: {id: country.leaderID}})
                    if(Data.users[country.leaderID]) Data.users[country.leaderID].status = "official"
                    await api.SendMessage(country.leaderID, `‚ö† –í—ã –±—ã–ª–∏ —Å–Ω—è—Ç—ã —Å –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ –ø—Ä–∞–≤–∏—Ç–µ–ª—è —Ñ—Ä–∞–∫—Ü–∏–∏ ${country.name}\n\nü™™ –í–∞—à —Å—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ "–ß–∏–Ω–æ–≤–Ω–∏–∫"`)
                }
                if(user.dataValues.status !== "worker")
                {
                    user.set({status: "leader"})
                    await user.save()
                    if(Data.users[user.dataValues.id]) Data.users[user.dataValues.id].status = "leader"
                }
                await api.SendMessage(user.dataValues.id,`‚úÖ –í—ã –±—ã–ª–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –ø—Ä–∞–≤–∏—Ç–µ–ª–µ–º —Ñ—Ä–∞–∫—Ü–∏–∏ ${country.name}\n\nüëë –í–∞—à —Å—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ "–ü—Ä–∞–≤–∏—Ç–µ–ª—å"`)
                await context.send(`‚úÖ *id${user.dataValues.id}(${user.dataValues.nick}) –Ω–∞–∑–Ω–∞—á–µ–Ω –ø—Ä–∞–≤–∏—Ç–µ–ª–µ–º —Ñ—Ä–∞–∫—Ü–∏–∏ ${country.name}`, {keyboard: keyboard.build(current_keyboard)})
                return resolve()
            }
            catch (e)
            {
                await api.SendLogs(context, "BuildersAndControlsScripts/AppointLeader", e)
            }
        })
    }

    async Warnings(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                const kb = [
                    ["‚ö† –°–¥–µ–ª–∞—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "new"],
                    ["üóí –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è", "show"]
                ]
                const action = await InputManager.KeyboardBuilder(context, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", kb, current_keyboard)
                if(!action) return resolve()
                action === "new" && await this.NewWarning(context, current_keyboard)
                action === "show" && await this.ShowListWarnings(context, current_keyboard)
                return resolve()
            }
            catch (e)
            {
                await api.SendLogs(context, "BuildersAndControlsScripts/ShowListWarnings", e)
            }
        })
    }

    async ShowListWarnings(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                const user = await InputManager.InputUser(context, "1Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.", current_keyboard)
                if(!user) return resolve()
                await OutputManager.GetUserWarnings(context.player.id, user.dataValues.id)
                await context.send("–ù–∞–∑–∞–¥", {keyboard: keyboard.build(current_keyboard)})
            }
            catch (e)
            {
                await api.SendLogs(context, "BuildersAndControlsScripts/ShowListWarnings", e)
            }
        })
    }

    async Bans(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                const kb = [
                    ["üö´ –ó–∞–±–∞–Ω–∏—Ç—å –∏–≥—Ä–æ–∫–∞", "new"],
                    ["üóí –ü–æ–∫–∞–∑–∞—Ç—å –±–∞–Ω—ã", "show"]
                ]
                const action = await InputManager.KeyboardBuilder(context, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", kb, current_keyboard)
                if(!action) return resolve()
                action === "new" && await this.NewBan(context, current_keyboard)
                action === "show" && await this.ShowBan(context, current_keyboard)
                return resolve()
            }
            catch (e)
            {
                await api.SendLogs(context, "BuildersAndControlsScripts/ShowListWarnings", e)
            }
        })
    }

    async ShowBan(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                const user = await InputManager.InputUser(context, "1Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.", current_keyboard)
                if(!user) return resolve()
                if(!user.dataValues.isBanned)
                {
                    context.send(`‚Ñπ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å *id${user.dataValues.id}(${user.dataValues.nick}) –Ω–µ –∑–∞–±–∞–Ω–µ–Ω.`, {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                const ban = await Ban.findOne({where: {userID: user.dataValues.id}})
                if(!ban)
                {
                    if (Data.users[user.dataValues.id]) Data.users[user.dataValues.id].isBanned = false
                    user.set({isBanned: false})
                    await user.save()
                    await api.SendMessage(user.dataValues.id, "‚úÖ –í—ã –±—ã–ª–∏ —Ä–∞–∑–±–∞–Ω–µ–Ω—ã.")
                    await context.send(`‚úÖ –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è *id${user.dataValues.id}(${user.dataValues.nick}) –Ω–µ—Ç –±–∞–Ω–∞. –í–∏–¥–∏–º–æ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, —Å–µ–π—á–∞—Å –≤—Å–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ.`)
                    return resolve()
                }
                await context.send(`‚Ñπ –ë–∞–Ω –æ—Ç ${NameLibrary.ParseDateTime(ban.dataValues.createdAt)}:\n–ù–∏–∫: *id${user.dataValues.id}(${user.dataValues.nick})\n–ü—Ä–∏—á–∏–Ω–∞: ${ban.dataValues.reason}\n–ü–æ–¥—Ä–æ–±–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞: ${ban.dataValues.explanation}\n\n‚Ñπ –ï—Å–ª–∏ –≤—ã –æ–±–∂–∞–ª—É–µ—Ç–µ –±–∞–Ω, —Ç–æ –≤–º–µ—Å—Ç–µ —Å –±–∞–Ω–æ–º —É–¥–∞–ª—è—Ç—Å—è –∏ –≤—Å–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è`, {keyboard: keyboard.build([[keyboard.hideCallbackButton()], ban.dataValues.prohibit ? [] : [keyboard.appealCallbackButton({command: "appeal_ban", item: ban.dataValues.id})]]).inline()})
                return resolve()
            }
            catch (e)
            {
                await api.SendLogs(context, "BuildersAndControlsScripts/ShowBan", e)
            }
        })
    }

    async CheatingUserResources(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                const user = await InputManager.InputUser(context, "1Ô∏è‚É£ –ö–æ–º—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞–∫—Ä—É—Ç–∏—Ç—å —Ä–µ—Å—É—Ä—Å?", current_keyboard)
                if(!user) return resolve()
                if(user.dataValues.status === "worker")
                {
                    context.send("üö´ –ù–∞–∫—Ä—É—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ —Ä–∞–±–æ—Ç–Ω–∏–∫–∞–º –∑–∞–ø—Ä–µ—â–µ–Ω–∞", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                const resources = [[keyboard.moneyButton],
                    [keyboard.wheatButton, keyboard.woodButton, keyboard.stoneButton],
                    [keyboard.ironButton, keyboard.copperButton, keyboard.silverButton],
                    [keyboard.cancelButton]]
                const resource = await InputManager.ChooseButton(context, `2Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–∫–æ–π —Ä–µ—Å—É—Ä—Å –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞–∫—Ä—É—Ç–∏—Ç—å –∏–≥—Ä–æ–∫—É *id${user.dataValues.id}(${user.dataValues.nick}):`, resources)
                if (!resource) return resolve()
                if(resource.match(/cancel/))
                {
                    context.send("üö´ –ü–µ—Ä–µ–≤–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                let count = await InputManager.InputInteger(context, "3Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ", current_keyboard)
                if(count === null) return resolve()

                const accept = await InputManager.InputBoolean(context, `4Ô∏è‚É£ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥:\n–ö–æ–º—É: *id${user.dataValues.id}(${user.dataValues.nick})\n–†–µ—Å—É—Ä—Å: ${NameLibrary.GetResourceName(resource)}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${count} —à—Ç\n\n–í–µ—Ä–Ω–æ?`, current_keyboard)
                if(!accept)
                {
                    context.send("üö´ –ü–µ—Ä–µ–≤–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }

                let objIN = {}
                objIN[resource] = count
                await Data.AddPlayerResources(user.dataValues.id, objIN)
                await api.SendMessage(user.dataValues.id, `‚Ñπ –í–∞–º –ø–æ—Å—Ç—É–ø–∏–ª –ø–µ—Ä–µ–≤–æ–¥:\n${NameLibrary.GetResourceName(resource)}: ${count}`)
                await context.send("‚úÖ –£—Å–ø–µ—à–Ω–æ", {keyboard: keyboard.build(current_keyboard)})
                return resolve()
            }
            catch (e)
            {
                await api.SendLogs(context, "BuildersAndControlsScripts/CheatingUserResources", e)
            }
        })
    }

    async CheatingCityResources(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                let cityID = await InputManager.KeyboardBuilder(context, "1Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥, –∫–æ—Ç–æ—Ä–æ–º—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –Ω–∞–∫—Ä—É—Ç–∏—Ç—å —Ä–µ—Å—É—Ä—Å—ã:", Data.GetCityButtons(), current_keyboard)
                if(!cityID) return resolve()
                cityID = Data.ParseButtonID(cityID)
                const resources = [[keyboard.moneyButton],
                    [keyboard.wheatButton, keyboard.woodButton, keyboard.stoneButton],
                    [keyboard.ironButton, keyboard.copperButton, keyboard.silverButton],
                    [keyboard.cancelButton]]
                const resource = await InputManager.ChooseButton(context, "2Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–∫–æ–π —Ä–µ—Å—É—Ä—Å –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞–∫—Ä—É—Ç–∏—Ç—å", resources)
                if (resource === "cancel")
                {
                    await context.send("üö´ –ü–µ—Ä–µ–≤–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                let count = await InputManager.InputInteger(context, "3Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ", current_keyboard)
                if(count === null) return resolve()

                const accept = await InputManager.InputBoolean(context, `4Ô∏è‚É£ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥:\n–ö–æ–º—É: ${Data.GetCityName(cityID)}\n–†–µ—Å—É—Ä—Å: ${NameLibrary.GetResourceName(resource)}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${count} —à—Ç\n\n–í–µ—Ä–Ω–æ?`, current_keyboard)
                if(!accept)
                {
                    await context.send("üö´ –ü–µ—Ä–µ–≤–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }

                let objIN = {}
                objIN[resource] = count
                await Data.AddCityResources(cityID, objIN)
                await api.SendMessage(Data.cities[cityID].leaderID, `‚úÖ –ü–æ—Å—Ç—É–ø–∏–ª –ø–µ—Ä–µ–≤–æ–¥ –≤ –±—é–¥–∂–µ—Ç –≥–æ—Ä–æ–¥–∞ ${Data.cities[cityID].name} –≤ —Ä–∞–∑–º–µ—Ä–µ:\n${NameLibrary.GetResourceName(resource)}: ${count}`)
                await context.send("‚úÖ –£—Å–ø–µ—à–Ω–æ", {keyboard: keyboard.build(current_keyboard)})
                return resolve()
            }
            catch (e)
            {
                await api.SendLogs(context, "BuildersAndControlsScripts/CheatingCityResources", e)
            }
        })
    }

    async CheatingCountryResources(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                let country = await InputManager.KeyboardBuilder(context, "1Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ —Ñ—Ä–∞–∫—Ü–∏—é", Data.GetCountryButtons(), current_keyboard)
                if(!country) return resolve()
                country = Data.ParseButtonID(country)
                country = Data.countries[country]
                const resources = [[keyboard.moneyButton, keyboard.diamondButton],
                    [keyboard.wheatButton, keyboard.woodButton, keyboard.stoneButton],
                    [keyboard.ironButton, keyboard.copperButton, keyboard.silverButton],
                    [keyboard.cancelButton]]
                const resource = await InputManager.ChooseButton(context, `2Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–∫–æ–π —Ä–µ—Å—É—Ä—Å –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –≤ –±—é–¥–∂–µ—Ç —Ñ—Ä–∞–∫—Ü–∏–∏ ${country.GetName(context.player.platform === "IOS")}?`, resources)
                if (resource === "cancel")
                {
                    context.send("üö´ –ü–µ—Ä–µ–≤–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                let count = await InputManager.InputInteger(context, `3Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ`, current_keyboard)
                if(count === null) return resolve()
                const accept = await InputManager.InputBoolean(context, `4Ô∏è‚É£ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥:\n–ö–æ–º—É: –§—Ä–∞–∫—Ü–∏—è ${country.GetName(context.player.platform === "IOS")}\n–†–µ—Å—É—Ä—Å: ${NameLibrary.GetResourceName(resource)}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${count} —à—Ç\n\n–í–µ—Ä–Ω–æ?`, current_keyboard)
                if(!accept)
                {
                    context.send("üö´ –ü–µ—Ä–µ–≤–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                let objIN = {}
                objIN[resource] = count
                await Data.AddCountryResources(country.id, objIN)
                await api.SendMessage(country.leaderID, `‚Ñπ –ü–æ—Å—Ç—É–ø–∏–ª –ø–µ—Ä–µ–≤–æ–¥ –≤ –±—é–¥–∂–µ—Ç —Ñ—Ä–∞–∫—Ü–∏–∏ ${country.GetName(context.player.platform === "IOS")} –≤ —Ä–∞–∑–º–µ—Ä–µ:\n${NameLibrary.GetResourceName(resource)}: ${count}`)
                await context.send("‚úÖ –£—Å–ø–µ—à–Ω–æ", {keyboard: keyboard.build(current_keyboard)})
            }
            catch (e)
            {
                await api.SendLogs(context, "BuildersAndControlsScripts/CheatingCountryResources", e)
            }
        })
    }

    async CreateLastWill(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                const user = await InputManager.InputUser(context, "1Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É –∑–∞–≤–µ—â–∞–µ—Ç–µ –≤—Å–µ —Å–≤–æ–µ –∏–º—É—â–µ—Å—Ç–≤–æ", current_keyboard)
                if(!user) return resolve()
                if(user.dataValues.id === context.player.id)
                {
                    context.send("‚Ñπ –£–∫–∞–∑—ã–≤–∞—Ç—å —Å–µ–±—è –≤ –∑–∞–≤–µ—â–∞–Ω–∏–∏ –∑–∞–ø—Ä–µ—â–µ–Ω–æ.")
                    return resolve()
                }

                const lastWillText = await InputManager.InputString(context, "2Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–≤–µ—â–∞–Ω–∏—è. –≠—Ç–æ—Ç —Ç–µ–∫—Å—Ç –±—É–¥–µ—Ç –≤–∏–¥–µ–Ω —Ç–æ–ª—å–∫–æ –≤–∞–º –∏ –Ω–∞—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—é –ø–æ—Å–ª–µ –≤–∞—à–µ–π —Å–º–µ—Ä—Ç–∏. (–¥–æ 1000 —Å–∏–º–≤–æ–ª–æ–≤)", current_keyboard, 0, 1000)
                if (!lastWillText)
                {
                    await context.send("üö´ –û—Ç–º–µ–Ω–∞", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                const lastWill = await LastWills.count({where: {userID: context.player.id}})
                if(lastWill !== 0)
                {
                    await LastWills.update({text: lastWillText, successorID: user.dataValues.id}, {where: {userID: context.player.id}})
                }
                else
                {
                    await LastWills.create({
                        userID: context.player.id,
                        text: lastWillText,
                        successorID: user.dataValues.id
                    })
                }
                current_keyboard[0][2] = keyboard.deleteLastWillButton
                await context.send("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –∑–∞–≤–µ—â–∞–Ω–∏–µ.", {keyboard: keyboard.build(current_keyboard)})
                await api.SendMessage(user.dataValues.id, `‚úÖ –ò–≥—Ä–æ–∫ ${context.player.GetName()} –¥–æ–±–∞–≤–∏–ª –≤–∞—Å –≤ —Å–≤–æ—ë –∑–∞–≤–µ—â–∞–Ω–∏–µ.`)
            }
            catch (e)
            {
                await api.SendLogs(context, "BuildersAndControlsScripts/CreateLastWill", e)
            }
        })
    }

    async DeleteLastWill(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                const lastWill = await LastWills.findOne({where: {userID: context.player.id}})
                if(!lastWill) return resolve()
                await context.send(`‚Ñπ *id${context.player.id}(–í–∞—à–µ) –∑–∞–≤–µ—â–∞–Ω–∏–µ:\n–ù–∞—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å: ${await NameLibrary.GetPlayerNick(lastWill.dataValues.successorID)}\n–¢–µ–∫—Å—Ç:${lastWill.dataValues.text}`)
                const success = await InputManager.InputBoolean(context, "‚ùì –í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–≤–æ–µ –∑–∞–≤–µ—â–∞–Ω–∏–µ?")
                if(!success) return resolve()

                await LastWills.destroy({where: {userID: context.player.id}})
                current_keyboard[0][2] = keyboard.createLastWillButton
                await context.send("‚úÖ –ó–∞–≤–µ—â–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ.", {keyboard: keyboard.build(current_keyboard)})
                await api.SendMessage(lastWill.dataValues.successorID, `‚Ñπ –ò–≥—Ä–æ–∫ ${context.player.GetName()} —É–¥–∞–ª–∏–ª —Å–≤–æ—ë –∑–∞–≤–µ—â–∞–Ω–∏–µ.`)
            }
            catch (e)
            {
                await api.SendLogs(context, "BuildersAndControlsScripts/DeleteLastWill", e)
            }
        })
    }

    async Relaxing(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                if(context.player.fatigue === 100)
                {
                    await context.send("üí™ –í—ã –ø–æ–ª–Ω—ã —Å–∏–ª")
                    return resolve()
                }
                let result = await CrossStates.Relaxing(context)
                if(result.sleep)
                {
                    await context.send(`üí§ –í—ã –ø–µ—Ä–µ—à–ª–∏ –≤ —Ä–µ–∂–∏–º –æ—Ç–¥—ã—Ö–∞, –¥–æ –ø–æ–ª–Ω–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–∏–ª ${NameLibrary.ParseFutureTime(result.time)}`, {keyboard: keyboard.build(current_keyboard(context))})
                }
                else
                {
                    await context.send(`üí™ –í–∞—à —É—Ä–æ–≤–µ–Ω—å —ç–Ω–µ—Ä–≥–∏–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–æ ${result.fatigue}%`, {keyboard: keyboard.build(current_keyboard(context))})
                }
                return resolve()
            }
            catch (e)
            {
                await api.SendLogs(context, "BuildersAndControlsScripts/Wakeup", e)
            }
        })
    }

    async ChangeCityName(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                let name = await InputManager.InputString(context, "1Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ (–æ—Ç 2 –¥–æ 100 –±—É–∫–≤)", current_keyboard, 2, 100)
                if(!name) return resolve()
                let city = await City.findOne({where: {name: name}})
                while(city)
                {
                    name = await InputManager.InputString(context, "‚Ñπ –ì–æ—Ä–æ–¥ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –µ—â–µ —Ä–∞–∑ (–æ—Ç 2 –¥–æ 100 –±—É–∫–≤)", current_keyboard, 2, 100)
                    if(!name) return resolve()
                    city = await City.findOne({where: {name: name}})
                }
                const accept = await InputManager.InputBoolean(context, `‚ùì –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å –≥–æ—Ä–æ–¥ \"${context.city.name}\" –≤ "${name}"?`, current_keyboard)
                if(!accept)
                {
                    await context.send("üö´ –û—Ç–º–µ–Ω–∞", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                await City.update({name: name}, {where: {id: context.city.id}})
                context.city.name = name
                await context.send("‚úÖ –ì–æ—Ä–æ–¥ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω.", {keyboard: keyboard.build(current_keyboard)})
            }
            catch (e)
            {
                await api.SendLogs(context, "BuildersAndControlsScripts/ChangeCityName", e)
            }
        })
    }

    async ChangeCityDescription(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                let description = await InputManager.InputString(context, `‚Ñπ –°—Ç–∞—Ä–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ: ${context.city.description}\n\n1Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ (–æ—Ç 1 –¥–æ 1000 —Å–∏–º–≤–æ–ª–æ–≤)`, current_keyboard, 2, 100)
                if(!description) return resolve()
                const accept = await InputManager.InputBoolean(context, "‚ùì –ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞?", current_keyboard)
                if(!accept)
                {
                    await context.send("üö´ –û—Ç–º–µ–Ω–∞", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                await City.update({description: description}, {where: {id: context.city.id}})
                context.city.description = description
                await context.send("‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –∏–∑–º–µ–Ω–µ–Ω–æ.", {keyboard: keyboard.build(current_keyboard)})
            }
            catch (e)
            {
                await api.SendLogs(context, "BuildersAndControlsScripts/ChangeCityDescription", e)
            }
        })
    }

    async ChangeCityPhoto(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                if(context.city.photoURL)
                {
                    await context.send("‚Ñπ –í–æ—Ç —Å—Ç–∞—Ä–æ–µ —Ñ–æ—Ç–æ", {attachment: context.city.photoURL})
                }
                else
                {
                    await context.send("‚Ñπ –£ –≥–æ—Ä–æ–¥–∞ –Ω–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏.")
                }
                let photo = await InputManager.InputPhoto(context, "1Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ. (–û–Ω–æ –±—É–¥–µ—Ç –≤—Å—Ç—Ä–µ—á–∞—Ç—å –ª—é–¥–µ–π, –∫–æ–≥–¥–∞ –æ–Ω–∏ –±—É–¥—É—Ç –∑–∞—Ö–æ–¥–∏—Ç—å –≤ –≥–æ—Ä–æ–¥)", current_keyboard)
                if(!photo) return resolve()
                const accept = await InputManager.InputBoolean(context, "‚ùì –ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ –≥–æ—Ä–æ–¥–∞?", current_keyboard)
                if(!accept)
                {
                    await context.send("üö´ –û—Ç–º–µ–Ω–∞", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                await City.update({photoURL: photo}, {where: {id: context.city.id}})
                context.city.photoURL = photo
                await context.send("‚úÖ –§–æ—Ç–æ –≥–æ—Ä–æ–¥–∞ –∏–∑–º–µ–Ω–µ–Ω–æ.", {keyboard: keyboard.build(current_keyboard)})
            }
            catch (e)
            {
                await api.SendLogs(context, "BuildersAndControlsScripts/ChangeCityPhoto", e)
            }
        })
    }

    async CityTransaction(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                let kb = [
                    ["üîÄ –ò–≥—Ä–æ–∫—É", "user"],
                    ["üîÄ –ì–æ—Ä–æ–¥—É", "city"],
                    ["üîÄ –§—Ä–∞–∫—Ü–∏–∏", "country"]
                ]
                const action = await InputManager.KeyboardBuilder(context, "1Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ, –∫—É–¥–∞ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ—Å—É—Ä—Å—ã", kb, current_keyboard)
                if(!action) return resolve()
                action === "user" && await this.CityToUserTransaction(context, current_keyboard)
                action === "city" && await this.CityToCityTransaction(context, current_keyboard)
                action === "country" && await this.CityToCountryTransaction(context, current_keyboard)
                return resolve()
            }
            catch (e)
            {
                await api.SendLogs(context, "BuildersAndControlsScripts/CityToCountryTransaction", e)
            }
        })
    }

    async CityToUserTransaction(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                let user = await InputManager.InputUser(context, "2Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä–æ–∫–∞", current_keyboard)
                if(!user) return resolve()
                user = user.dataValues
                const resources = [[keyboard.moneyButton, keyboard.diamondButton],
                    [keyboard.wheatButton, keyboard.woodButton, keyboard.stoneButton],
                    [keyboard.ironButton, keyboard.copperButton, keyboard.silverButton],
                    [keyboard.cancelButton]]
                const resource = await InputManager.ChooseButton(context, `3Ô∏è‚É£ ${Data.cities[context.cityID].GetResources()}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–∫–æ–π —Ä–µ—Å—É—Ä—Å –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –∏–≥—Ä–æ–∫—É *id${user.id}(${user.nick})`, resources)
                if (resource === "cancel")
                {
                    context.send("üö´ –ü–µ—Ä–µ–≤–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                if(Data.cities[context.cityID][resource] <= 0)
                {
                    context.send("‚ö† –í –±—é–¥–∂–µ—Ç–µ –Ω–µ—Ç —ç—Ç–æ–≥–æ —Ä–µ—Å—É—Ä—Å–∞.", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                let count
                if(Data.cities[context.cityID][resource] > 1)
                {
                    count = await InputManager.InputInteger(context, `4Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (–æ—Ç 1 –¥–æ ${Data.cities[context.cityID][resource]} —à—Ç)`, current_keyboard, 1, Data.cities[context.cityID][resource])
                    if(count === null) return resolve()
                }
                else
                {
                    count = 1
                }
                const accept = await InputManager.InputBoolean(context, `5Ô∏è‚É£ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥:\n\n–ö–æ–º—É: –∏–≥—Ä–æ–∫—É *id${user.id}(${user.nick})\n–†–µ—Å—É—Ä—Å: ${NameLibrary.GetResourceName(resource)}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${count} —à—Ç\n\n–í–µ—Ä–Ω–æ?`, current_keyboard)
                if(!accept)
                {
                    context.send("üö´ –ü–µ—Ä–µ–≤–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }

                let objIN = {}
                let objOUT = {}
                objIN[resource] = count * -1
                objOUT[resource] = count

                await Data.AddCityResources(context.cityID, objIN)
                await Data.AddPlayerResources(user.id, objOUT)
                await api.SendMessage(user.id, `‚úÖ –ò–∑ –±—é–¥–∂–µ—Ç–∞ –≥–æ—Ä–æ–¥–∞ ${Data.cities[context.cityID].name} –≤ –≤–∞—à –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø–æ—Å—Ç—É–ø–∏–ª –ø–µ—Ä–µ–≤–æ–¥ –≤ —Ä–∞–∑–º–µ—Ä–µ:\n${NameLibrary.GetPrice(objOUT)}`)
                await context.send("‚úÖ –£—Å–ø–µ—à–Ω–æ", {keyboard: keyboard.build(current_keyboard)})
            }
            catch (e)
            {
                await api.SendLogs(context, "BuildersAndControlsScripts/CityToCountryTransaction", e)
            }
        })
    }

    async CityToCityTransaction(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                const buttons = []
                Data.cities.forEach((key) => {
                    if(key?.countryID === Data.cities[context.cityID].countryID && key?.id !== Data.cities[context.cityID].id)
                    {
                        buttons.push([key.name, "ID" + key.id])
                    }
                })
                if(buttons.length === 0)
                {
                    context.send(`‚Ñπ –ì–æ—Ä–æ–¥ ${Data.cities[context.cityID].name} –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –≤ —Ñ—Ä–∞–∫—Ü–∏–∏ ${Data.GetCountryForCity(context.cityID)?.GetName(context.player.platform === "IOS")}`, {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                let city = await InputManager.KeyboardBuilder(context, "1Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥", buttons, current_keyboard)
                if(!city) return resolve()
                city = Data.ParseButtonID(city)
                city = Data.cities[city]
                const resources = [[keyboard.moneyButton, keyboard.diamondButton],
                    [keyboard.wheatButton, keyboard.woodButton, keyboard.stoneButton],
                    [keyboard.ironButton, keyboard.copperButton, keyboard.silverButton],
                    [keyboard.cancelButton]]
                const resource = await InputManager.ChooseButton(context, `2Ô∏è‚É£ ${Data.cities[context.cityID].GetResources()}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–∫–æ–π —Ä–µ—Å—É—Ä—Å –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –≤ –±—é–¥–∂–µ—Ç –≥–æ—Ä–æ–¥–∞ ${city.name}`, resources)
                if (resource === "cancel")
                {
                    context.send("üö´ –ü–µ—Ä–µ–≤–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                if(Data.cities[context.cityID][resource] <= 0)
                {
                    context.send("‚ö† –í –±—é–¥–∂–µ—Ç–µ –Ω–µ—Ç —ç—Ç–æ–≥–æ —Ä–µ—Å—É—Ä—Å–∞.", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                let count
                if(Data.cities[context.cityID][resource] > 1)
                {
                    count = await InputManager.InputInteger(context, `3Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (–æ—Ç 1 –¥–æ ${Data.cities[context.cityID][resource]} —à—Ç)`, current_keyboard, 1, Data.cities[context.cityID][resource])
                    if(count === null) return resolve()
                }
                else
                {
                    count = 1
                }
                const accept = await InputManager.InputBoolean(context, `–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥:\n\n–ö–æ–º—É: –≥–æ—Ä–æ–¥ ${city.name}\n–†–µ—Å—É—Ä—Å: ${NameLibrary.GetResourceName(resource)}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${count} —à—Ç\n\n–í–µ—Ä–Ω–æ?`, current_keyboard)
                if(!accept)
                {
                    context.send("üö´ –ü–µ—Ä–µ–≤–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }

                let objIN = {}
                let objOUT = {}
                objIN[resource] = count * -1
                objOUT[resource] = count

                await Data.AddCityResources(context.cityID, objIN)
                await Data.AddCityResources(city.id, objOUT)
                await api.SendMessage(city.leaderID, `‚úÖ –ò–∑ –±—é–¥–∂–µ—Ç–∞ –≥–æ—Ä–æ–¥–∞ ${Data.cities[context.cityID].name} –≤ –±—é–¥–∂–µ—Ç –≥–æ—Ä–æ–¥–∞ ${city.name} –ø–æ—Å—Ç—É–ø–∏–ª –ø–µ—Ä–µ–≤–æ–¥ –≤ —Ä–∞–∑–º–µ—Ä–µ:\n${NameLibrary.GetPrice(objOUT)}`)
                await context.send("‚úÖ –£—Å–ø–µ—à–Ω–æ", {keyboard: keyboard.build(current_keyboard)})
            }
            catch (e)
            {
                await api.SendLogs(context, "BuildersAndControlsScripts/CityToCountryTransaction", e)
            }
        })
    }

    async CityToCountryTransaction(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                const resources = [[keyboard.moneyButton, keyboard.diamondButton],
                    [keyboard.wheatButton, keyboard.woodButton, keyboard.stoneButton],
                    [keyboard.ironButton, keyboard.copperButton, keyboard.silverButton],
                    [keyboard.cancelButton]]
                const resource = await InputManager.ChooseButton(context, `1Ô∏è‚É£ ${Data.cities[context.cityID].GetResources()}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–∫–æ–π —Ä–µ—Å—É—Ä—Å –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –≤ –±—é–¥–∂–µ—Ç —Ñ—Ä–∞–∫—Ü–∏–∏ ${Data.GetCountryName(Data.GetCountryForCity(context.cityID).id)}`, resources)
                if (resource === "cancel")
                {
                    context.send("üö´ –ü–µ—Ä–µ–≤–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                if(Data.cities[context.cityID][resource] <= 0)
                {
                    context.send("‚ö† –£ –≤–∞—Å –Ω–µ—Ç —ç—Ç–æ–≥–æ —Ä–µ—Å—É—Ä—Å–∞.", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                let count
                if(Data.cities[context.cityID][resource] > 1)
                {
                    count = await InputManager.InputInteger(context, `2Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (–æ—Ç 1 –¥–æ ${Data.cities[context.cityID][resource]} —à—Ç)`, current_keyboard, 1, Data.cities[context.cityID][resource])
                    if(count === null) return resolve()
                }
                else
                {
                    count = 1
                }
                const accept = await InputManager.InputBoolean(context, `3Ô∏è‚É£ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥:\n\n–ö–æ–º—É: —Ñ—Ä–∞–∫—Ü–∏—è ${Data.GetCountryForCity(context.cityID).GetName(context.player.platform === "IOS")}\n–†–µ—Å—É—Ä—Å: ${NameLibrary.GetResourceName(resource)}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${count} —à—Ç\n\n–í–µ—Ä–Ω–æ?`, current_keyboard)
                if(!accept)
                {
                    context.send("üö´ –ü–µ—Ä–µ–≤–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }

                let objIN = {}
                let objOUT = {}
                objIN[resource] = count * -1
                objOUT[resource] = count

                await Data.AddCityResources(context.cityID, objIN)
                await Data.AddCountryResources(Data.GetCountryForCity(context.cityID).id, objOUT)
                await api.SendMessage(Data.GetCountryForCity(context.cityID).leaderID, `‚úÖ –ò–∑ –±—é–¥–∂–µ—Ç–∞ –≥–æ—Ä–æ–¥–∞ ${Data.cities[context.cityID].name} –≤ –±—é–¥–∂–µ—Ç —Ñ—Ä–∞–∫—Ü–∏–∏ ${Data.GetCountryForCity(context.cityID).GetName(context.player.platform === "IOS")} –ø–æ—Å—Ç—É–ø–∏–ª –ø–µ—Ä–µ–≤–æ–¥ –≤ —Ä–∞–∑–º–µ—Ä–µ:\n${NameLibrary.GetPrice(objOUT)}`)
                await context.send("‚úÖ –£—Å–ø–µ—à–Ω–æ", {keyboard: keyboard.build(current_keyboard)})
            }
            catch (e)
            {
                await api.SendLogs(context, "BuildersAndControlsScripts/CityToCountryTransaction", e)
            }
        })
    }

    async DeleteCityBuilding(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                let request = "‚Ñπ –ü–æ—Å—Ç—Ä–æ–π–∫–∏ –≤ –≥–æ—Ä–æ–¥–µ:\n\n"
                const buildingButtons = []
                if(!Data.buildings[context.cityID])
                {
                    await context.send("‚õ∫ –í –≥–æ—Ä–æ–¥–µ –Ω–µ—Ç –ø–æ—Å—Ç—Ä–æ–µ–∫", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                for(let i = 0; i < Data.buildings[context.cityID].length; i++)
                {
                    request += (i+1) + ": " + Data.buildings[context.cityID][i].GetType() + " \"" + Data.buildings[context.cityID][i].name + "\" " + Data.buildings[context.cityID][i].level + " —É—Ä\n"
                    if(Data.buildings[context.player.location][i].type !== "building_of_house")
                    {
                        buildingButtons.push([Data.buildings[context.cityID][i].GetEmoji() + Data.buildings[context.cityID][i].name, "ID" + Data.buildings[context.cityID][i].id])
                    }
                }
                if(buildingButtons.length === 0)
                {
                    await context.send(request + "\nüèò –í –≥–æ—Ä–æ–¥–µ –Ω–µ—Ç –ø–æ—Å—Ç—Ä–æ–µ–∫, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –º–æ–∂–µ—Ç–µ —Å–Ω–µ—Å—Ç–∏.", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                let buildingID = await InputManager.KeyboardBuilder(context, request + "\n–í—ã–±–µ—Ä–∏—Ç–µ –∑–¥–∞–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —Å–Ω–µ—Å—Ç–∏.\n‚ö† –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Ä–∞—Å–ø–æ—Ä—è–∂–∞—Ç—å—Å—è –¥–æ–º–∞–º–∏ –∏–≥—Ä–æ–∫–æ–≤.", buildingButtons, current_keyboard)
                if(!buildingID) return resolve()
                buildingID = Data.ParseButtonID(buildingID)

                const accept = await InputManager.InputBoolean(context, `‚Ñπ –°—Ç–æ–∏–º–æ—Å—Ç—å —Å–Ω–æ—Å–∞ –∑–¥–∞–Ω–∏—è:\n${NameLibrary.GetPrice(Prices["delete_building"])}\n–°–µ–π—á–∞—Å –≤ –±—é–¥–∂–µ—Ç–µ ${Data.cities[context.cityID].GetResources()} –º–æ–Ω–µ—Ç.\n\n‚ö† –í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ–¥–∏—Ç–µ —Å–Ω–µ—Å—Ç–∏ —ç—Ç–æ –∑–¥–∞–Ω–∏–µ?`)
                if (!accept) return resolve()
                if(!Data.cities[context.cityID].CanPay(Prices["delete_building"]))
                {
                    await context.send("‚ö† –í –±—é–¥–∂–µ—Ç–µ –≥–æ—Ä–æ–¥–∞ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç —Ä–µ—Å—É—Ä—Å–æ–≤!")
                    return resolve()
                }
                await Data.AddCityResources(context.cityID, Prices["delete_building"])
                await Buildings.destroy({where: {id: buildingID}})
                Data.cities[context.cityID].buildingsScore = Math.max(0, Data.cities[context.cityID].buildingsScore - 1)
                await City.update({buildingsScore: Data.cities[context.cityID].buildingsScore}, {where: {id: context.cityID}})
                for(let i = 0; i < Data.buildings[context.cityID].length; i++)
                {
                    if(Data.buildings[context.cityID][i]?.ownerType === "user" && Data.buildings[context.cityID][i]?.id === buildingID)
                    {
                        await api.SendMessage(Data.buildings[context.cityID][i].ownerID, `‚ö† –ì–ª–∞–≤–∞ –≥–æ—Ä–æ–¥–∞ ${Data.cities[context.cityID].name} —Ä–∞—Å–ø–æ—Ä—è–¥–∏–ª—Å—è —Å–Ω–µ—Å—Ç–∏ –≤–∞—à—É –ø–æ—Å—Ç—Ä–æ–π–∫—É ${Data.buildings[context.cityID][i].GetType()} \"${Data.buildings[context.cityID][i].name}\"`)
                        break
                    }
                }
                await Data.LoadBuildings()
                await context.send("‚úÖ –ó–¥–∞–Ω–∏–µ —Å–Ω–µ—Å–µ–Ω–æ.", {keyboard: keyboard.build(current_keyboard)})
            }
            catch (e)
            {
                await api.SendLogs(context, "BuildersAndControlsScripts/DeleteCityBuilding", e)
            }
        })
    }

    async CreateCityBuilding(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                const country = Data.GetCountryForCity(context.cityID)
                const buildingButtons = [
                    ["‚öî –ö–∞–∑–∞—Ä–º–∞", "barracks"],
                    ["üõü –ü–æ—Ä—Ç", "port"],
                    ["‚úù –•—Ä–∞–º", "church"],
                    ["üè¶ –ë–∞–Ω–∫", "bank"],
                    ["üóø –ü–∞–º—è—Ç–Ω–∏–∫", "monument"]
                ]
                country.resources.match(/wheat/) && buildingButtons.push(["üåæ –°–µ–ª—å—Å–∫–æ–µ —Ö–æ–∑—è–π—Å—Ç–≤–æ", "wheat"])
                country.resources.match(/stone/) && buildingButtons.push(["ü™® –ö–∞–º–µ–Ω–æ–ª–æ–º–Ω—è", "stone"])
                country.resources.match(/wood/) && buildingButtons.push(["ü™µ –õ–µ—Å–æ–∑–∞–≥–æ—Ç–æ–≤–∫–∏", "wood"])
                country.resources.match(/iron/) && buildingButtons.push(["üåë –ñ–µ–ª–µ–∑–Ω—ã–π —Ä—É–¥–Ω–∏–∫", "iron"])
                country.resources.match(/silver/) && buildingButtons.push(["ü•à –°–µ—Ä–µ–±—Ä—è–Ω—ã–π —Ä—É–¥–Ω–∏–∫", "silver"])

                let request = "1Ô∏è‚É£ –¶–µ–Ω—ã –Ω–∞ –ø–æ—Å—Ç—Ä–æ–π–∫–∏:\n\n"
                request += Data.cities[context.cityID].GetResources() + "\n\n"
                buildingButtons.forEach(key => {
                    request += key[0] + ":\n" + NameLibrary.GetPrice(Prices["new_" + key[1]]) + "\n"
                })
                const building = await InputManager.KeyboardBuilder(context, request + "\n–ö–∞–∫—É—é –ø–æ—Å—Ç—Ä–æ–π–∫—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤–æ–∑–≤–µ—Å—Ç–∏?\n‚Ñπ –°–µ–π—á–∞—Å –≤ –≥–æ—Ä–æ–¥–µ " + Data.cities[context.cityID].buildingsScore + "/" + Data.cities[context.cityID].maxBuildings + " –ø–æ—Å—Ç—Ä–æ–µ–∫", buildingButtons, current_keyboard)
                if(!building) return resolve()
                if(Data.cities[context.cityID].buildingsScore >= Data.cities[context.cityID].maxBuildings && !building.match(/monument|barracks|port|church/))
                {
                    await context.send("‚ö† –õ–∏–º–∏—Ç –Ω–∞ –ø–æ—Å—Ç—Ä–æ–π–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω " + Data.cities[context.cityID].buildingsScore + "/" + Data.cities[context.cityID].maxBuildings + "\n\n–ß—Ç–æ–±—ã –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–æ–µ –∑–¥–∞–Ω–∏–µ, —Ç—Ä–µ–±—É–µ—Ç—Å—è —Ä–∞—Å—à–∏—Ä–∏—Ç—å –≥–æ—Ä–æ–¥ –∏–ª–∏ —Å–Ω–µ—Å—Ç–∏ –∫–∞–∫–æ–µ-—Ç–æ –∏–∑ –Ω–∞—Ö–æ–¥—è—â–∏—Ö—Å—è –≤ –≥–æ—Ä–æ–¥–µ.", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                if(!Data.cities[context.cityID].CanPay(Prices["new_" + building]))
                {
                    await context.send("‚ö† –í –±—é–¥–∂–µ—Ç–µ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç —Ä–µ—Å—É—Ä—Å–æ–≤.", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                if(building.match(/port|barracks/))
                {
                    for(let i = 0; i < Data.cities.length; i++)
                    {
                        if(Data.cities[i])
                        {
                            if(Data.cities[i].countryID === Data.cities[context.cityID].countryID)
                            {
                                for(let j = 0; j < Data.buildings[Data.cities[i].id]?.length; j++)
                                {
                                    if(Data.buildings[Data.cities[i].id][j]?.type === "building_of_" + building)
                                    {
                                        const country = Data.GetCountryForCity(context.cityID)
                                        await context.send(`‚ö† –í —Ñ—Ä–∞–∫—Ü–∏–∏ *public${country.groupID}(${country.name}) —É–∂–µ –∏–º–µ–µ—Ç—Å—è ${NameLibrary.GetBuildingType("building_of_" + building)}`, {keyboard: keyboard.build(current_keyboard)})
                                        return resolve()
                                    }
                                }
                            }
                        }
                    }
                }
                const name = await InputManager.InputString(context, "2Ô∏è‚É£ –ù–∞–∑–æ–≤–∏—Ç–µ –ø–æ—Å—Ç—Ä–æ–π–∫—É. (–æ—Ç 1 –¥–æ 35 —Å–∏–º–≤–æ–ª–æ–≤)", current_keyboard, 1, 35)
                if(!name) return resolve()
                const description = await InputManager.InputString(context, "3Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –ø–æ—Å—Ç—Ä–æ–π–∫–∏ (–Ω–∞–∂–º–∏—Ç–µ \"–û—Ç–º–µ–Ω–∞\" —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –±–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è)", current_keyboard, 1)
                await Data.AddCityResources(context.cityID, Prices["new_" + building])
                await Buildings.create({
                    cityID: context.cityID,
                    name: name,
                    description: description,
                    type: "building_of_" + building,
                    ownerID: 0,
                    ownerType: "city",
                    level: 1,
                    freezing: false
                })
                await Data.ResetBuildings()
                if(!building.match(/monument|barracks|port|church/))
                {
                    Data.cities[context.cityID].buildingsScore++
                    await City.update({buildingsScore: Data.cities[context.cityID].buildingsScore}, {where: {id: context.cityID}})
                }
                await context.send("‚úÖ –ü–æ—Å—Ç—Ä–æ–π–∫–∞ –≤–æ–∑–≤–µ–¥–µ–Ω–∞.", {keyboard: keyboard.build(current_keyboard)})
            }
            catch (e)
            {
                await api.SendLogs(context, "BuildersAndControlsScripts/CreateCityBuilding", e)
            }
        })
    }

    async UpgradeCityBuilding(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                if(!Data.buildings[context.cityID])
                {
                    await context.send("‚õ∫ –í –≥–æ—Ä–æ–¥–µ –Ω–µ—Ç –ø–æ—Å—Ç—Ä–æ–µ–∫", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                let request = "üè¢ –ì–æ—Ä–æ–¥—Å–∫–∏–µ –ø–æ—Å—Ç—Ä–æ–π–∫–∏:\n"
                const buildingButtons = []
                for(let i = 0; i < Data.buildings[context.cityID].length; i++)
                {
                    if(Data.buildings[context.cityID][i].ownerType === "city")
                    {
                        buildingButtons.push([Data.buildings[context.cityID][i].GetEmoji() + Data.buildings[context.cityID][i].name, "ID" + Data.buildings[context.cityID][i].id])
                        request += `${NameLibrary.GetBuildingType(Data.buildings[context.cityID][i].type)} \"${Data.buildings[context.cityID][i].name}\" ${Data.buildings[context.cityID][i].level} —É—Ä\n`
                    }
                }
                if(buildingButtons.length === 0)
                {
                    await context.send("‚õ∫ –í –≥–æ—Ä–æ–¥–µ –Ω–µ—Ç –≥–æ—Ä–æ–¥—Å–∫–∏—Ö –ø–æ—Å—Ç—Ä–æ–µ–∫", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                let building = await InputManager.KeyboardBuilder(context, request, buildingButtons, current_keyboard)
                if(!building) return resolve()
                building = Data.ParseButtonID(building)
                for(let i = 0; i < Data.buildings[context.cityID].length; i++)
                {
                    if(Data.buildings[context.cityID][i].id === building)
                    {
                        building = Data.buildings[context.cityID][i]
                        break
                    }
                }
                if(building.level >= 4)
                {
                    await context.send(`‚ö† ${NameLibrary.GetBuildingType(building.type)} \"${building.name}\" –∏–º–µ–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å —É–ª—É—á—à–µ–Ω–∏—è.`, {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                if(building.type.match(/church|monument/))
                {
                    await context.send(NameLibrary.GetBuildingType(building.type) + " –Ω–µ –Ω—É–∂–¥–∞–µ—Ç—Å—è –≤ —É–ª—É—á—à–µ–Ω–∏–∏", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                await context.send(`‚Ñπ –£–ª—É—á—à–µ–Ω–∏–µ –¥–ª—è ${NameLibrary.GetBuildingType(building.type)} \"${building.name}\":\n ${building.level} —É—Ä–æ–≤–µ–Ω—å => ${building.level + 1} —É—Ä–æ–≤–µ–Ω—å\n${NameLibrary.GetPrice(Prices[building.type.replace("building_of_", "") + "_lvl" + (building.level + 1)])}`)
                if(!Data.cities[context.cityID].CanPay(Prices[building.type.replace("building_of_", "") + "_lvl" + (building.level + 1)]))
                {
                    await context.send("‚ö† –í –±—é–¥–∂–µ—Ç–µ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç —Ä–µ—Å—É—Ä—Å–æ–≤.", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                const accept = await InputManager.InputBoolean(context, "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?", current_keyboard)
                if(!accept)
                {
                    await context.send("üö´ –û—Ç–º–µ–Ω–µ–Ω–æ.", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                await Data.AddCityResources(Data.cities[context.cityID].id, Prices[building.type.replace("building_of_", "") + "_lvl" + (building.level + 1)])
                await Buildings.update({level: building.level + 1}, {where: {id: building.id}})
                building.Upgrade(building.level + 1)
                await context.send(`‚úÖ –ü–æ—Å—Ç—Ä–æ–π–∫–∞ —É–ª—É—á—à–µ–Ω–∞ –¥–æ ${building.level} —É—Ä–æ–≤–Ω—è.`, {keyboard: keyboard.build(current_keyboard)})
            }
            catch (e)
            {
                await api.SendLogs(context, "BuildersAndControlsScripts/UpgradeCityBuilding", e)
            }
        })
    }

    async GiveToCountryBuilding(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                if(!Data.buildings[context.cityID])
                {
                    await context.send("‚õ∫ –í –≥–æ—Ä–æ–¥–µ –Ω–µ—Ç –ø–æ—Å—Ç—Ä–æ–µ–∫", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                let request = "üè¢ –ì–æ—Ä–æ–¥—Å–∫–∏–µ –ø–æ—Å—Ç—Ä–æ–π–∫–∏:\n"
                const buildingButtons = []
                for(let i = 0; i < Data.buildings[context.cityID].length; i++)
                {
                    if(Data.buildings[context.cityID][i].ownerType === "city")
                    {
                        buildingButtons.push([Data.buildings[context.cityID][i].GetEmoji() + Data.buildings[context.cityID][i].name, "ID" + Data.buildings[context.cityID][i].id])
                        request += `${NameLibrary.GetBuildingType(Data.buildings[context.cityID][i].type)} \"${Data.buildings[context.cityID][i].name}\" ${Data.buildings[context.cityID][i].level} —É—Ä\n`
                    }
                }
                if(buildingButtons.length === 0)
                {
                    await context.send("‚õ∫ –í –≥–æ—Ä–æ–¥–µ –Ω–µ—Ç –≥–æ—Ä–æ–¥—Å–∫–∏—Ö –ø–æ—Å—Ç—Ä–æ–µ–∫", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                let buildingID = await InputManager.KeyboardBuilder(context, request + "\n\n1Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ—Å—Ç—Ä–æ–π–∫—É, –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–¥–∞—Ç—å –≤ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–æ–µ –≤–ª–∞–¥–µ–Ω–∏–µ", buildingButtons, current_keyboard)
                if(!buildingID) return resolve()
                buildingID = Data.ParseButtonID(buildingID)
                let building = await Buildings.findOne({where: {id: buildingID}})
                const accept = await InputManager.InputBoolean(context, `–ü–µ—Ä–µ–¥–∞—Ç—å ${NameLibrary.GetBuildingType(building.dataValues.type)} ${building.dataValues.name} –≤ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–æ–µ –≤–ª–∞–¥–µ–Ω–∏–µ?`, current_keyboard)
                if(!accept)
                {
                    await context.send("üö´ –û—Ç–º–µ–Ω–µ–Ω–æ.", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                building.set({
                    ownerType: "country"
                })
                await building.save()
                Data.buildings[context.cityID].filter(key => {return key.id === buildingID})[0].ownerType = "country"
                await context.send("‚úÖ –ü–æ—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–¥–∞–Ω–∞ —Ñ—Ä–∞–∫—Ü–∏–∏.", {keyboard: keyboard.build(current_keyboard)})
            }
            catch (e)
            {
                await api.SendLogs(context, "BuildersAndControlsScripts/GiveToCountryBuilding", e)
            }
        })
    }

    async ExpandCity(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                const isCapital = Data.cities[context.cityID].isCapital
                const maxBuildings = Data.cities[context.cityID].maxBuildings
                if((isCapital && maxBuildings >= 16) || (!isCapital && maxBuildings >= 12))
                {
                    await context.send("üèò –ì–æ—Ä–æ–¥ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Ä–∞—Å—à–∏—Ä–µ–Ω.", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                const accept = await InputManager.InputBoolean(context, `–†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ ${maxBuildings} => ${maxBuildings + 2} –º–µ—Å—Ç –¥–ª—è —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞.\n\n${Data.cities[context.cityID].GetResources()}\n\n–°—Ç–æ–∏–º–æ—Å—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è:\n${NameLibrary.GetPrice(Prices['expand_city'])}\n\n–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?`, current_keyboard)
                if(!accept)
                {
                    await context.send("üö´ –û—Ç–º–µ–Ω–µ–Ω–æ.", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                if(!Data.cities[context.cityID].CanPay(Prices['expand_city']))
                {
                    await context.send("‚ö† –í –±—é–¥–∂–µ—Ç–µ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç —Ä–µ—Å—É—Ä—Å–æ–≤.", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                await Data.AddCityResources(context.cityID, Prices['expand_city'])
                await Data.cities[context.cityID].Expand()
                await context.send(`‚úÖ –ì–æ—Ä–æ–¥ —Ä–∞—Å—à–∏—Ä–µ–Ω –¥–æ ${Data.cities[context.cityID].maxBuildings} –º–µ—Å—Ç.`, {keyboard: keyboard.build(current_keyboard)})
            }
            catch (e)
            {
                await api.SendLogs(context, "BuildersAndControlsScripts/ExpandCity", e)
            }
        })
    }

    async GetAllCityResources(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                let extraction = {}
                let extract = 0
                let request = "‚Ñπ –î–æ–±—ã—á–∞ –∏–∑ –ø–æ—Å—Ç—Ä–æ–µ–∫:\n\n"
                const time = new Date()
                const future = new Date()
                future.setHours(future.getHours() + 4)
                let resource = ""
                let flag = false
                let isVoid = true
                for(let i = 0, j = 0; i < Data.buildings[context.cityID]?.length; i++)
                {
                    if(Data.buildings[context.cityID][i].ownerType === "city" && Data.buildings[context.cityID][i].type.match(/wheat|stone|wood|iron|silver/) && !Data.buildings[context.cityID][i].isFreezing)
                    {
                        flag = true
                        j++
                        request += (j) + ": " + NameLibrary.GetBuildingType(Data.buildings[context.cityID][i].type) + " \"" + Data.buildings[context.cityID][i].name + "\" "
                        if(Data.buildings[context.cityID][i].lastActivityTime - time <= 0)
                        {
                            isVoid = false
                            resource = Data.buildings[context.cityID][i].type.replace("building_of_", "")
                            extract = Math.round(Data.buildings[context.cityID][i].GetExtraction() * 0.9)
                            request += " - –¥–æ–±—ã—Ç–æ\n"
                            Data.buildings[context.cityID][i].lastActivityTime = future
                            await Data.buildings[context.cityID][i].SaveWorkTime()
                            if(extraction[resource])
                            {
                                extraction[resource] += -extract
                            }
                            else
                            {
                                extraction[resource] = -extract
                            }
                        }
                        else
                        {
                            request += " - —á–µ—Ä–µ–∑ " + NameLibrary.ParseFutureTime(Data.buildings[context.cityID][i].lastActivityTime) + "\n"
                        }
                    }
                }
                if(!flag)
                {
                    await context.send("‚ö† –í –≥–æ—Ä–æ–¥–µ –Ω–µ—Ç –ø–æ—Å—Ç—Ä–æ–µ–∫ –¥–ª—è –¥–æ–±—ã—á–∏ —Ä–µ—Å—É—Ä—Å–æ–≤ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—â–∏—Ö –≥–æ—Ä–æ–¥—É.", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                if(!isVoid)
                {
                    if(Data.timeouts["city_timeout_resources_ready_" + context.cityID])
                    {
                        clearTimeout(Data.timeouts["city_timeout_resources_ready_" + context.cityID].timeout)
                        delete Data.timeouts["city_timeout_resources_ready_" + context.cityID]
                    }
                    Data.timeouts["city_timeout_resources_ready_" + context.cityID] = {
                        type: "city_timeout",
                        subtype: "resources_ready",
                        time: future,
                        cityID: context.cityID,
                        timeout: setTimeout(async () =>
                        {
                            await context.send(`‚úÖ –ü–æ—Å—Ç—Ä–æ–π–∫–∏ –≥–æ—Ä–æ–¥–∞ ${Data.cities[context.cityID].name} –∑–∞–≤–µ—Ä—à–∏–ª–∏ –¥–æ–±—ã—á—É —Ä–µ—Å—É—Ä—Å–æ–≤, –∞ —ç—Ç–æ –∑–Ω–∞—á–∏—Ç —á—Ç–æ —Å–Ω–æ–≤–∞ –ø–æ—Ä–∞ —Å–æ–±–∏—Ä–∞—Ç—å —Ä–µ—Å—É—Ä—Å—ã!`)
                            delete Data.timeouts["city_timeout_resources_ready_" + context.cityID]
                        }, 14400000)
                    }
                }
                request += isVoid ? "" : ("\n\n–î–æ–±—ã—Ç–æ –≤—Å–µ–≥–æ:\n" + NameLibrary.GetPrice(extraction))
                extraction = NameLibrary.ReversePrice(extraction)
                await Data.AddCityResources(context.cityID, extraction)
                await context.send(request)
            }
            catch (e)
            {
                await api.SendLogs(context, "BuildersAndControlsScripts/GetAllCityResources", e)
            }
        })
    }

    async GetCountryCities(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                let request = "‚Ñπ –°–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤ –≤ —Ñ—Ä–∞–∫—Ü–∏–∏ " + context.country.GetName(context.player.platform === "IOS") + ":\n\n"
                let leaders = Data.cities.filter(city => {return city?.countryID === context.country.id}).map(city => {return city.leaderID})
                let players = await Player.findAll({where: {id: leaders}, attributes: ["id", "nick"]})
                let userIds = {}
                let names = await api.api.users.get({
                    user_ids: leaders.join(",")
                })
                for(const user of names)
                {
                    userIds[user.id] = user
                    userIds[user.id].nick = players.filter(key => {return key.dataValues.id === user.id})[0].dataValues.nick
                }
                for(let i = 0, j = 0; i < Data.cities.length; i++)
                {
                    if(Data.cities[i]?.countryID === context.country.id)
                    {
                        j++
                        request += `${j}: üåá –ì–æ—Ä–æ–¥ ${Data.cities[i].name} ${Data.cities[i].isCapital ? "(–°—Ç–æ–ª–∏—Ü–∞) " : ""}- –≥–ª–∞–≤–∞ *id${Data.cities[i].leaderID}(${userIds[Data.cities[i].leaderID].nick}) [${userIds[Data.cities[i].leaderID].first_name + " " + userIds[Data.cities[i].leaderID].last_name}]\n\n`
                    }
                }
                await context.send(request, {keyboard: keyboard.build(current_keyboard)})
                return resolve()
            }
            catch (e)
            {
                await api.SendLogs(context, "BuildersAndControlsScripts/GetCountryCities", e)
            }
        })
    }

    async ChangeCountryName(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                let name = await InputManager.InputString(context, "1Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ—Ä–∞–∫—Ü–∏–∏ (–æ—Ç 2 –¥–æ 100 –±—É–∫–≤)", current_keyboard, 2, 100)
                if(!name) return resolve()
                let country = await Country.findOne({where: {name: name}})
                while(country)
                {
                    name = await InputManager.InputString(context, "‚ö† –§—Ä–∞–∫—Ü–∏—è —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ—Ä–∞–∫—Ü–∏–∏ –µ—â–µ —Ä–∞–∑ (–æ—Ç 2 –¥–æ 100 –±—É–∫–≤)", current_keyboard, 2, 100)
                    if(!name) return resolve()
                    country = await Country.findOne({where: {name: name}})
                }
                const accept = await InputManager.InputBoolean(context, `‚ùì –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å —Ñ—Ä–∞–∫—Ü–∏—é ${context.country.GetName(context.player.platform === "IOS")} –≤ "${"*public" + context.country.groupID + "(" + name + ")"}"?`, current_keyboard)
                if(!accept)
                {
                    await context.send("üö´ –û—Ç–º–µ–Ω–∞", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                await Country.update({name: name}, {where: {id: context.country.id}})
                context.country.name = name
                await context.send("‚úÖ –§—Ä–∞–∫—Ü–∏—è –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∞.", {keyboard: keyboard.build(current_keyboard)})
            }
            catch (e)
            {
                await api.SendLogs(context, "BuildersAndControlsScripts/ChangeCountryName", e)
            }
        })
    }

    async ChangeCountryParliamentForm(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                let name = await InputManager.InputString(context, "1Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–æ—Ä–º—ã –ø—Ä–∞–≤–ª–µ–Ω–∏—è (–æ—Ç 2 –¥–æ 50 –±—É–∫–≤)", current_keyboard, 2, 50)
                if(!name) return resolve()

                const accept = await InputManager.InputBoolean(context, `‚ùì –ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ä–º—É –ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ—Ä–∞–∫—Ü–∏–∏ ${context.country.GetName(context.player.platform === "IOS")} —Å ${context.country.governmentForm} –Ω–∞ ${name}?`, current_keyboard)
                if(!accept)
                {
                    await context.send("üö´ –û—Ç–º–µ–Ω–∞", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                await Country.update({governmentForm: name}, {where: {id: context.country.id}})
                context.country.governmentForm = name
                await context.send("‚úÖ –§–æ—Ä–º–∞ –ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∞", {keyboard: keyboard.build(current_keyboard)})
            }
            catch (e)
            {
                await api.SendLogs(context, "BuildersAndControlsScripts/ChangeCountryName", e)
            }
        })
    }


    async ChangeCountryDescription(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                let description = await InputManager.InputString(context, `1Ô∏è‚É£ –°—Ç–∞—Ä–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ: ${context.country.description}\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ (–æ—Ç 1 –¥–æ 1000 —Å–∏–º–≤–æ–ª–æ–≤)`, current_keyboard, 2, 100)
                if(!description) return resolve()
                const accept = await InputManager.InputBoolean(context, "‚ùì –ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ —Ñ—Ä–∞–∫—Ü–∏–∏?", current_keyboard)
                if(!accept)
                {
                    await context.send("üö´ –û—Ç–º–µ–Ω–∞", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                await Country.update({description: description}, {where: {id: context.country.id}})
                context.country.description = description
                await context.send("‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ —Ñ—Ä–∞–∫—Ü–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–æ.", {keyboard: keyboard.build(current_keyboard)})
            }
            catch (e)
            {
                await api.SendLogs(context, "BuildersAndControlsScripts/ChangeCountryDescription", e)
            }
        })
    }

    async ChangeCountryPhoto(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                let country = await InputManager.KeyboardBuilder(context, "1Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ —Ñ—Ä–∞–∫—Ü–∏—é", Data.GetCountryButtons(), current_keyboard)
                if(!country) return resolve()
                country = Data.ParseButtonID(country)
                country = Data.countries[country]
                if(country.photoURL)
                {
                    await context.send("‚Ñπ –í–æ—Ç —Å—Ç–∞—Ä–æ–µ —Ñ–æ—Ç–æ", {attachment: country.photoURL})
                }
                else
                {
                    await context.send("‚Ñπ –£ —Ñ—Ä–∞–∫—Ü–∏–∏ –Ω–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏.")
                }
                let photo = await InputManager.InputPhoto(context, "1Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ.\n‚ö† –≠—Ç–æ —Ñ–æ—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–∞—Ä—É—Å–µ–ª–∏.\n\n‚ö†‚ö†‚ö† –¢—Ä–µ–±—É–µ—Ç—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ —Å —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ–º —Å—Ç–æ—Ä–æ–Ω 13/8 (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ 650x400), –∏–Ω–∞—á–µ –±—É–¥—É—Ç –æ—à–∏–±–∫–∏ —Å –∫–∞—Ä—É—Å–µ–ª—å—é, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –≤—ã–ª–µ—Ç—É\n\n–ë—ã—Å—Ç—Ä–æ –∏–∑–º–µ–Ω–∏—Ç—å —Ä–∞–∑–º–µ—Ä —Ñ–æ—Ç–æ –º–æ–∂–Ω–æ –∑–¥–µ—Å—å: https://www.visualwatermark.com/ru/image-resizer/", current_keyboard)
                if(!photo) return resolve()
                const accept = await InputManager.InputBoolean(context, "‚ùì –ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ —Ñ—Ä–∞–∫—Ü–∏–∏?", current_keyboard)
                if(!accept)
                {
                    await context.send("üö´ –û—Ç–º–µ–Ω–∞", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                await Country.update({photoURL: photo}, {where: {id: country.id}})
                context.country.photoURL = photo
                await context.send("‚úÖ –§–æ—Ç–æ –§—Ä–∞–∫—Ü–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–æ.", {keyboard: keyboard.build(current_keyboard)})
            }
            catch (e)
            {
                await api.SendLogs(context, "BuildersAndControlsScripts/ChangeCountryPhoto", e)
            }
        })
    }

    async ChangeCountryWelcomePhoto(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                if(context.country.welcomePhotoURL)
                {
                    await context.send("‚Ñπ –í–æ—Ç —Å—Ç–∞—Ä–æ–µ —Ñ–æ—Ç–æ", {attachment: context.country.welcomePhotoURL})
                }
                else
                {
                    await context.send("‚Ñπ –£ —Ñ—Ä–∞–∫—Ü–∏–∏ –Ω–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏.")
                }
                let photo = await InputManager.InputPhoto(context, "1Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ. (–û–Ω–æ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –ø—Ä–∏ –≤—ä–µ–∑–¥–µ –≤ —Ñ—Ä–∞–∫—Ü–∏—é)", current_keyboard)
                if(!photo) return resolve()
                const accept = await InputManager.InputBoolean(context, "‚ùì –ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Ñ–æ—Ç–æ —Ñ—Ä–∞–∫—Ü–∏–∏?", current_keyboard)
                if(!accept)
                {
                    await context.send("üö´ –û—Ç–º–µ–Ω–∞", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                await Country.update({welcomePhotoURL: photo}, {where: {id: context.country.id}})
                context.country.welcomePhotoURL = photo
                await context.send("‚úÖ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Ñ–æ—Ç–æ —Ñ—Ä–∞–∫—Ü–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–æ.", {keyboard: keyboard.build(current_keyboard)})
            }
            catch (e)
            {
                await api.SendLogs(context, "BuildersAndControlsScripts/ChangeCountryWelcomePhoto", e)
            }
        })
    }

    async ChangeCountryParliament(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                if(context.country.isParliament)
                {
                    await Country.update({isParliament: false}, {where: {id: context.country.id}})
                    context.country.isParliament = false
                    await context.send("‚úÖ –¢–µ–ø–µ—Ä—å —É —Ñ—Ä–∞–∫—Ü–∏–∏ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –ø—Ä–∞–≤–∏—Ç–µ–ª—å.", {keyboard: keyboard.build(current_keyboard)})
                }
                else
                {
                    await Country.update({isParliament: true}, {where: {id: context.country.id}})
                    context.country.isParliament = true
                    await context.send("‚úÖ –¢–µ–ø–µ—Ä—å —É —Ñ—Ä–∞–∫—Ü–∏–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–∞–≤–∏—Ç–µ–ª–µ–π, –ø—Ä–∞–≤–∏—Ç–µ–ª—è–º–∏ —Å—á–∏—Ç–∞—é—Ç—Å—è —á–∏–Ω–æ–≤–Ω–∏–∫–∏ —Å –ø—Ä–∞–≤–æ–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —á–∏–Ω–æ–≤–Ω–∏–∫–æ–≤.", {keyboard: keyboard.build(current_keyboard)})
                }
                return resolve()
            }
            catch (e)
            {
                await api.SendLogs(context, "BuildersAndControlsScripts/ChangeCountryWelcomePhoto", e)
            }
        })
    }

    async ChangeCountryGroup(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                let group = await InputManager.InputGroup(context, `‚Ñπ *public${context.country.groupID}(–°—Å—ã–ª–∫–∞ –Ω–∞ –≥—Ä—É–ø–ø—É —Ñ—Ä–∞–∫—Ü–∏–∏)\n\n1Ô∏è‚É£ –ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å:`, current_keyboard)
                if(!group) return resolve()
                const accept = await InputManager.InputBoolean(context, `‚ùì –ò–∑–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É –Ω–∞ *public${group}(–Ω–æ–≤—É—é)?`, current_keyboard)
                if(!accept)
                {
                    await context.send("üö´ –û—Ç–º–µ–Ω–∞", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                await Country.update({groupID: group}, {where: {id: context.country.id}})
                context.country.groupID = group
                await context.send("‚úÖ –ì—Ä—É–ø–ø–∞ —Ñ—Ä–∞–∫—Ü–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∞.", {keyboard: keyboard.build(current_keyboard)})
            }
            catch (e)
            {
                await api.SendLogs(context, "BuildersAndControlsScripts/ChangeCountryGroup", e)
            }
        })
    }

    async GetAllCountryResources(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                let extraction = {}
                let extract = 0
                let request = "‚Ñπ –î–æ–±—ã—á–∞ –∏–∑ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø–æ—Å—Ç—Ä–æ–µ–∫:\n\n"
                const time = new Date()
                const future = new Date()
                future.setHours(future.getHours() + 4)
                let resource = ""
                let flag = false
                let isVoid = true
                for(let k = 0; k < Data.cities.length; k++)
                {
                    if(Data.cities[k]?.countryID === context.country.id)
                    {
                        request += "üåá –ì–æ—Ä–æ–¥ " + Data.cities[k].name + ":"
                        for(let i = 0, j = 0; i < Data.buildings[Data.cities[k].id]?.length; i++)
                        {
                            if(Data.buildings[Data.cities[k].id][i].ownerType === "country" && Data.buildings[Data.cities[k].id][i].type.match(/wheat|stone|wood|iron|silver/) && !Data.buildings[Data.cities[k].id][i].isFreezing)
                            {
                                flag = true
                                j++
                                request += "\n" + (j) + ": " + NameLibrary.GetBuildingType(Data.buildings[Data.cities[k].id][i].type) + " \"" + Data.buildings[Data.cities[k].id][i].name + "\" "
                                if(Data.buildings[Data.cities[k].id][i].lastActivityTime - time <= 0)
                                {
                                    isVoid = false
                                    resource = Data.buildings[Data.cities[k].id][i].type.replace("building_of_", "")
                                    extract = Math.round(Data.buildings[Data.cities[k].id][i].GetExtraction() * 0.8)
                                    request += ` - –¥–æ–±—ã—Ç–æ ${extract}`
                                    Data.buildings[Data.cities[k].id][i].lastActivityTime = future
                                    await Data.buildings[Data.cities[k].id][i].SaveWorkTime()
                                    if(extraction[resource])
                                    {
                                        extraction[resource] += -extract
                                    }
                                    else
                                    {
                                        extraction[resource] = -extract
                                    }
                                }
                                else
                                {
                                    request += " - —á–µ—Ä–µ–∑ " + NameLibrary.ParseFutureTime(Data.buildings[Data.cities[k].id][i].lastActivityTime)
                                }
                            }
                        }
                        if(!Data.buildings[Data.cities[k].id])
                        {
                            request += " - –Ω–µ—Ç –ø–æ—Å—Ç—Ä–æ–µ–∫"
                        }
                        request += "\n\n"
                    }
                }
                if(!flag)
                {
                    await context.send("‚ö† –í —Ñ—Ä–∞–∫—Ü–∏–∏ –Ω–µ—Ç –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø–æ—Å—Ç—Ä–æ–µ–∫ –¥–ª—è –¥–æ–±—ã—á–∏ —Ä–µ—Å—É—Ä—Å–æ–≤ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—â–∏—Ö –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤—É.", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                if(!isVoid)
                {
                    if(Data.timeouts["country_timeout_resources_ready_" + context.country.id])
                    {
                        clearTimeout(Data.timeouts["country_timeout_resources_ready_" + context.country.id].timeout)
                        delete Data.timeouts["country_timeout_resources_ready_" + context.country.id]
                    }
                    Data.timeouts["country_timeout_resources_ready_" + context.cityID] = {
                        type: "country_timeout",
                        subtype: "resources_ready",
                        userId: context.player.id,
                        countryID: context.country.id,
                        time: future,
                        timeout: setTimeout(async () =>
                        {
                            await context.send(`‚úÖ –ü–æ—Å—Ç—Ä–æ–π–∫–∏ —Ñ—Ä–∞–∫—Ü–∏–∏ ${context.country.GetName(context.player.platform === "IOS")} –∑–∞–≤–µ—Ä—à–∏–ª–∏ –¥–æ–±—ã—á—É —Ä–µ—Å—É—Ä—Å–æ–≤, –∞ —ç—Ç–æ –∑–Ω–∞—á–∏—Ç —á—Ç–æ —Å–Ω–æ–≤–∞ –ø–æ—Ä–∞ —Å–æ–±–∏—Ä–∞—Ç—å —Ä–µ—Å—É—Ä—Å—ã!`)
                            delete Data.timeouts["country_timeout_resources_ready_" + context.country.id]
                        }, 14400000)
                    }
                }
                request += isVoid ? "" : ("\n\n–î–æ–±—ã—Ç–æ –≤—Å–µ–≥–æ:\n" + NameLibrary.GetPrice(extraction))
                extraction = NameLibrary.ReversePrice(extraction)
                await Data.AddCountryResources(context.country.id, extraction)
                await context.send(request)
            }
            catch (e)
            {
                await api.SendLogs(context, "BuildersAndControlsScripts/GetAllCountryResources", e)
            }
        })
    }

    async CountryTransaction(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                let kb = [
                    ["üîÄ –ò–≥—Ä–æ–∫—É", "user"],
                    ["üîÄ –ì–æ—Ä–æ–¥—É", "city"]
                ]
                const action = await InputManager.KeyboardBuilder(context, "–í—ã–±–µ—Ä–∏—Ç–µ, –∫—É–¥–∞ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ—Å—É—Ä—Å—ã", kb, current_keyboard)
                if(!action) return resolve()
                action === "user" && await this.CountryToUserTransaction(context, current_keyboard)
                action === "city" && await this.CountryToCityTransaction(context, current_keyboard)
                return resolve()
            }
            catch (e)
            {
                await api.SendLogs(context, "BuildersAndControlsScripts/CountryToCityTransaction", e)
            }
        })
    }

    async CountryToUserTransaction(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                let user = await InputManager.InputUser(context, "1Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä–æ–∫–∞, –∫–æ—Ç–æ—Ä–æ–º—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ —Ä–µ—Å—É—Ä—Å—ã –∏–∑ –±—é–¥–∂–µ—Ç–∞ —Ñ—Ä–∞–∫—Ü–∏–∏:", current_keyboard)
                if(!user) return resolve()
                user = user.dataValues
                const resources = [[keyboard.moneyButton, keyboard.diamondButton],
                    [keyboard.wheatButton, keyboard.woodButton, keyboard.stoneButton],
                    [keyboard.ironButton, keyboard.copperButton, keyboard.silverButton],
                    [keyboard.cancelButton]]
                const resource = await InputManager.ChooseButton(context, `2Ô∏è‚É£ ${context.country.GetResources()}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–∫–æ–π —Ä–µ—Å—É—Ä—Å –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏`, resources)
                if (resource === "cancel")
                {
                    context.send("üö´ –ü–µ—Ä–µ–≤–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                if(context.country[resource] <= 0)
                {
                    context.send("‚ö† –í –±—é–¥–∂–µ—Ç–µ –Ω–µ—Ç —ç—Ç–æ–≥–æ —Ä–µ—Å—É—Ä—Å–∞.", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                let count
                if(context.country[resource] > 1)
                {
                    count = await InputManager.InputInteger(context, `3Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (–æ—Ç 1 –¥–æ ${context.country[resource]} —à—Ç)`, current_keyboard, 1, context.country[resource])
                    if(count === null) return resolve()
                }
                else
                {
                    count = 1
                }
                const accept = await InputManager.InputBoolean(context, `4Ô∏è‚É£ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥:\n\n–ö–æ–º—É: –∏–≥—Ä–æ–∫ *id${user.id}(${user.nick})\n–†–µ—Å—É—Ä—Å: ${NameLibrary.GetResourceName(resource)}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${count} —à—Ç\n\n–í–µ—Ä–Ω–æ?`, current_keyboard)
                if(!accept)
                {
                    await context.send("üö´ –ü–µ—Ä–µ–≤–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                let objIN = {}
                let objOUT = {}
                objIN[resource] = count * -1
                objOUT[resource] = count

                await Data.AddCountryResources(context.country.id, objIN)
                await Data.AddPlayerResources(user.id, objOUT)
                await api.SendMessage(user.id, `‚úÖ –ò–∑ –±—é–¥–∂–µ—Ç–∞ —Ñ—Ä–∞–∫—Ü–∏–∏ ${context.country.GetName(context.player.platform === "IOS")} –∫ –≤–∞–º –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø–æ—Å—Ç—É–ø–∏–ª –ø–µ—Ä–µ–≤–æ–¥ –≤ —Ä–∞–∑–º–µ—Ä–µ:\n\n${NameLibrary.GetPrice(objOUT)}`)
                await Transactions.create({
                    fromID: context.player.id,
                    toID: user.id,
                    type: "ctrtp",
                    money: objOUT.money ? objOUT.money : null,
                    stone: objOUT.stone ? objOUT.stone : null,
                    wood: objOUT.wood ? objOUT.wood : null,
                    wheat: objOUT.wheat ? objOUT.wheat : null,
                    iron: objOUT.iron ? objOUT.iron : null,
                    copper: objOUT.copper ? objOUT.copper : null,
                    silver: objOUT.silver ? objOUT.silver : null,
                    diamond: objOUT.diamond ? objOUT.diamond : null
                })
                await context.send("‚úÖ –£—Å–ø–µ—à–Ω–æ", {keyboard: keyboard.build(current_keyboard)})
            }
            catch (e)
            {
                await api.SendLogs(context, "BuildersAndControlsScripts/CountryToUserTransaction", e)
            }
        })
    }

    async CountryToCityTransaction(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                let cityID = await InputManager.KeyboardBuilder(context, "1Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥, –≤ –±—é–¥–∂–µ—Ç –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ —Ä–µ—Å—É—Ä—Å—ã:", Data.GetCityForCountryButtons(context.country.id), current_keyboard)
                if(!cityID) return resolve()
                cityID = Data.ParseButtonID(cityID)
                const resources = [[keyboard.moneyButton, keyboard.diamondButton],
                    [keyboard.wheatButton, keyboard.woodButton, keyboard.stoneButton],
                    [keyboard.ironButton, keyboard.copperButton, keyboard.silverButton],
                    [keyboard.cancelButton]]
                const resource = await InputManager.ChooseButton(context, `2Ô∏è‚É£ ${context.country.GetResources()}\n\n–ü–µ—Ä–µ–≤–æ–¥–∏—Ç—å —Ä–µ—Å—É—Ä—Å—ã –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –≤ –±—é–¥–∂–µ—Ç –≥–æ—Ä–æ–¥–∞ —Ñ—Ä–∞–∫—Ü–∏–∏.\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–∫–æ–π —Ä–µ—Å—É—Ä—Å –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –≤ –±—é–¥–∂–µ—Ç –≥–æ—Ä–æ–¥–∞ ${Data.GetCityName(cityID)}?`, resources)
                if (resource === "cancel")
                {
                    context.send("üö´ –ü–µ—Ä–µ–≤–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                if(context.country[resource] <= 0)
                {
                    context.send("‚ö† –í –±—é–¥–∂–µ—Ç–µ –Ω–µ—Ç —ç—Ç–æ–≥–æ —Ä–µ—Å—É—Ä—Å–∞.", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                let count
                if(context.country[resource] > 1)
                {
                    count = await InputManager.InputInteger(context, `3Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (–æ—Ç 1 –¥–æ ${context.country[resource]} —à—Ç)`, current_keyboard, 1, context.country[resource])
                    if(count === null) return resolve()
                }
                else
                {
                    count = 1
                }
                const accept = await InputManager.InputBoolean(context, `4Ô∏è‚É£ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥:\n–ö–æ–º—É: ${Data.GetCityName(cityID)}\n–†–µ—Å—É—Ä—Å: ${NameLibrary.GetResourceName(resource)}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${count} —à—Ç\n\n–í–µ—Ä–Ω–æ?`, current_keyboard)
                if(!accept)
                {
                    context.send("üö´ –ü–µ—Ä–µ–≤–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }

                let objIN = {}
                let objOUT = {}
                objIN[resource] = count * -1
                objOUT[resource] = count

                await Data.AddCountryResources(context.country.id, objIN)
                await Data.AddCityResources(cityID, objOUT)
                await api.SendMessage(Data.cities[cityID].leaderID, `‚úÖ –ò–∑ –±—é–¥–∂–µ—Ç–∞ —Ñ—Ä–∞–∫—Ü–∏–∏ ${context.country.GetName(context.player.platform === "IOS")} –ø–æ—Å—Ç—É–ø–∏–ª –ø–µ—Ä–µ–≤–æ–¥ –≤ –±—é–¥–∂–µ—Ç –≥–æ—Ä–æ–¥–∞ ${Data.cities[cityID].name} –≤ —Ä–∞–∑–º–µ—Ä–µ:\n${NameLibrary.GetPrice(objOUT)}`)
                await context.send("‚úÖ –£—Å–ø–µ—à–Ω–æ", {keyboard: keyboard.build(current_keyboard)})
            }
            catch (e)
            {
                await api.SendLogs(context, "BuildersAndControlsScripts/CountryToCityTransaction", e)
            }
        })
    }

    async GetCountryTax(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                let time = new Date()
                if(Data.timeouts["country_get_tax_" + context.country.id])
                {
                    await context.send("‚ú° –í—ã —É–∂–µ —Å–æ–±–∏—Ä–∞–ª–∏ –Ω–∞–ª–æ–≥–∏, —Å–ª–µ–¥—É—é—â–∏–π —Å–±–æ—Ä –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ " + NameLibrary.ParseFutureTime(Data.timeouts["country_get_tax_" + context.country.id].time), {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                let taxIncome = {}
                Object.keys(Prices["void_tax_price"]).forEach(key => {taxIncome[key] = Prices["void_tax_price"][key]})
                let totalIncome = {}
                Object.keys(Prices["void_tax_price"]).forEach(key => {totalIncome[key] = Prices["void_tax_price"][key]})
                let tax = context.country.tax / 100
                let count = 0
                for(let i = 0; i < Data.cities.length; i++)
                {
                    if(Data.cities[i]?.countryID === context.country.id)
                    {
                        Object.keys(taxIncome).forEach(key => {
                            taxIncome[key] = Math.round(parseInt(Data.cities[i][key]) * tax)
                            totalIncome[key] += taxIncome[key]
                        })
                        count++
                        taxIncome = NameLibrary.ReversePrice(taxIncome)
                        await Data.AddCityResources(Data.cities[i].id, taxIncome)
                        await api.SendMessage(Data.cities[i].leaderID, `‚Ñπ –ü—Ä–∞–≤–∏—Ç–µ–ª—å—Å—Ç–≤–æ —Ñ—Ä–∞–∫—Ü–∏–∏ ${context.country.GetName(context.player.platform === "IOS")} —Å–æ–±—Ä–∞–ª —Å –≥–æ—Ä–æ–¥–æ–≤ —Ñ—Ä–∞–∫—Ü–∏–∏ –Ω–∞–ª–æ–≥–∏ –≤ —Ä–∞–∑–º–µ—Ä–µ ${context.country.tax}%, –∏–∑ –±—é–¥–∂–µ—Ç–∞ –≥–æ—Ä–æ–¥–∞ \"${Data.cities[i].name}\" —Å–æ–±—Ä–∞–Ω–æ:\n${NameLibrary.GetPrice(taxIncome)}`)
                    }
                }
                await Data.AddCountryResources(context.country.id, totalIncome)
                time.setHours(time.getHours() + 168)
                Data.timeouts["country_get_tax_" + context.country.id] = {
                    type: "country_timeout",
                    subtype: "city_tax",
                    countryID: context.country.id,
                    time: time,
                    timeout: setTimeout(() => {
                        delete Data.timeouts["country_tax_" + context.country.id]
                    })
                }
                await context.send(`‚Ñπ –° ${count} –≥–æ—Ä–æ–¥–æ–≤ —Å–æ–±—Ä–∞–Ω–æ:\n${NameLibrary.GetPrice(totalIncome)}`, {keyboard: keyboard.build(current_keyboard)})
                return resolve()
            }
            catch (e)
            {
                await api.SendLogs(context, "BuildersAndControlsScripts/GetCountryTax", e)
            }
        })
    }

    async SetMayor(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                let cityButtons
                if(NameLibrary.RoleEstimator(context.player.role) > 2)
                {
                    cityButtons = Data.GetCityButtons()
                }
                else
                {
                    cityButtons = Data.GetCityForCountryButtons(context.player.countryID)
                }
                let city = await InputManager.KeyboardBuilder(context, "1Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥", cityButtons, current_keyboard)
                if(!city) return resolve()
                city = Data.ParseButtonID(city)
                city = Data.cities[city]
                const user = await InputManager.InputUser(context, `2Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ, –∫–æ–≥–æ –Ω–∞–∑–Ω–∞—á–∏—Ç—å –≥–ª–∞–≤–æ–π –≥–æ—Ä–æ–¥–∞ ${city.name}`, current_keyboard)
                if(!user) return resolve()
                const accept = await InputManager.InputBoolean(context, `–ù–∞–∑–Ω–∞—á–∏—Ç—å *id${user.dataValues.id}(${user.dataValues.nick}) –≥–ª–∞–≤–æ–π –≥–æ—Ä–æ–¥–∞ ${city.name}?`, current_keyboard)
                if(!accept)
                {
                    await context.send("üö´ –û—Ç–º–µ–Ω–µ–Ω–æ", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                if(user.dataValues.status.match(/citizen|stateless|official/))
                {
                    await PlayerStatus.update({citizenship: city.countryID}, {where: {id: user.dataValues.id}})
                }
                await City.update({leaderID: user.dataValues.id}, {where: {id: city.id}})
                city.leaderID = user.dataValues.id
                await api.SendMessage(user.dataValues.id, `‚úÖ –í—ã –±—ã–ª–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –≥–ª–∞–≤–æ–π –≥–æ—Ä–æ–¥–∞ ${city.name}`)
                await context.send(`‚úÖ –ò–≥—Ä–æ–∫ ${await NameLibrary.GetPlayerNick(user.dataValues.id)} –Ω–∞–∑–Ω–∞—á–µ–Ω –≥–ª–∞–≤–æ–π –≥–æ—Ä–æ–¥–∞ ${city.name}`, {keyboard: keyboard.build(current_keyboard)})
            }
            catch (e)
            {
                await api.SendLogs(context, "BuildersAndControlsScripts/SetMayor", e)
            }
        })
    }

    async SetTax(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                const buttons = [
                    [keyboard.secondaryButton(["üí∞ –ù–∞–ª–æ–≥ –¥–ª—è –≥—Ä–∞–∂–¥–∞–Ω –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ñ—Ä–∞–∫—Ü–∏–∏", "countryTax"])],
                    [keyboard.secondaryButton(["üí∏üò∫ –ì—Ä–∞–∂–¥–∞–Ω—Å–∫–∏–π –Ω–∞–ª–æ–≥", "citizenTax"]), keyboard.secondaryButton(["üí∏üòæ –ù–∞–ª–æ–≥ –¥–ª—è –ø—Ä–∏–µ–∑–∂–∏—Ö", "nonCitizenTax"])],
                    [keyboard.secondaryButton(["üèô –ì–æ—Ä–æ–¥—Å–∫–æ–π –Ω–∞–ª–æ–≥", "tax"]), keyboard.secondaryButton(["üè¢ –ù–∞–ª–æ–≥ –Ω–∞ –ø–æ—Å—Ç—Ä–æ–π–∫–∏", "privateBuildingTax"]), keyboard.secondaryButton(["‚è© –í—ä–µ–∑–¥–Ω–∞—è –ø–æ—à–ª–∏–Ω–∞", "entranceFee"])],
                    [keyboard.backButton],
                ]
                const taxType = await InputManager.ChooseButton(context, "1Ô∏è‚É£ –ö–∞–∫–æ–π —Ç–∏–ø –Ω–∞–ª–æ–≥–∞ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å?", buttons)
                if(taxType === "back")
                {
                    await context.send("–ù–∞–∑–∞–¥", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                if(taxType === "countryTax")
                {
                    await this.SetCountryTax(context, current_keyboard)
                    return resolve()
                }
                const taxSamples = {
                    tax: "2Ô∏è‚É£ –£–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥—Å–∫–æ–π –Ω–∞–ª–æ–≥ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö (—ç—Ç–æ—Ç –Ω–∞–ª–æ–≥ –≤—ã –º–æ–∂–µ—Ç–µ —Å–Ω–∏–º–∞—Ç—å —Å –≥–æ—Ä–æ–¥–æ–≤ —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é)",
                    citizenTax: "2Ô∏è‚É£ –£–∫–∞–∂–∏—Ç–µ –Ω–∞–ª–æ–≥ –¥–ª—è –≥—Ä–∞–∂–¥–∞–Ω –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö (—ç—Ç–æ—Ç –Ω–∞–ª–æ–≥ –±—É–¥–µ—Ç —Å–Ω–∏–º–∞—Ç—å—Å—è —Å –≥—Ä–∞–∂–¥–∞–Ω –ø—Ä–∏ –¥–æ–±—ã—á–µ —Ä–µ—Å—É—Ä—Å–æ–≤ –∏ –æ–±–º–µ–Ω–µ —Ä–µ—Å—É—Ä—Å–∞–º–∏)",
                    nonCitizenTax: "2Ô∏è‚É£ –£–∫–∞–∂–∏—Ç–µ –Ω–∞–ª–æ–≥ –¥–ª—è –≥—Ä–∞–∂–¥–∞–Ω –¥—Ä—É–≥–æ–π —Ñ—Ä–∞–∫—Ü–∏–∏ –∏ –∞–ø–∞—Ç—Ä–∏–¥–æ–≤ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö (—ç—Ç–æ—Ç –Ω–∞–ª–æ–≥ –±—É–¥–µ—Ç —Å–Ω–∏–º–∞—Ç—å—Å—è —Å –∏–≥—Ä–æ–∫–æ–≤, –Ω–µ —è–≤–ª—è—é—â–∏—Ö—Å—è –≥—Ä–∞–∂–¥–∞–Ω–∞–º–∏ —Ñ—Ä–∞–∫—Ü–∏–∏, –ø—Ä–∏ –¥–æ–±—ã—á–µ —Ä–µ—Å—É—Ä—Å–æ–≤ –∏ –æ–±–º–µ–Ω–µ —Ä–µ—Å—É—Ä—Å–∞–º–∏)",
                    entranceFee: "2Ô∏è‚É£ –£–∫–∞–∂–∏—Ç–µ –≤—ä–µ–∑–¥–Ω—É—é –ø–æ—à–ª–∏–Ω—É –≤ –º–æ–Ω–µ—Ç–∞—Ö (—ç—Ç–æ —Ç–∞ —Å—É–º–º–∞, –∫–æ—Ç–æ—Ä—É—é –Ω–∞–¥–æ –æ–ø–ª–∞—Ç–∏—Ç—å –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –≤ –≤–∞—à—É —Ñ—Ä–∞–∫—Ü–∏—é)",
                    privateBuildingTax: "2Ô∏è‚É£ –£–∫–∞–∂–∏—Ç–µ –Ω–∞–ª–æ–≥ –Ω–∞ —á–∞—Å—Ç–Ω—ã–µ –ø–æ—Å—Ç—Ä–æ–π–∫–∏ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö"
                }
                const tax = await InputManager.InputInteger(context, taxSamples[taxType], current_keyboard, 0, taxType === "entranceFee" ? Number.MAX_SAFE_INTEGER : 100)
                if(tax === null) return resolve()
                context.country[taxType] = tax
                let newTax = {}
                newTax[taxType] = tax
                await Country.update(newTax, {where: {id: context.country.id}})
                await context.send("‚úÖ –ù–∞–ª–æ–≥ –∏–∑–º–µ–Ω–µ–Ω.", {keyboard: keyboard.build(current_keyboard)})
                return resolve()
            }
            catch (e)
            {
                await api.SendLogs(context, "BuildersAndControlsScripts/SetTax", e)
            }
        })
    }

    async SetCountryTax(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                let kb = []
                for(const c of Data.countries)
                {
                    if(c && c?.id !== context.country.id)
                    {
                        kb.push([c.name, "ID" + c.id])
                    }
                }
                let country = await InputManager.KeyboardBuilder(context, "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ—Ä–∞–∫—Ü–∏—é", kb, current_keyboard)
                if(!country) return resolve()
                country = Data.ParseButtonID(country)
                country = Data.countries[country]
                let currentTax = await CountryTaxes.findOne({where: {countryID: context.country.id, toCountryID: country.id}})
                const newTax = await InputManager.InputInteger(context, `${currentTax ? `–°—É—â–µ—Å—Ç–≤—É—é—â–∏–π –Ω–∞–ª–æ–≥ –¥–ª—è –≥—Ä–∞–∂–¥–∞–Ω —Ñ—Ä–∞–∫—Ü–∏–∏ ${country.GetName()} ${currentTax.dataValues.tax}` : ""}\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–∞–ª–æ–≥ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö`, current_keyboard, 0, 100)
                if(newTax === null) return resolve()
                if(currentTax)
                {
                    await CountryTaxes.update({tax: newTax}, {where: {countryID: context.country.id, toCountryID: country.id}})
                }
                else
                {
                    await CountryTaxes.create({
                        countryID: context.country.id,
                        toCountryID: country.id,
                        tax: newTax
                    })
                }
                await context.send("‚úÖ –ù–∞–ª–æ–≥ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", {keyboard: keyboard.build(current_keyboard)})
            }
            catch (e)
            {
                await api.SendLogs(context, "BuildersAndControlsScripts/BuildTheRoad", e)
            }
        })
    }

    async BuildNewCity(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                let leader = await InputManager.InputUser(context, `${context.country.GetResources()}\n\n–°—Ç–æ–∏–º–æ—Å—Ç—å —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞ –Ω–æ–≤–æ–≥–æ –≥–æ—Ä–æ–¥–∞:\n${NameLibrary.GetPrice(Prices["new_city"])}\n\n1Ô∏è‚É£ –£–∫–∞–∂–∏—Ç–µ –≥—Ä–∞–¥–æ–Ω–∞—á–∞–ª—å–Ω–∏–∫–∞`, current_keyboard)
                if(!leader) return resolve()
                if(leader.dataValues.status === "worker")
                {
                    await context.send("‚ö† –ù–∞–∑–Ω–∞—á–∞—Ç—å –∏–≥—Ä–æ–∫–æ–≤ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º ‚öô –†–∞–±–æ—Ç–Ω–∏–∫ –Ω–∞ –¥–æ–ª–∂–Ω–æ—Å—Ç—å –≥—Ä–∞–¥–æ–Ω–∞—á–∞–ª—å–Ω–∏–∫–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–æ", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                let leaderInfo = await PlayerStatus.findOne({where: {id: leader.dataValues.id}})
                if(leaderInfo.dataValues.citizenship !== context.country.id)
                {
                    await context.send(`‚ö† –ò–≥—Ä–æ–∫ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≥—Ä–∞–∂–¥–∞–Ω–∏–Ω–æ–º —Ñ—Ä–∞–∫—Ü–∏–∏ ${context.country.GetName(context.player.platform === "IOS")}`, {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                if(!context.country.CanPay(Prices["new_city"]))
                {
                    await context.send(`‚ö† –í –±—é–¥–∂–µ—Ç–µ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç —Ä–µ—Å—É—Ä—Å–æ–≤`, {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                let name = await InputManager.InputString(context, "2Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –≥–æ—Ä–æ–¥–∞ (–æ—Ç 2 –¥–æ 35 —Å–∏–º–≤–æ–ª–æ–≤)", current_keyboard, 2, 35)
                if(!name) return resolve()
                let city = await City.findOne({where: {name: name}})
                while(city)
                {
                    name = await InputManager.InputString(context, "‚ö† –ì–æ—Ä–æ–¥ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥.", current_keyboard, 2, 100)
                    if(!name) return resolve()
                    city = await City.findOne({where: {name: name}})
                }
                let description = await InputManager.InputString(context, "3Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ (–æ—Ç 2 –¥–æ 1000 —Å–∏–º–≤–æ–ª–æ–≤)", current_keyboard, 2, 1000)
                if(!description) return resolve()
                const newCity = await City.create({
                    countryID: context.country.id,
                    leaderID: leader.dataValues.id,
                    name: name,
                    description: description
                })
                await CityRoads.create({fromID: context.country.capitalID, toID: newCity.dataValues.id, time: Data.variables["cityToCityTime"], isBlocked: false})
                await CityRoads.create({fromID: newCity.dataValues.id, toID: context.country.capitalID, time: Data.variables["cityToCityTime"], isBlocked: false})
                await CityResources.create({id: newCity.dataValues.id})
                if(leader.dataValues.status.match(/citizen|/))
                {
                    if(Data.users[leader.dataValues.id]) Data.users[leader.dataValues.id].status = "official"
                    leader.set({status: "official"})
                    await leader.save()
                    await OfficialInfo.findOrCreate({
                        where: {id: leader.dataValues.id},
                        defaults: {id: leader.dataValues.id, nick: leader.dataValues.nick, countryID: context.country.id}
                    })
                }
                await Data.AddCountryResources(context.country.id, Prices["new_city"])
                await Data.LoadCities()
                await api.SendMessage(leader.dataValues.id, `‚úÖ –ü—Ä–∞–≤–∏—Ç–µ–ª—å —Ñ—Ä–∞–∫—Ü–∏–∏ ${context.country.GetName(context.player.platform === "IOS")} –ø–æ—Å—Ç—Ä–æ–∏–ª –Ω–æ–≤—ã–π –≥–æ—Ä–æ–¥ \"${newCity.dataValues.name}\" –∏ –≤—ã –±—ã–ª–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –µ–≥–æ –≥–ª–∞–≤–æ–π, –≤–∞—à —Å—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ "–ß–∏–Ω–æ–≤–Ω–∏–∫"`)
                await context.send("‚úÖ –ì–æ—Ä–æ–¥ —Å–æ–∑–¥–∞–Ω.", {keyboard: keyboard.build(current_keyboard)})
                return resolve()
            }
            catch (e)
            {
                await api.SendLogs(context, "BuildersAndControlsScripts/BuildNewCity", e)
            }
        })
    }

    async BuildTheRoad(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                if(Data.cities[context.cityID].isCapital)
                {
                    await context.send("‚Ñπ –í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ —Å—Ç–æ–ª–∏—Ü–µ, –≤—Å–µ –¥–æ—Ä–æ–≥–∏ —Ñ—Ä–∞–∫—Ü–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω—ã —Å–æ —Å—Ç–æ–ª–∏—Ü–µ–π, –Ω–µ—Ç –Ω—É–∂–¥—ã —Å—Ç—Ä–æ–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–æ—Ä–æ–≥–∏")
                    return resolve()
                }
                const roads = await CityRoads.findAll({where: {fromID: context.cityID}, attributes: ["id", "toID"]})
                let nonRoadCityButtons = []
                const cities = Data.GetCountryCities(Data.cities[context.cityID].countryID)
                let roadFlag = true
                for(const city of cities)
                {
                    if(city.id === context.cityID) continue
                    roadFlag = true
                    for(const road of roads)
                    {
                        if(city.id === road.dataValues.toID)
                        {
                            roadFlag = false
                            break
                        }
                    }
                    if(roadFlag)
                    {
                        nonRoadCityButtons.push([city.name, "ID" + city.id])
                    }
                }
                if(nonRoadCityButtons.length === 0)
                {
                    await context.send("‚Ñπ –í—ã –ø—Ä–æ–≤–µ–ª–∏ –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞–º –¥–æ—Ä–æ–≥–∏.")
                    return resolve()
                }
                let city = await InputManager.KeyboardBuilder(context, `${Data.cities[context.cityID].GetResources()}\n\n–ü–æ—Å—Ç—Ä–æ–π–∫–∞ –Ω–æ–≤–æ–π –¥–æ—Ä–æ–≥–∏ —Å—Ç–æ–∏—Ç:\n${NameLibrary.GetPrice(Prices["new_road"])}\n\n‚Ñπ –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥, –∫ –∫–æ—Ç–æ—Ä–æ–º—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–≤–µ—Å—Ç–∏ –¥–æ—Ä–æ–≥—É:`, nonRoadCityButtons, current_keyboard)
                if(!city) return resolve()
                city = Data.cities[Data.ParseButtonID(city)]
                if(!Data.cities[context.cityID].CanPay(Prices["new_road"]))
                {
                    await context.send("‚ö† –í –±—é–¥–∂–µ—Ç–µ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç —Ä–µ—Å—É—Ä—Å–æ–≤", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                const accept = await InputManager.InputBoolean(context, `–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –¥–æ—Ä–æ–≥—É –æ—Ç ${Data.cities[context.cityID].name} –¥–æ ${city.name}?`)
                if(!accept)
                {
                    await context.send("üö´ –û—Ç–º–µ–Ω–µ–Ω–æ", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                await Data.AddCityResources(context.cityID, Prices["new_road"])
                const roadFrom = await CityRoads.create({fromID: context.cityID, toID: city.id, isBlocked: true})
                const roadTo = await CityRoads.create({fromID: city.id, toID: context.cityID, isBlocked: true})
                await api.GMMailing(`‚Ñπ –ì–ª–∞–≤–∞ –≥–æ—Ä–æ–¥–∞ ${Data.cities[context.cityID].name} –ø–æ—Å—Ç—Ä–æ–∏–ª –¥–æ—Ä–æ–≥—É –∫ –≥–æ—Ä–æ–¥—É ${city.name}, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–∏.`, [[keyboard.startCallbackButton({command: "set_road_distance", item: roadTo.dataValues.id, addition: roadFrom.dataValues.id})]])
                await context.send("‚úÖ –î–æ—Ä–æ–≥–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∞, –æ—Å—Ç–∞–ª–æ—Å—å —á—Ç–æ–±—ã –ì–ú-—ã –æ–±—Ä–∞–±–æ—Ç–∞–ª–∏ –∑–∞—è–≤–∫—É", {keyboard: keyboard.build(current_keyboard)})
            }
            catch (e)
            {
                await api.SendLogs(context, "BuildersAndControlsScripts/BuildTheRoad", e)
            }
        })
    }

    async CreateCountryBuilding(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try {
                let city = await InputManager.KeyboardBuilder(context, "–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥, –≤ –∫–æ—Ç–æ—Ä–æ–º —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –Ω–æ–≤—É—é –ø–æ—Å—Ç—Ä–æ–π–∫—É", Data.GetCityForCountryButtons(context.country.id), current_keyboard)
                if (!city) return resolve()
                city = Data.ParseButtonID(city)
                const buildingButtons = [
                    ["‚öî –ö–∞–∑–∞—Ä–º–∞", "barracks"],
                    ["üõü –ü–æ—Ä—Ç", "port"],
                    ["ü™ô –ú–æ–Ω–µ—Ç–Ω—ã–π –¥–≤–æ—Ä", "mint"],
                    ["‚úù –•—Ä–∞–º", "church"],
                    ["üè¶ –ë–∞–Ω–∫", "bank"],
                    ["üóø –ü–∞–º—è—Ç–Ω–∏–∫", "monument"]
                ]
                context.country.resources.match(/wheat/) && buildingButtons.push(["üåæ –°–µ–ª—å—Å–∫–æ–µ —Ö–æ–∑—è–π—Å—Ç–≤–æ", "wheat"])
                context.country.resources.match(/stone/) && buildingButtons.push(["ü™® –ö–∞–º–µ–Ω–æ–ª–æ–º–Ω—è", "stone"])
                context.country.resources.match(/wood/) && buildingButtons.push(["ü™µ –õ–µ—Å–æ–∑–∞–≥–æ—Ç–æ–≤–∫–∏", "wood"])
                context.country.resources.match(/iron/) && buildingButtons.push(["üåë –ñ–µ–ª–µ–∑–Ω—ã–π —Ä—É–¥–Ω–∏–∫", "iron"])
                context.country.resources.match(/silver/) && buildingButtons.push(["ü•à –°–µ—Ä–µ–±—Ä—è–Ω—ã–π —Ä—É–¥–Ω–∏–∫", "silver"])

                let request = "‚Ñπ –¶–µ–Ω—ã –Ω–∞ –ø–æ—Å—Ç—Ä–æ–π–∫–∏:\n\n"
                request += context.country.GetResources() + "\n\n"
                buildingButtons.forEach(key => {
                    request += key[0] + ":\n" + NameLibrary.GetPrice(Prices["new_" + key[1]]) + "\n"
                })
                const building = await InputManager.KeyboardBuilder(context, request + "\n1Ô∏è‚É£ –ö–∞–∫—É—é –ø–æ—Å—Ç—Ä–æ–π–∫—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤–æ–∑–≤–µ—Å—Ç–∏?\n–°–µ–π—á–∞—Å –≤ –≥–æ—Ä–æ–¥–µ " + Data.cities[city].buildingsScore + "/" + Data.cities[city].maxBuildings + " –ø–æ—Å—Ç—Ä–æ–µ–∫", buildingButtons, current_keyboard)
                if(!building) return resolve()
                if(Data.cities[city].buildingsScore >= Data.cities[city].maxBuildings && !building.match(/monument|barracks|port|church/))
                {
                    await context.send("‚ö† –õ–∏–º–∏—Ç –Ω–∞ –ø–æ—Å—Ç—Ä–æ–π–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω " + Data.cities[city].buildingsScore + "/" + Data.cities[city].maxBuildings + "\n\n–ß—Ç–æ–±—ã –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–æ–µ –∑–¥–∞–Ω–∏–µ, —Ç—Ä–µ–±—É–µ—Ç—Å—è —Ä–∞—Å—à–∏—Ä–∏—Ç—å –≥–æ—Ä–æ–¥ –∏–ª–∏ —Å–Ω–µ—Å—Ç–∏ –∫–∞–∫–æ–µ-—Ç–æ –∏–∑ –Ω–∞—Ö–æ–¥—è—â–∏—Ö—Å—è –≤ –≥–æ—Ä–æ–¥–µ.", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                if(!context.country.CanPay(Prices["new_" + building]))
                {
                    await context.send("‚ö† –í –±—é–¥–∂–µ—Ç–µ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç —Ä–µ—Å—É—Ä—Å–æ–≤.", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                if(building.match(/port|barracks/))
                {
                    for(let i = 0; i < Data.cities.length; i++)
                    {
                        if(Data.cities[i]?.countryID === context.country.id)
                        {
                            for(let j = 0; j < Data.buildings[Data.cities[i].id]?.length; j++)
                            {
                                if(Data.buildings[Data.cities[i].id][j]?.type === "building_of_" + building)
                                {
                                    await context.send(`‚ö† –í —Ñ—Ä–∞–∫—Ü–∏–∏ ${context.country.GetName(context.player.platform === "IOS")} —É–∂–µ –∏–º–µ–µ—Ç—Å—è ${NameLibrary.GetBuildingType("building_of_" + building)}`, {keyboard: keyboard.build(current_keyboard)})
                                    return resolve()
                                }
                            }
                        }
                    }
                }
                const name = await InputManager.InputString(context, "2Ô∏è‚É£ –ù–∞–∑–æ–≤–∏—Ç–µ –ø–æ—Å—Ç—Ä–æ–π–∫—É. (–æ—Ç 2 –¥–æ 35 —Å–∏–º–≤–æ–ª–æ–≤)", current_keyboard, 2, 35)
                if(!name) return resolve()
                const description = await InputManager.InputString(context, "3Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –ø–æ—Å—Ç—Ä–æ–π–∫–∏ (–Ω–∞–∂–º–∏—Ç–µ \"–û—Ç–º–µ–Ω–∞\" —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –±–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è)", current_keyboard, 1)
                await Data.AddCountryResources(context.country.id, Prices["new_" + building])
                await Buildings.create({
                    cityID: city,
                    name: name,
                    description: description,
                    type: "building_of_" + building,
                    ownerID: 0,
                    ownerType: "country",
                    level: 1,
                    freezing: false
                })
                if(!building.match(/monument|barracks|port|church/))
                {
                    Data.cities[city].buildingsScore++
                    await City.update({buildingsScore: Data.cities[city].buildingsScore}, {where: {id: city}})
                }
                await Data.ResetBuildings()
                await api.SendMessage(Data.cities[city].leaderID, `‚Ñπ –ü—Ä–∞–≤–∏—Ç–µ–ª—å —Ñ—Ä–∞–∫—Ü–∏–∏ ${context.country.GetName(context.player.platform === "IOS")} –≤–æ–∑–≤–µ–ª –≤ –≤–∞—à–µ–º –≥–æ—Ä–æ–¥–µ ${NameLibrary.GetBuildingType("building_of_" + building)}`)
                await context.send("‚úÖ –ü–æ—Å—Ç—Ä–æ–π–∫–∞ –≤–æ–∑–≤–µ–¥–µ–Ω–∞.", {keyboard: keyboard.build(current_keyboard)})
            }
            catch (e)
            {
                await api.SendLogs(context, "BuildersAndControlsScripts/CreateCountryBuilding", e)
            }
        })
    }

    async GiveToCityBuilding(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                let request = "üè¢ –ü–æ—Å—Ç—Ä–æ–π–∫–∏:\n\n"
                const buildingButtons = []
                for(let i = 0; i < Data.cities.length; i++)
                {
                    if(Data.cities[i]?.countryID === context.country.id)
                    {
                        request += `üåá –ì–æ—Ä–æ–¥ ${Data.cities[i].name}:\n`
                        if(Data.buildings[Data.cities[i].id])
                        {
                            for(let j = 0; j < Data.buildings[Data.cities[i].id].length; j++)
                            {
                                if(Data.buildings[Data.cities[i].id][j].ownerType === "country" && !Data.buildings[Data.cities[i].id][j].type.match(/mint/))
                                {
                                    buildingButtons.push([Data.buildings[Data.cities[i].id][j].GetEmoji() + Data.buildings[Data.cities[i].id][j].name, "ID" + Data.buildings[Data.cities[i].id][j].id])
                                    request += `${NameLibrary.GetBuildingType(Data.buildings[Data.cities[i].id][j].type)} \"${Data.buildings[Data.cities[i].id][j].name}\" ${Data.buildings[Data.cities[i].id][j].level} —É—Ä\n`
                                }
                            }
                        }
                        if(!Data.buildings[Data.cities[i].id])
                        {
                            request += "‚õ∫ –í –≥–æ—Ä–æ–¥–µ –Ω–µ—Ç –ø–æ—Å—Ç—Ä–æ–µ–∫"
                        }
                        request += "\n\n"
                    }
                }
                if(buildingButtons.length === 0)
                {
                    await context.send("‚õ∫ –í —Ñ—Ä–∞–∫—Ü–∏–∏ –Ω–µ—Ç –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø–æ—Å—Ç—Ä–æ–µ–∫, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å –≥–æ—Ä–æ–¥—É", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                let buildingID = await InputManager.KeyboardBuilder(context, request + "\n\n1Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ—Å—Ç—Ä–æ–π–∫—É, –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–¥–∞—Ç—å –≥–æ—Ä–æ–¥—É", buildingButtons, current_keyboard)
                if(!buildingID) return resolve()
                buildingID = Data.ParseButtonID(buildingID)
                let building = await Buildings.findOne({where: {id: buildingID}})
                const accept = await InputManager.InputBoolean(context, `–ü–µ—Ä–µ–¥–∞—Ç—å ${NameLibrary.GetBuildingType(building.dataValues.type)} ${building.dataValues.name} –≤–æ –≤–ª–∞–¥–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ ${Data.cities[building.dataValues.cityID].name}?`, current_keyboard)
                if(!accept)
                {
                    await context.send("üö´ –û—Ç–º–µ–Ω–µ–Ω–æ.", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                building.set({
                    ownerType: "city"
                })
                await building.save()
                Data.buildings[building.dataValues.cityID].filter(key => {return key.id === buildingID})[0].ownerType = "city"
                await context.send("‚úÖ –ü–æ—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–¥–∞–Ω–∞ –≥–æ—Ä–æ–¥—É.", {keyboard: keyboard.build(current_keyboard)})
            }
            catch (e)
            {
                await api.SendLogs(context, "BuildersAndControlsScripts/UpgradeCountryBuilding", e)
            }
        })
    }

    async UpgradeCountryBuilding(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                let city = await InputManager.KeyboardBuilder(context, "–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥, –≤ –∫–æ—Ç–æ—Ä–æ–º –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø–æ—Å—Ç—Ä–æ–π–∫–∞", Data.GetCityForCountryButtons(context.country.id), current_keyboard)
                if(!city) return resolve()
                city = Data.ParseButtonID(city)
                let request = "üè¢ –ü–æ—Å—Ç—Ä–æ–π–∫–∏:\n\n"
                const buildingButtons = []
                request += `üåá –ì–æ—Ä–æ–¥ ${Data.cities[city].name}:\n`
                if(Data.buildings[Data.cities[city].id])
                {
                    for(let j = 0; j < Data.buildings[Data.cities[city].id].length; j++)
                    {
                        if(Data.buildings[Data.cities[city].id][j].ownerType === "country")
                        {
                            buildingButtons.push([Data.buildings[Data.cities[city].id][j].GetEmoji() + Data.buildings[Data.cities[city].id][j].name, "ID" + Data.buildings[Data.cities[city].id][j].id])
                            request += `${NameLibrary.GetBuildingType(Data.buildings[Data.cities[city].id][j].type)} \"${Data.buildings[Data.cities[city].id][j].name}\" ${Data.buildings[Data.cities[city].id][j].level} —É—Ä\n`
                        }
                    }
                }
                if(!Data.buildings[Data.cities[city].id])
                {
                    await context.send("‚õ∫ –í –≥–æ—Ä–æ–¥–µ –Ω–µ—Ç –ø–æ—Å—Ç—Ä–æ–µ–∫", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                if(buildingButtons.length === 0)
                {
                    await context.send("‚õ∫ –í —Ñ—Ä–∞–∫—Ü–∏–∏ –Ω–µ—Ç –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø–æ—Å—Ç—Ä–æ–µ–∫", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                let building = await InputManager.KeyboardBuilder(context, request + "\n\n1Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ—Å—Ç—Ä–æ–π–∫—É –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è", buildingButtons, current_keyboard)
                if(!building) return resolve()
                building = Data.ParseButtonID(building)
                for(let j = 0; j < Data.buildings[Data.cities[city].id]?.length; j++)
                {
                    if(Data.buildings[Data.cities[city].id][j].id === building)
                    {
                        building = Data.buildings[Data.cities[city].id][j]
                        break
                    }
                }
                if(building.level >= 4)
                {
                    await context.send(`‚ö† ${NameLibrary.GetBuildingType(building.type)} \"${building.name}\" –∏–º–µ–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å —É–ª—É—á—à–µ–Ω–∏—è.`, {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                if(building.type.match(/church|monument/))
                {
                    await context.send(NameLibrary.GetBuildingType(building.type) + " –Ω–µ –Ω—É–∂–¥–∞–µ—Ç—Å—è –≤ —É–ª—É—á—à–µ–Ω–∏–∏", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                await context.send(`2Ô∏è‚É£ –£–ª—É—á—à–µ–Ω–∏–µ –¥–ª—è ${NameLibrary.GetBuildingType(building.type)} \"${building.name}\":\n ${building.level} —É—Ä–æ–≤–µ–Ω—å => ${building.level + 1} —É—Ä–æ–≤–µ–Ω—å\n${NameLibrary.GetPrice(Prices[building.type.replace("building_of_", "") + "_lvl" + (building.level + 1)])}`)
                if(!context.country.CanPay(Prices[building.type.replace("building_of_", "") + "_lvl" + (building.level + 1)]))
                {
                    await context.send("‚ö† –í –±—é–¥–∂–µ—Ç–µ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç —Ä–µ—Å—É—Ä—Å–æ–≤.", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                const accept = await InputManager.InputBoolean(context, "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?", current_keyboard)
                if(!accept)
                {
                    await context.send("üö´ –û—Ç–º–µ–Ω–µ–Ω–æ.", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                await Data.AddCountryResources(context.country.id, Prices[building.type.replace("building_of_", "") + "_lvl" + (building.level + 1)])
                await Buildings.update({level: building.level + 1}, {where: {id: building.id}})
                building.Upgrade(building.level + 1)
                await context.send(`‚úÖ –ü–æ—Å—Ç—Ä–æ–π–∫–∞ —É–ª—É—á—à–µ–Ω–∞ –¥–æ ${building.level} —É—Ä–æ–≤–Ω—è.`, {keyboard: keyboard.build(current_keyboard)})
            }
            catch (e)
            {
                await api.SendLogs(context, "BuildersAndControlsScripts/UpgradeCountryBuilding", e)
            }
        })
    }

    async GetCountryOfficials(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                let request = `‚Ñπ –ß–∏–Ω–æ–≤–Ω–∏–∫–∏ —Ñ—Ä–∞–∫—Ü–∏–∏ ${context.country.GetName(context.player.platform === "IOS")}:\n\n`
                let flag = true
                if(Data.officials[context.country.id])
                {
                    for(const official of Object.keys(Data.officials[context.country.id]))
                    {
                        flag = true
                        request += `üî∏ *id${official}(${Data.officials[context.country.id][official].nick}) –º–æ–∂–µ—Ç:\n`
                        if(Data.officials[context.country.id][official].canBeDelegate)
                        {
                            flag = false
                            request += "- –ø—Ä–∏–Ω–∏–º–∞—Ç—å –≥—Ä–∞–∂–¥–∞–Ω\n"
                        }
                        if(Data.officials[context.country.id][official].canBuildCity)
                        {
                            flag = false
                            request += "- –≤–æ–∑–≤–æ–¥–∏—Ç—å –≥–æ—Ä–æ–¥–∞\n"
                        }
                        if(Data.officials[context.country.id][official].canUseResources)
                        {
                            flag = false
                            request += "- —Ä–∞—Å–ø–æ—Ä—è–∂–∞—Ç—å—Å—è –±—é–¥–∂–µ—Ç–æ–º\n"
                        }
                        if(Data.officials[context.country.id][official].canUseArmy)
                        {
                            flag = false
                            request += "- —Ä–∞—Å–ø–æ—Ä—è–∂–∞—Ç—å—Å—è –∞—Ä–º–∏–µ–π\n"
                        }
                        if(Data.officials[context.country.id][official].canAppointOfficial)
                        {
                            flag = false
                            request += "- –Ω–∞–∑–Ω–∞—á–∞—Ç—å —á–∏–Ω–æ–≤–Ω–∏–∫–æ–≤\n"
                        }
                        if(Data.officials[context.country.id][official].canAppointMayors)
                        {
                            flag = false
                            request += "- –Ω–∞–∑–Ω–∞—á–∞—Ç—å –≥—Ä–∞–¥–æ–Ω–∞—á–∞–ª—å–Ω–∏–∫–æ–≤\n"
                        }
                        if(flag) request += "–Ω–∏—á–µ–≥–æ –Ω–µ –º–æ–∂–µ—Ç"
                        request += "\n"
                    }
                }
                else
                {
                    await context.send("‚ö† –í—ã –Ω–µ –Ω–∞–∑–Ω–∞—á–∞–ª–∏ —á–∏–Ω–æ–≤–Ω–∏–∫–æ–≤", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                await context.send(request, {keyboard: keyboard.build(current_keyboard)})
                return resolve()
            }
            catch (e)
            {
                await api.SendLogs(context, "BuildersAndControlsScripts/GetCountryOfficials", e)
            }
        })
    }

    async SetOfficial(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                const user = await InputManager.InputUser(context, "1Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä–æ–∫–∞", current_keyboard)
                if(!user) return resolve()
                if(user.dataValues.status === "worker")
                {
                    await context.send("üö´ –ù–∞–∑–Ω–∞—á–∞—Ç—å –∏–≥—Ä–æ–∫–æ–≤ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º ‚öô –†–∞–±–æ—Ç–Ω–∏–∫ –Ω–∞ –¥–æ–ª–∂–Ω–æ—Å—Ç—å —á–∏–Ω–æ–≤–Ω–∏–∫–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–æ", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                const userStatus = await PlayerStatus.findOne({where: {id: user.dataValues.id}})
                if(userStatus?.dataValues.id === context.country.leaderID)
                {
                    await context.send("‚ö† –≠—Ç–æ –ø—Ä–∞–≤–∏—Ç–µ–ª—å, –ø—Ä–∞–≤–∏—Ç–µ–ª—è –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å —á–∏–Ω–æ–≤–Ω–∏–∫–æ–º", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                if(userStatus?.dataValues.citizenship !== context.country.id)
                {
                    await context.send("‚ö† –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –Ω–∞–∑–Ω–∞—á–∏—Ç—å —á–∏–Ω–æ–≤–Ω–∏–∫–æ–º –∏–≥—Ä–æ–∫–∞, –Ω–µ –∏–º–µ—é—â–µ–≥–æ –≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ –≤–∞—à–µ–π —Ñ—Ä–∞–∫—Ü–∏–∏", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                const offInfo = await OfficialInfo.findOne({where: {id: user.dataValues.id}})
                if(offInfo)
                {
                    await context.send(`‚ö† –ò–≥—Ä–æ–∫ *id${user.dataValues.id}(${user.dataValues.nick}) —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏–Ω–æ–≤–Ω–∏–∫–æ–º`, {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                await OfficialInfo.create({
                    id: user.dataValues.id,
                    countryID: context.country.id,
                    nick: user.dataValues.nick
                })
                await Player.update({status: "official"}, {where: {id: user.dataValues.id}})
                if(Data.users[user.dataValues.id]) Data.users[user.dataValues.id].status = "official"
                await Data.LoadOfficials()
                await api.SendMessage(user.dataValues.id, `–ü—Ä–∞–≤–∏—Ç–µ–ª—å —Ñ—Ä–∞–∫—Ü–∏–∏ ${context.country.GetName(context.player.platform === "IOS")} –Ω–∞–∑–Ω–∞—á–∏–ª –≤–∞—Å —á–∏–Ω–æ–≤–Ω–∏–∫–æ–º`)
                await context.send(`‚úÖ –ò–≥—Ä–æ–∫ *id${user.dataValues.id}(${user.dataValues.nick}) –Ω–∞–∑–Ω–∞—á–µ–Ω —á–∏–Ω–æ–≤–Ω–∏–∫–æ–º`, {keyboard: keyboard.build(current_keyboard)})
            }
            catch (e)
            {
                await api.SendLogs(context, "BuildersAndControlsScripts/SetOfficial", e)
            }
        })
    }

    async ChangeOfficial(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                const officialButtons = []
                if (Data.officials[context.country.id])
                {
                    for(const official of Object.keys(Data.officials[context.country.id]))
                    {
                        officialButtons.push([Data.officials[context.country.id][official].nick, "ID" + official])
                    }
                }
                else
                {
                    await context.send("‚ö† –í –≤–∞—à–µ–π —Ñ—Ä–∞–∫—Ü–∏–∏ –Ω–µ—Ç —á–∏–Ω–æ–≤–Ω–∏–∫–æ–≤", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                let official = await InputManager.KeyboardBuilder(context, "–í—ã–±–µ—Ä–∏—Ç–µ —á–∏–Ω–æ–≤–Ω–∏–∫–∞", officialButtons, current_keyboard)
                if(!official) return resolve()
                official = Data.ParseButtonID(official)
                official = Data.officials[context.country.id][official]
                const request = "‚Ñπ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:\n\nüî∏–î–µ–ª–µ–≥–∞—Ç - –º–æ–∂–µ—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å –≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ\nüî∏–ì–æ—Ä–æ–¥–∞ - –º–æ–∂–µ—Ç –≤–æ–∑–≤–æ–¥–∏—Ç—å –≥–æ—Ä–æ–¥–∞\nüî∏–†–µ—Å—É—Ä—Å—ã - –º–æ–∂–µ—Ç —Ä–∞—Å–ø–æ—Ä—è–∂–∞—Ç—å—Å—è –±—é–¥–∂–µ—Ç–æ–º\nüî∏–ß–∏–Ω–æ–≤–Ω–∏–∫–∏ - –º–æ–∂–µ—Ç –Ω–∞–∑–Ω–∞—á–∞—Ç—å –¥—Ä—É–≥–∏—Ö —á–∏–Ω–æ–≤–Ω–∏–∫–æ–≤, –Ω–æ –Ω–µ –º–æ–∂–µ—Ç –≤—ã–¥–∞–≤–∞—Ç—å –∏–º –ø—Ä–∞–≤–∞\nüî∏–ì—Ä–∞–¥–æ–Ω–∞—á–∞–ª—å–Ω–∏–∫–∏ - –º–æ–∂–µ—Ç –º–µ–Ω—è—Ç—å –≥–ª–∞–≤ –≥–æ—Ä–æ–¥–æ–≤\nüî∏–ê—Ä–º–∏—è - –º–æ–∂–µ—Ç —Ä–∞—Å–ø–æ—Ä—è–∂–∞—Ç—å—Å—è –∞—Ä–º–∏–µ–π"
                const rulesData = [
                    ["üî∏–î–µ–ª–µ–≥–∞—Ç", "canBeDelegate", official.canBeDelegate],
                    ["üî∏–ì–æ—Ä–æ–¥–∞", "canBuildCity", official.canBuildCity],
                    ["üî∏–†–µ—Å—É—Ä—Å—ã", "canUseResources", official.canUseResources],
                    ["üî∏–ß–∏–Ω–æ–≤–Ω–∏–∫–∏", "canAppointOfficial", official.canAppointOfficial],
                    ["üî∏–ì—Ä–∞–¥–æ–Ω–∞—á–∞–ª—å–Ω–∏–∫–∏", "canAppointMayors", official.canAppointMayors],
                    ["üî∏–ê—Ä–º–∏—è", "canUseArmy", official.canUseArmy]
                ]
                const rules = await InputManager.RadioKeyboardBuilder(context, request, rulesData, current_keyboard)
                if(!rules) return resolve()
                let newRules = {}
                for(let i = 0; i < rules.length; i++)
                {
                    newRules[rules[i][0]] = rules[i][1]
                    official[rules[i][0]] = rules[i][1]
                }
                await OfficialInfo.update(newRules, {where: {id: official.id}})
                await api.SendMessage(official.id, `‚Ñπ –í–∞—à–∏ –ø—Ä–∞–≤–∞ –∫–∞–∫ —á–∏–Ω–æ–≤–Ω–∏–∫–∞ –∏–∑–º–µ–Ω–µ–Ω—ã, —Ç–µ–ø–µ—Ä—å –≤—ã:\n\nüî∏–ú–æ–∂–µ—Ç–µ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ - ${newRules.canBeDelegate?"–î–∞":"–ù–µ—Ç"}\nüî∏–ú–æ–∂–µ—Ç–µ –≤–æ–∑–≤–æ–¥–∏—Ç—å –≥–æ—Ä–æ–¥–∞ - ${newRules.canBuildCity?"–î–∞":"–ù–µ—Ç"}\nüî∏–ú–æ–∂–µ—Ç —Ä–∞—Å–ø–æ—Ä—è–∂–∞—Ç—å—Å—è –±—é–¥–∂–µ—Ç–æ–º - ${newRules.canUseResources?"–î–∞":"–ù–µ—Ç"}\nüî∏–ú–æ–∂–µ—Ç –Ω–∞–∑–Ω–∞—á–∞—Ç—å –¥—Ä—É–≥–∏—Ö —á–∏–Ω–æ–≤–Ω–∏–∫–æ–≤ - ${newRules.canAppointOfficial?"–î–∞":"–ù–µ—Ç"}\nüî∏–ú–æ–∂–µ—Ç –º–µ–Ω—è—Ç—å –≥–ª–∞–≤ –≥–æ—Ä–æ–¥–æ–≤ - ${newRules.canAppointMayors?"–î–∞":"–ù–µ—Ç"}\nüî∏–ú–æ–∂–µ—Ç —Ä–∞—Å–ø–æ—Ä—è–∂–∞—Ç—å—Å—è –∞—Ä–º–∏–µ–π - ${newRules.canUseArmy?"–î–∞":"–ù–µ—Ç"}`)
                await context.send("‚úÖ –ü—Ä–∞–≤–∞ —á–∏–Ω–æ–≤–Ω–∏–∫–∞ –∏–∑–º–µ–Ω–µ–Ω—ã", {keyboard: keyboard.build(current_keyboard)})
            }
            catch (e)
            {
                await api.SendLogs(context, "BuildersAndControlsScripts/ChangeOfficial", e)
            }
        })
    }

    async TakeAwayOfficial(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                const officialButtons = []
                if(Data.officials[context.country.id])
                {
                    for(const official of Object.keys(Data.officials[context.country.id]))
                    {
                        officialButtons.push([Data.officials[context.country.id][official].nick, "ID" + official])
                    }
                }
                else
                {
                    await context.send("‚ö† –í –≤–∞—à–µ–π —Ñ—Ä–∞–∫—Ü–∏–∏ –Ω–µ—Ç —á–∏–Ω–æ–≤–Ω–∏–∫–æ–≤", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                let official = await InputManager.KeyboardBuilder(context, "1Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ —á–∏–Ω–æ–≤–Ω–∏–∫–∞", officialButtons, current_keyboard)
                if(!official) return resolve()
                official = Data.ParseButtonID(official)
                official = Data.officials[context.country.id][official]
                const accept = await InputManager.InputBoolean(context, `‚ùì –í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–±—Ä–∞—Ç—å –ø—Ä–∞–≤–∞ —á–∏–Ω–æ–≤–Ω–∏–∫–∞ —É –∏–≥—Ä–æ–∫–∞ *id${official.id}(${official.nick})?`)
                if(!accept)
                {
                    await context.send("üö´ –û—Ç–º–µ–Ω–µ–Ω–æ", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                await OfficialInfo.destroy({where: {id: official.id}})
                const user = await Player.findOne({where: {id: official.id}})
                if(user.dataValues.status !== "worker")
                {
                    user.set({status: "citizen"})
                    await user.save()
                    if(Data.users[user.dataValues.id]) Data.users[user.dataValues.id].status = "citizen"
                }
                await api.SendMessage(official.id, `‚ö† –ü—Ä–∞–≤–∏—Ç–µ–ª—å —Ñ—Ä–∞–∫—Ü–∏–∏ ${context.country.GetName(context.player.platform === "IOS")} –∑–∞–±—Ä–∞–ª —É –≤–∞—Å –ø—Ä–∞–≤–∞ —á–∏–Ω–æ–≤–Ω–∏–∫–∞.`)
                await Data.LoadOfficials()
                await context.send(`‚úÖ –ò–≥—Ä–æ–∫ *id${user.dataValues.id}(${user.dataValues.nick}) –ª–∏—à–µ–Ω —Å—Ç–∞—Ç—É—Å–∞ —á–∏–Ω–æ–≤–Ω–∏–∫–∞`, {keyboard: keyboard.build(current_keyboard)})
                return resolve()
            }
            catch (e)
            {
                await api.SendLogs(context, "BuildersAndControlsScripts/TakeAwayOfficial", e)
            }
        })
    }

    async TakeAwayCitizenship(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                const user = await InputManager.InputUser(context, "1Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä–æ–∫–∞", current_keyboard)
                if(!user) return resolve()
                const status = await PlayerStatus.findOne({where: {id: user.dataValues.id}})
                if(status.dataValues.citizenship !== context.country.id)
                {
                    await context.send(`‚ö† –ò–≥—Ä–æ–∫ *id${user.dataValues.id}(${user.dataValues.nick}) –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≥—Ä–∞–∂–¥–∞–Ω–∏–Ω–æ–º —Ñ—Ä–∞–∫—Ü–∏–∏ ${context.country.GetName(context.player.platform === "IOS")}`, {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                if(user.dataValues.id === context.country.leaderID)
                {
                    await context.send(`üö´ –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –∑–∞–±—Ä–∞—Ç—å –≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ —É –ø—Ä–∞–≤–∏—Ç–µ–ª—è`, {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                if(user.dataValues.status?.match(/official|leader/))
                {
                    await context.send(`‚ö† –ü–µ—Ä–µ–¥ —Ç–µ–º –∫–∞–∫ –∑–∞–±—Ä–∞—Ç—å –≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ —É –∏–≥—Ä–æ–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–º–µ—Å—Ç–∏—Ç—å –µ–≥–æ —Å –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ —á–∏–Ω–æ–≤–Ω–∏–∫–∞`, {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                const accept = await InputManager.InputBoolean(context, `‚ùì –õ–∏—à–∏—Ç—å –∏–≥—Ä–æ–∫–∞ *id${user.dataValues.id}(${user.dataValues.nick}) –≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–∞ —Ñ—Ä–∞–∫—Ü–∏–∏ ${context.country.GetName(context.player.platform === "IOS")}?`, current_keyboard)
                if(!accept)
                {
                    await context.send("üö´ –û—Ç–º–µ–Ω–µ–Ω–æ", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                status.set({citizenship: null})
                await status.save()
                if(user.dataValues.status !== "worker")
                {
                    await Player.update({status: "stateless"}, {where: {id: user.dataValues.id}})
                    if(Data.users[user.dataValues.id])
                    {
                        Data.users[user.dataValues.id].status = "stateless"
                    }
                }
                if(Data.users[user.dataValues.id])
                {
                    Data.users[user.dataValues.id].citizenship = null
                }
                await api.SendMessage(user.dataValues.id, `‚ö† –ü—Ä–∞–≤–∏—Ç–µ–ª—å—Å—Ç–≤–æ —Ñ—Ä–∞–∫—Ü–∏–∏ ${context.country.GetName(context.player.platform === "IOS")} –ª–∏—à–∏–ª–æ –≤–∞—Å –≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–∞`)
                await context.send("‚úÖ –ò–≥—Ä–æ–∫ –ª–∏—à–µ–Ω –≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–∞", {keyboard: keyboard.build(current_keyboard)})
                return resolve()
            }
            catch (e)
            {
                await api.SendLogs(context, "BuildersAndControlsScripts/TakeAwayCitizenship", e)
            }
        })
    }

    async TransferPower(context, current_keyboard, scenes)
    {
        return new Promise(async (resolve) => {
            try
            {

                let user = await InputManager.InputUser(context, "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–µ–º–Ω–∏–∫–∞ (—É –Ω–µ–≥–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ —Ñ—Ä–∞–∫—Ü–∏–∏)", current_keyboard)
                if(!user) return resolve()
                if(user.dataValues.status === "worker")
                {
                    await context.send("üö´ –ù–∞–∑–Ω–∞—á–∞—Ç—å –∏–≥—Ä–æ–∫–æ–≤ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º ‚öô –†–∞–±–æ—Ç–Ω–∏–∫ –Ω–∞ –¥–æ–ª–∂–Ω–æ—Å—Ç—å —á–∏–Ω–æ–≤–Ω–∏–∫–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–æ", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                const userStatus = await PlayerStatus.findOne({where: {id: user.dataValues.id}})
                if(userStatus?.dataValues.citizenship !== context.country.id)
                {
                    await context.send("‚ö† –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–¥–∞—Ç—å –≤–ª–∞—Å—Ç—å –∏–≥—Ä–æ–∫—É, –Ω–µ –∏–º–µ—é—â–µ–º—É –≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ –≤–∞—à–µ–π —Ñ—Ä–∞–∫—Ü–∏–∏", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                const kb = [
                    ["üíº –ß–∏–Ω–æ–≤–Ω–∏–∫", "official"],
                    ["üí≥ –ì—Ä–∞–∂–¥–∞–Ω–∏–Ω", "citizen"],
                ]
                const giveState = (status) => {
                    if(status === "official") return "üíº –ß–∏–Ω–æ–≤–Ω–∏–∫–æ–º"
                    if(status === "citizen") return "üí≥ –ì—Ä–∞–∂–¥–∞–Ω–∏–Ω–æ–º"
                }
                let state = await InputManager.KeyboardBuilder(context, "–í—ã–±–µ—Ä–∏—Ç–µ, –∫–µ–º –≤—ã —Å—Ç–∞–Ω–µ—Ç–µ –ø–æ—Å–ª–µ –æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–æ–Ω–∞", kb, current_keyboard)
                if(!state) return resolve()
                let access = await InputManager.InputBoolean(context, `–ù–∞–∑–Ω–∞—á–∏—Ç—å *id${user.dataValues.id}(${user.dataValues.nick}) –Ω–æ–≤—ã–º –ø—Ä–∞–≤–∏—Ç–µ–ª–µ–º —Ñ—Ä–∞–∫—Ü–∏–∏ ${context.country.GetName(context.player.platform === "IOS")}?`, current_keyboard)
                if(!access) return resolve()
                access = await InputManager.InputBoolean(context, `–í—ã –±—É–¥–µ—Ç–µ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã ${giveState(state)}`, current_keyboard)
                if(!access) return resolve()
                access = await InputManager.InputBoolean(context, `–°–ø—Ä–∞—à–∏–≤–∞—é –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑ - –í—ã —É–≤–µ—Ä–µ–Ω—ã?`, current_keyboard)
                if(!access) return resolve()
                if(state === "official")
                {
                    await OfficialInfo.findOrCreate({
                        where: {id: context.player.id},
                        defaults: {id: context.player.id, nick: context.player.nick, countryID: context.country.id}
                    })
                }
                await Player.update({status: state}, {where: {id: context.player.id}})
                await Player.update({status: "leader"}, {where: {id: user.dataValues.id}})
                await OfficialInfo.destroy({where: {id: user.dataValues.id}})
                context.country.leaderID = user.dataValues.id
                if(Data.users[user.dataValues.id]) Data.users[user.dataValues.id].status = "leader"
                await Country.update({leaderID: user.dataValues.id}, {where: {id: context.country.id}})
                await api.SendMessage(user.dataValues.id, `üëë –ü—Ä–∞–≤–∏—Ç–µ–ª—å —Ñ—Ä–∞–∫—Ü–∏–∏ ${context.country.GetName(context.player.platform === "IOS")} –ø–µ—Ä–µ–¥–∞–ª –≤–∞–º –≤–ª–∞—Å—Ç—å, –≤–∞—à —Å—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ "üëë –ü—Ä–∞–≤–∏—Ç–µ–ª—å"`)
                await context.send(`–í–ª–∞—Å—Ç—å –ø–µ—Ä–µ–¥–∞–Ω–∞, –≤—ã —Å—Ç–∞–ª–∏ ${giveState(state)}`, {keyboard: keyboard.build(scenes.GetMenuKeyboard(context))})
                context.player.state = scenes.MenuScene
                return resolve()
            }
            catch (e)
            {
                await api.SendLogs(context, "BuildersAndControlsScripts/TakeAwayCitizenship", e)
            }
        })
    }

    async OfferMarry(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                if(context.player.isMarried)
                {
                    await context.send("‚ö† –í—ã —É–∂–µ –ø–æ–º–æ–ª–≤–ª–µ–Ω—ã", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                const user = await InputManager.InputUser(context, "1Ô∏è‚É£ –ö–æ–º—É –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ?", current_keyboard)
                if(!user) return resolve()
                const userInfo = await PlayerInfo.findOne({where: {id: user.dataValues.id}})
                if(userInfo.dataValues.marriedID !== null)
                {
                    await context.send(`‚ö† ${await NameLibrary.GetPlayerNick(user.dataValues.id)} —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç –≤ –±—Ä–∞–∫–µ!`, {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                if(NameLibrary.GetGender(user.dataValues.gender) === context.player.gender && !context.player.nationality.match(/–≥—Ä–µ–∫/i))
                {
                    await context.send("‚úù –ú—ã —Ç–∞–∫–æ–µ –Ω–µ –æ–¥–æ–±—Ä—è–µ–º.", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                const text = await InputManager.InputString(context, "2Ô∏è‚É£ –ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.", current_keyboard)
                if (!text) return resolve()

                const accept = await InputManager.InputBoolean(context, `‚Ñπ –¢–µ–∫—Å—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è:\n${text}\n\n–°–¥–µ–ª–∞—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ –±—Ä–∞–∫ –∏–≥—Ä–æ–∫—É *id${user.dataValues.id}(${user.dataValues.nick})?\n\n‚Ñπ –ï—Å–ª–∏ –∏–≥—Ä–æ–∫ —Å–æ–≥–ª–∞—Å–∏—Ç—Å—è, —Ç–æ —É –≤–∞—Å –±—É–¥–µ—Ç –∑–∞–∫–ª—é—á–µ–Ω –±—Ä–∞–∫.`, current_keyboard)
                if(!accept)
                {
                    await context.send("üö´ –û—Ç–º–µ–Ω–µ–Ω–æ", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                await api.api.messages.send({
                    user_id: user.dataValues.id,
                    random_id: Math.round(Math.random() * 100000),
                    message: `üíå –ò–≥—Ä–æ–∫ *id${context.player.id}(${context.player.nick}) –æ—Ç–ø—Ä–∞–≤–∏–ª –≤–∞–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Ä—É–∫–∏ –∏ —Å–µ—Ä–¥—Ü–∞ —Å —Ç–µ–∫—Å—Ç–æ–º:\n${text}`,
                    keyboard: keyboard.build([[keyboard.acceptCallbackButton({command: "merry", item: context.player.id}), keyboard.declineCallbackButton({command: "decline_merry", item: context.player.id})]]).inline().oneTime()
                })
                Data.users[context.player.id].isMarried = true
                await context.send("‚úÖ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ", {keyboard: keyboard.build(current_keyboard)})
                return resolve()
            }
            catch (e)
            {
                await api.SendLogs(context, "BuildersAndControlsScripts/OfferMarry", e)
            }
        })
    }

    async Divorce(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                if(!context.player.marriedID)
                {
                    await context.send("‚ö† –í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –±—Ä–∞–∫–µ.", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                const accept = await InputManager.InputBoolean(context, `‚ùì –í—ã —Ö–æ—Ç–∏—Ç–µ —Ä–∞—Å—Ç–æ—Ä–≥–Ω—É—Ç—å –±—Ä–∞–∫ —Å –∏–≥—Ä–æ–∫–æ–º ${await NameLibrary.GetPlayerNick(context.player.marriedID)}?\n‚Ñπ –ï—Å–ª–∏ –∏–≥—Ä–æ–∫ —Ç–æ–∂–µ —Å–æ–≥–ª–∞—Å–∏—Ç—Å—è –Ω–∞ —ç—Ç–æ, —Ç–æ –≤–∞—à –±—Ä–∞–∫ –±—É–¥–µ—Ç —Ä–∞—Å—Ç–æ—Ä–≥–Ω—É—Ç.`, current_keyboard)
                if(!accept)
                {
                    await context.send("üö´ –û—Ç–º–µ–Ω–µ–Ω–æ")
                    return resolve()
                }
                let player = await Player.findOne({where: {id: context.player.marriedID}})
                await PlayerInfo.update({marriedID: null}, {where: {id: context.player.id}})
                await PlayerInfo.update({marriedID: null}, {where: {id: context.player.marriedID}})
                if(Data.users[context.player.marriedID])
                {
                    Data.users[context.player.marriedID].marriedID = null
                    Data.users[context.player.marriedID].isMarried = false
                }
                context.player.marriedID = null
                context.player.isMarried = false
                await api.SendMessage(player.dataValues.id, `üíî –ë–æ–ª—å—à–µ *${context.player.GetName()} –Ω–µ –≤–∞—à${context.player.gender ? " –º—É–∂" : "–∞ –∂–µ–Ω–∞"}`)
                await context.send(`üíî *id${player.dataValues.id}(${player.dataValues.nick}) –±–æ–ª—å—à–µ –Ω–µ –≤–∞—à${player.dataValues.gender ? " –º—É–∂" : "–∞ –∂–µ–Ω–∞"}`, {keyboard: keyboard.build(current_keyboard)})
            }
            catch (e)
            {
                await api.SendLogs(context, "BuildersAndControlsScripts/Divorce", e)
            }
        })
    }

    async GetCitizenship(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                let temp = null
                let country = null
                let time = new Date()
                const reg = new Date(context.player.createdAt)
                reg.setDate(reg.getDate() + 7)
                for(const key of Data.countries)
                {
                    if(key?.tags)
                    {
                        temp = new RegExp(key.tags)
                        if(context.command.match(temp))
                        {
                            country = key
                            break
                        }
                    }
                }
                if(context.player.lastCitizenship - time > 0 && reg - time < 0)
                {
                    await context.send("‚ö† –ú–µ–Ω—è—Ç—å –≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é")
                    return
                }
                if(context.player.status.match(/official|leader/))
                {
                    await context.send("‚ö† –ü—Ä–∞–≤–∏—Ç–µ–ª–∏ –∏ —á–∏–Ω–æ–≤–Ω–∏–∫–∏ –Ω–µ –º–æ–≥—É—Ç –º–µ–Ω—è—Ç—å –≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                if(Data.timeouts["get_citizenship_" + context.player.id])
                {
                    await context.send("‚ö† –í—ã —É–∂–µ –ø–æ–¥–∞–ª–∏ –Ω–∞ –≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                if(context.player.citizenship !== null)
                {
                    const firstAccept = await InputManager.InputBoolean(context, `‚ùì –í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç –≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–∞ —Ñ—Ä–∞–∫—Ü–∏–∏ ${Data.GetCountryName(context.player.citizenship)}?\n–ü–æ—Å–ª–µ –æ—Ç–∫–∞–∑–∞ –≤–∞—à —Å—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–∏—Ç—Å—è –Ω–∞ \"–∞–ø–∞—Ç—Ä–∏–¥\".`, current_keyboard)
                    if(!firstAccept) return resolve()
                }
                country = await InputManager.KeyboardBuilder(context, "1Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ —Ñ—Ä–∞–∫—Ü–∏—é, –≥—Ä–∞–∂–¥–∞–Ω–∏–Ω–æ–º –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–∏—Ç–µ —Å—Ç–∞—Ç—å", Data.GetCountryButtons(), current_keyboard)
                if(!country) return resolve()
                country = Data.ParseButtonID(country)
                if(country === context.player.citizenship)
                {
                    await context.send("‚ö† –í—ã —É–∂–µ —è–≤–ª—è–µ—Ç–µ—Å—å –≥—Ä–∞–∂–¥–∞–Ω–∏–Ω–æ–º —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω—ã.", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                await CrossStates.GetCitizenship(context.player.id, country)
                await context.send("‚úÖ –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.\n\n ‚Ñπ –ü—Ä–∞–≤–∏—Ç–µ–ª—å –∏–ª–∏ —á–∏–Ω–æ–≤–Ω–∏–∫–∏ –≤ —Ç–µ—á–µ–Ω–∏–∏ 24 —á–∞—Å–æ–≤ —Ä–∞—Å—Å–º–æ—Ç—Ä—è—Ç –≤–∞—à—É –∫–∞–Ω–¥–∏–¥–∞—Ç—É—Ä—É –∏ –ø—Ä–∏–º—É—Ç —Ä–µ—à–µ–Ω–∏–µ.", {keyboard: keyboard.build(current_keyboard)})
            }
            catch (e)
            {
                await api.SendLogs(context, "BuildersAndControlsScripts/GetCitizenship", e)
            }
        })
    }

    async RefuseCitizenship(context, current_keyboard, scenes)
    {
        return new Promise(async (resolve) => {
            try
            {
                if(context.player.status.match(/official|leader/))
                {
                    await context.send("‚ö† –ü—Ä–∞–≤–∏—Ç–µ–ª–∏ –∏ —á–∏–Ω–æ–≤–Ω–∏–∫–∏ –Ω–µ –º–æ–≥—É—Ç –æ—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç –≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–∞", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                const firstAccept = await InputManager.InputBoolean(context, `‚ùì –í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç –≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–∞ —Ñ—Ä–∞–∫—Ü–∏–∏ ${Data.GetCountryName(context.player.citizenship)}?\n–ü–æ—Å–ª–µ –æ—Ç–∫–∞–∑–∞ –≤–∞—à —Å—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–∏—Ç—Å—è –Ω–∞ \"–∞–ø–∞—Ç—Ä–∏–¥\" –∏ –ø—Ä–æ–ø–∞–¥–µ—Ç –ø—Ä–æ–ø–∏—Å–∫–∞, –≤–∞—à–µ –∏–º—É—â–µ—Å—Ç–≤–æ –æ—Å—Ç–∞–Ω–µ—Ç—Å—è —É –≤–∞—Å.`, current_keyboard)
                if(!firstAccept)
                {
                    await context.send("üö´ –û—Ç–∫–ª–æ–Ω–µ–Ω–æ", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                const secondAccept = await  InputManager.InputBoolean(context, "‚ùì –í—ã —É–≤–µ—Ä–µ–Ω—ã?", current_keyboard)
                if(!secondAccept)
                {
                    await context.send("üö´ –û—Ç–∫–ª–æ–Ω–µ–Ω–æ", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                await CrossStates.RefuseCitizenship(context.player.id)
                await context.send("‚Ñπ –¢–µ–ø–µ—Ä—å –≤—ã –∞–ø–∞—Ç—Ä–∏–¥.", {keyboard: keyboard.build(await scenes.keyboard(context))})
            }
            catch (e)
            {
                await api.SendLogs(context, "BuildersAndControlsScripts/RefuseCitizenship", e)
            }
        })
    }

    async GetRegistration(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                if(Data.timeouts["get_registration_" + context.player.id])
                {
                    await context.send("‚ö† –í—ã —É–∂–µ –ø–æ–¥–∞–ª–∏ –∑–∞—è–≤–∫—É", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                await api.api.messages.send({
                    user_id: Data.cities[context.player.location].leaderID,
                    random_id: Math.round(Math.random() * 100000),
                    message: `ü™™ –ò–≥—Ä–æ–∫ *id${context.player.id}(${context.player.nick}) –ø–æ–¥–∞–ª –∑–∞—è–≤–∫—É –Ω–∞ –ø—Ä–æ–ø–∏—Å–∫—É –≤ –≤–∞—à–µ–º –≥–æ—Ä–æ–¥–µ\n\n${context.player.GetInfo()}`,
                    keyboard: keyboard.build([[keyboard.acceptCallbackButton({command: "give_registration", item: context.player.id, parameter: context.player.location}), keyboard.declineCallbackButton({command: "decline_registration", item: context.player.id, parameter: context.player.location})]]).inline().oneTime()
                })
                const cityID = context.player.location
                let time = new Date()
                time.setHours(time.getHours() + 24)
                Data.timeouts["get_registration_" + context.player.id] = {
                    type: "user_timeout",
                    subtype: "get_registration",
                    userId: context.player.id,
                    time: time,
                    cityID: cityID,
                    timeout: setTimeout(async () => {
                        await api.SendMessage(context.player.id, `‚Ñπ –í—ã –ø–æ–¥–∞–ª–∏ –∑–∞—è–≤–∫—É –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ –≥–æ—Ä–æ–¥–µ ${Data.cities[cityID].name}, –Ω–æ –ø—Ä–æ—à–ª–æ —É–∂–µ 24 —á–∞—Å–∞, –∏ –Ω–∏–∫—Ç–æ –µ—ë –Ω–µ –ø—Ä–∏–Ω—è–ª, –ø–æ—ç—Ç–æ–º—É –æ–Ω–∞ –∞–Ω–Ω—É–ª–∏—Ä—É–µ—Ç—Å—è.`)
                        delete Data.timeouts["get_registration_" + context.player.id]
                    }, 86400000)
                }
                await context.send("‚úÖ –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.\n\n‚Ñπ –ì–ª–∞–≤–∞ –≥–æ—Ä–æ–¥–∞ –≤ —Ç–µ—á–µ–Ω–∏–∏ 24 —á–∞—Å–æ–≤ —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç –≤–∞—à—É –∫–∞–Ω–¥–∏–¥–∞—Ç—É—Ä—É –∏ –ø—Ä–∏–º–µ—Ç —Ä–µ—à–µ–Ω–∏–µ.", {keyboard: keyboard.build(current_keyboard)})
            }
            catch (e)
            {
                await api.SendLogs(context, "BuildersAndControlsScripts/GetRegistration", e)
            }
        })
    }

    async RefuseRegistration(context, current_keyboard, scenes)
    {
        return new Promise(async (resolve) => {
            try
            {
                const firstAccept = await InputManager.InputBoolean(context, `‚ùì –í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç –ø—Ä–æ–ø–∏—Å–∫–∏ –≤ –≥–æ—Ä–æ–¥–µ ${Data.GetCityName(context.player.registration)}?`, current_keyboard)
                if(!firstAccept)
                {
                    await context.send("üö´ –û—Ç–∫–ª–æ–Ω–µ–Ω–æ", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                const secondAccept = await  InputManager.InputBoolean(context, "‚ùì –í—ã —É–≤–µ—Ä–µ–Ω—ã?", current_keyboard)
                if(!secondAccept)
                {
                    await context.send("üö´ –û—Ç–∫–ª–æ–Ω–µ–Ω–æ", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                await PlayerInfo.update({registration: null},{where: {id: context.player.id}})
                context.player.registration = null
                context.send("‚Ñπ –¢–µ–ø–µ—Ä—å –≤—ã –±–µ–∑ –ø—Ä–æ–ø–∏—Å–∫–∏.", {keyboard: keyboard.build(await scenes.keyboard(context))})
            }
            catch (e)
            {
                await api.SendLogs(context, "BuildersAndControlsScripts/RefuseRegistration", e)
            }
        })
    }

    async Transaction(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                let kb = [
                    ["üîÄ –ò–≥—Ä–æ–∫—É", "user"],
                    ["üîÄ –ì–æ—Ä–æ–¥—É", "city"]
                ]
                if(context.player.location === Data.countries[context.player.countryID].capitalID) kb.push(["üîÄ –§—Ä–∞–∫—Ü–∏–∏", "country"])
                const action = await InputManager.KeyboardBuilder(context, "1Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ, –∫—É–¥–∞ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ—Å—É—Ä—Å—ã", kb, current_keyboard)
                if(!action) return resolve()
                action === "user" && await this.UserToUserTransaction(context, current_keyboard)
                action === "city" && await this.UserToCityTransaction(context, current_keyboard)
                action === "country" && await this.UserToCountryTransaction(context, current_keyboard)
                return resolve()
            }
            catch (e)
            {
                await api.SendLogs(context, "BuildersAndControlsScripts/Transaction", e)
            }
        })
    }

    async UserToCountryTransaction(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                const resources = [[keyboard.moneyButton, keyboard.diamondButton],
                    [keyboard.wheatButton, keyboard.woodButton, keyboard.stoneButton],
                    [keyboard.ironButton, keyboard.copperButton, keyboard.silverButton],
                    [keyboard.cancelButton]]
                const resource = await InputManager.ChooseButton(context, `${context.player.GetResources()}\n\n2Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–∫–æ–π —Ä–µ—Å—É—Ä—Å –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –≤ –±—é–¥–∂–µ—Ç —Ñ—Ä–∞–∫—Ü–∏–∏ ${Data.countries[context.player.countryID].GetName(context.player.platform === "IOS")}:`, resources)
                if (!resource) return resolve()
                if(resource.match(/cancel/))
                {
                    context.send("üö´ –ü–µ—Ä–µ–≤–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                if(Data.users[context.player.id][resource] === 0)
                {
                    context.send("‚ö† –£ –≤–∞—Å –Ω–µ—Ç —ç—Ç–æ–≥–æ —Ä–µ—Å—É—Ä—Å–∞.", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                let count
                if(Data.users[context.player.id][resource] > 1)
                {
                    count = await InputManager.InputInteger(context, `3Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (–æ—Ç 1 –¥–æ ${Data.users[context.player.id][resource]} —à—Ç)`, current_keyboard, 1, Data.users[context.player.id][resource])
                    if(count === null) return resolve()
                }
                else
                {
                    count = 1
                }
                const accept = await InputManager.InputBoolean(context, `4Ô∏è‚É£ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥:\n\n–ö–æ–º—É: —Ñ—Ä–∞–∫—Ü–∏—è ${Data.countries[context.player.countryID].GetName(context.player.platform === "IOS")}\n–†–µ—Å—É—Ä—Å: ${NameLibrary.GetResourceName(resource)}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${count} —à—Ç\n\n–í–µ—Ä–Ω–æ?`, current_keyboard)
                if(!accept)
                {
                    context.send("üö´ –ü–µ—Ä–µ–≤–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }

                let objIN = {}
                let objOUT = {}
                objIN[resource] = count * -1
                objOUT[resource] = count

                await Data.AddCountryResources(context.player.countryID, objOUT)
                await Data.AddPlayerResources(context.player.id, objIN)
                await api.SendMessage(Data.countries[context.player.countryID].leaderID, `‚úÖ –í –±—é–¥–∂–µ—Ç —Ñ—Ä–∞–∫—Ü–∏–∏ ${Data.countries[context.player.countryID].GetName(context.player.platform === "IOS")} –ø–æ—Å—Ç—É–ø–∏–ª –ø–µ—Ä–µ–≤–æ–¥:\n\n–û—Ç –∫–æ–≥–æ: *id${context.player.id}(${context.player.nick})\n–†–µ—Å—É—Ä—Å: ${NameLibrary.GetResourceName(resource)}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${count} —à—Ç`)
                await context.send("‚úÖ –£—Å–ø–µ—à–Ω–æ", {keyboard: keyboard.build(current_keyboard)})
                return resolve()
            }
            catch (e)
            {
                await api.SendLogs(context, "BuildersAndControlsScripts/UserToCountryTransaction", e)
            }
        })
    }

    async UserToCityTransaction(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                const resources = [[keyboard.moneyButton, keyboard.diamondButton],
                    [keyboard.wheatButton, keyboard.woodButton, keyboard.stoneButton],
                    [keyboard.ironButton, keyboard.copperButton, keyboard.silverButton],
                    [keyboard.cancelButton]]
                const resource = await InputManager.ChooseButton(context, `${context.player.GetResources()}\n\n2Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–∫–æ–π —Ä–µ—Å—É—Ä—Å –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –≥–æ—Ä–æ–¥—É ${Data.cities[context.player.location].name}:`, resources)
                if (!resource) return resolve()
                if(resource.match(/cancel/))
                {
                    context.send("üö´ –ü–µ—Ä–µ–≤–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                if(Data.users[context.player.id][resource] === 0)
                {
                    context.send("‚ö† –£ –≤–∞—Å –Ω–µ—Ç —ç—Ç–æ–≥–æ —Ä–µ—Å—É—Ä—Å–∞.", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                let count
                if(Data.users[context.player.id][resource] > 1)
                {
                    count = await InputManager.InputInteger(context, `3Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (–æ—Ç 1 –¥–æ ${Data.users[context.player.id][resource]} —à—Ç)`, current_keyboard, 1, Data.users[context.player.id][resource])
                    if(count === null) return resolve()
                }
                else
                {
                    count = 1
                }
                const accept = await InputManager.InputBoolean(context, `4Ô∏è‚É£ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥:\n\n–ö–æ–º—É: –≥–æ—Ä–æ–¥ ${Data.cities[context.player.location].name}\n–†–µ—Å—É—Ä—Å: ${NameLibrary.GetResourceName(resource)}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${count} —à—Ç\n\n–í–µ—Ä–Ω–æ?`, current_keyboard)
                if(!accept)
                {
                    context.send("üö´ –ü–µ—Ä–µ–≤–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }

                let objIN = {}
                let objOUT = {}
                objIN[resource] = count * -1
                objOUT[resource] = count

                await Data.AddCityResources(context.player.location, objOUT)
                await Data.AddPlayerResources(context.player.id, objIN)
                await api.SendMessage(Data.cities[context.player.location].leaderID, `‚úÖ –í –±—é–¥–∂–µ—Ç –≥–æ—Ä–æ–¥–∞ ${Data.cities[context.player.location].name} –ø–æ—Å—Ç—É–ø–∏–ª –ø–µ—Ä–µ–≤–æ–¥:\n\n–û—Ç –∫–æ–≥–æ: *id${context.player.id}(${context.player.nick})\n–†–µ—Å—É—Ä—Å: ${NameLibrary.GetResourceName(resource)}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${count} —à—Ç`)
                await context.send("‚úÖ –£—Å–ø–µ—à–Ω–æ", {keyboard: keyboard.build(current_keyboard)})
                return resolve()
            }
            catch (e)
            {
                await api.SendLogs(context, "BuildersAndControlsScripts/UserToCityTransaction", e)
            }
        })
    }

    async UserToUserTransaction(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                const user = await InputManager.InputUser(context, "2Ô∏è‚É£ –ö–æ–º—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ —Ä–µ—Å—É—Ä—Å?", current_keyboard)
                if(!user) return resolve()
                const getTax = async (toUserID) => {
                    const user = await PlayerStatus.findOne({where: {id: toUserID}})
                    if(user.dataValues.countryID === context.player.countryID && context.player.citizenship && user.dataValues.citizenship) return {outTax: 0, inTax: 0}
                    let outTax = context.player.countryID === context.player.citizenship ? Data.countries[context.player.countryID].citizenTax : Data.countries[context.player.countryID].nonCitizenTax
                    let inTax = user.dataValues.countryID === user.dataValues.citizenship ? Data.countries[user.dataValues.countryID].citizenTax : Data.countries[user.dataValues.countryID].nonCitizenTax
                    if(context.player.countryID === context.player.citizenship)
                    {
                        let countryTax = await CountryTaxes.findOne({where: {countryID: user.dataValues.countryID, toCountryID: context.player.countryID}})
                        inTax = countryTax ? countryTax.dataValues.tax : Data.countries[user.dataValues.countryID].nonCitizenTax
                    }
                    return {outTax: outTax, inTax: inTax}
                }
                if(user.dataValues.id === context.player.id)
                {
                    context.send("üö´ –ö–∞–∫–æ–π —Å–º—ã—Å–ª –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å —Å–∞–º–æ–º—É —Å–µ–±–µ?", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                await context.send(context.player.GetResources())
                const resources = [[keyboard.moneyButton, keyboard.diamondButton],
                    [keyboard.wheatButton, keyboard.woodButton, keyboard.stoneButton],
                    [keyboard.ironButton, keyboard.copperButton, keyboard.silverButton],
                    [keyboard.cancelButton]]
                const resource = await InputManager.ChooseButton(context, `3Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–∫–æ–π —Ä–µ—Å—É—Ä—Å –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –∏–≥—Ä–æ–∫—É *id${user.dataValues.id}(${user.dataValues.nick}):`, resources)
                if (!resource) return resolve()
                if(resource.match(/cancel/))
                {
                    context.send("üö´ –ü–µ—Ä–µ–≤–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                if(Data.users[context.player.id][resource] === 0)
                {
                    context.send("‚ö† –£ –≤–∞—Å –Ω–µ—Ç —ç—Ç–æ–≥–æ —Ä–µ—Å—É—Ä—Å–∞.", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                let count
                if(Data.users[context.player.id][resource] > 1)
                {
                    count = await InputManager.InputInteger(context, `4Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (–æ—Ç 1 –¥–æ ${Data.users[context.player.id][resource]} —à—Ç)`, current_keyboard, 1, Data.users[context.player.id][resource])
                    if(count === null) return resolve()
                }
                else
                {
                    count = 1
                }
                const accept = await InputManager.InputBoolean(context, `5Ô∏è‚É£ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥:\n\n–ö–æ–º—É: *id${user.dataValues.id}(${user.dataValues.nick})\n–†–µ—Å—É—Ä—Å: ${NameLibrary.GetResourceName(resource)}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${count} —à—Ç\n\n–í–µ—Ä–Ω–æ?`, current_keyboard)
                if(!accept)
                {
                    context.send("üö´ –ü–µ—Ä–µ–≤–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }

                let objIN = {}
                let objOUT = {}
                objIN[resource] = count * -1
                objOUT[resource] = count

                const {outTax, inTax} = await getTax(user.dataValues.id)
                if(outTax === 100 || inTax === 100)
                {
                    await context.send("‚ö† –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω 100% –Ω–∞–ª–æ–≥, –Ω–µ—Ç —Å–º—ã—Å–ª–∞ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å —Ä–µ—Å—É—Ä—Å—ã")
                    return
                }
                if(outTax === 0 || inTax === 0)
                {
                    await Data.AddPlayerResources(user.dataValues.id, objOUT)
                    await Data.AddPlayerResources(context.player.id, objIN)
                    await api.SendNotification(user.dataValues.id, `‚úÖ –í–∞–º –ø–æ—Å—Ç—É–ø–∏–ª –ø–µ—Ä–µ–≤–æ–¥ –æ—Ç –∏–≥—Ä–æ–∫–∞ ${context.player.GetName()} –≤ —Ä–∞–∑–º–µ—Ä–µ:\n${NameLibrary.GetPrice(objIN)}`)
                    await context.send("‚úÖ –£—Å–ø–µ—à–Ω–æ", {keyboard: keyboard.build(current_keyboard)})
                    await Transactions.create({
                        fromID: context.player.id,
                        toID: user.dataValues.id,
                        type: "ptp",
                        money: objOUT.money ? objOUT.money : null,
                        stone: objOUT.stone ? objOUT.stone : null,
                        wood: objOUT.wood ? objOUT.wood : null,
                        wheat: objOUT.wheat ? objOUT.wheat : null,
                        iron: objOUT.iron ? objOUT.iron : null,
                        copper: objOUT.copper ? objOUT.copper : null,
                        silver: objOUT.silver ? objOUT.silver : null,
                        diamond: objOUT.diamond ? objOUT.diamond : null
                    })
                }
                else
                {
                    let kb = [[], []]
                    let canRefund = false
                    const playerLocation = await PlayerStatus.findOne({where: {id: user.dataValues.id}, attributes: ["countryID"]})
                    let refundTax = NameLibrary.PriceTaxRefund(NameLibrary.PriceTaxRefund(objIN, outTax), inTax)
                    if(context.player.CanPay(refundTax))
                    {
                        kb[0].push(keyboard.positiveCallbackButton({label: "üí∏ –ü–æ–∫—Ä—ã—Ç—å", payload: {
                                command: "transaction_refund_tax",
                                transaction: {
                                    price: refundTax,
                                    tax: {
                                        in: inTax,
                                        out: outTax
                                    },
                                    countries: {
                                        in: context.player.countryID,
                                        out: playerLocation.dataValues.countryID
                                    },
                                    toUser: user.dataValues.id
                                }
                            }}))
                        canRefund = true
                    }
                    kb[0].push(keyboard.positiveCallbackButton({label: "üí∏ –û–ø–ª–∞—Ç–∏—Ç—å", payload: {
                            command: "transaction_tax",
                            transaction: {
                                price: objIN,
                                tax: {
                                    in: inTax,
                                    out: outTax
                                },
                                countries: {
                                    in: context.player.countryID,
                                    out: playerLocation.dataValues.countryID
                                },
                                toUser: user.dataValues.id
                            }
                        }}))
                    kb[0].push(keyboard.secondaryCallbackButton({label: "üí∞ –£–∫–ª–æ–Ω–∏—Ç—å—Å—è", payload: {
                            command: "transaction_tax_evasion",
                            transaction: {
                                price: objIN,
                                tax: {
                                    in: inTax,
                                    out: outTax
                                },
                                countries: {
                                    in: context.player.countryID,
                                    out: playerLocation.dataValues.countryID
                                },
                                toUser: user.dataValues.id
                            }
                        }}))
                    kb[0].push(keyboard.negativeCallbackButton({label: "üö´ –û—Ç–º–µ–Ω–∏—Ç—å", payload: {
                            command: "hide_message"
                        }}))
                    await context.send("‚Ñπ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ–ø–ª–∞—Ç—É –Ω–∞–ª–æ–≥–∞", {keyboard: keyboard.build(current_keyboard)})
                    await api.api.messages.send({
                        user_id: context.player.id,
                        random_id: Math.round(Math.random() * 100000),
                        message: `‚Ñπ –î–ª—è —Å–æ–≤–µ—Ä—à–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞ –∏–≥—Ä–æ–∫—É *id${user.dataValues.id}(${user.dataValues.nick}) –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–ø–ª–∞—Ç–∏—Ç—å –Ω–∞–ª–æ–≥–∏ –≤ —Ä–∞–∑–º–µ—Ä–µ ${inTax}% –∏ ${outTax}%\n\n–ü–µ—Ä–µ–≤–æ–¥ –≤ —Ä–∞–∑–º–µ—Ä–µ:\n${NameLibrary.GetPrice(objIN)}\n\n–ü–æ—Å–ª–µ —É–ø–ª–∞—Ç—ã –Ω–∞–ª–æ–≥–∞ –æ—Å—Ç–∞–Ω–µ—Ç—Å—è:\n${NameLibrary.GetPrice(NameLibrary.AfterPayTax(NameLibrary.AfterPayTax(objIN, inTax), outTax))}\n\n${canRefund ? "‚Ñπ –¢–∞–∫–∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –≤–∑—è—Ç—å –Ω–∞ —Å–µ–±—è –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏—é –Ω–∞–ª–æ–≥–∞, –Ω–æ —Ç–æ–≥–¥–∞ —Å—É–º–º–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ –±—É–¥–µ—Ç —Å–æ—Å—Ç–∞–≤–ª—è—Ç—å:\n" + NameLibrary.GetPrice(refundTax) : ""}`,
                        keyboard: keyboard.build(kb).inline()
                    })
                }
                return resolve()
            }
            catch (e)
            {
                await api.SendLogs(context, "BuildersAndControlsScripts/UserToUserTransaction", e)
            }
        })
    }

    async GoToOtherCity(context, current_keyboard, scenes)
    {
        return new Promise(async (resolve) => {
            try
            {
                let time = new Date()
                if(context.player.stayInCityTime - time > 0)
                {
                    await context.send(`‚ö† –í—ã —Å–∏–ª—å–Ω–æ —É—Å—Ç–∞–ª–∏ –ø–æ—Å–ª–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –¥–æ—Ä–æ–≥–∏, –æ—Ç–¥–æ—Ö–Ω–∏—Ç–µ –∏ –º–æ–∂–Ω–æ –æ–ø—è—Ç—å –≤ –ø—É—Ç—å.\n\n–î–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–∏–ª ${NameLibrary.ParseFutureTime(context.player.stayInCityTime)}`, {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                if(Data.cities[context.player.location].isSiege && context.player.status !== "worker")
                {
                    await context.send("üö´ –ì–æ—Ä–æ–¥ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø–æ–¥ –æ—Å–∞–¥–æ–π", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                if(Data.countries[context.player.countryID].isSiege && context.player.status !== "worker")
                {
                    await context.send("üö´ –í —Ñ—Ä–∞–∫—Ü–∏–∏ –≤–≤–µ–¥–µ–Ω–æ –≤–æ–µ–Ω–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ, –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –º–µ–∂–¥—É –≥–æ—Ä–æ–¥–∞–º–∏ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                if(Data.countries[context.player.countryID].roadMap)
                {
                    await context.send(`‚Ñπ –ö–∞—Ä—Ç–∞ —Ñ—Ä–∞–∫—Ü–∏–∏ ${Data.countries[context.player.countryID].GetName(context.player.platform === "IOS")}`, {attachment: Data.countries[context.player.countryID].roadMap})
                }
                const cityButtons = []
                const roads = await CityRoads.findAll({where: {fromID: context.player.location}, attributes: ["toID", "isBlocked", "time"]})
                if(context.player.status === "worker")
                {
                    const cities = Data.GetCountryCities(context.player.countryID)
                    for(const city of cities)
                    {
                        if(city.id !== context.player.location)
                        {
                            cityButtons.push([city.name, "ID" + city.id])
                        }
                    }
                }
                else
                {
                    for(const road of roads)
                    {
                        cityButtons.push([Data.cities[road.dataValues.toID].name, "ID" + road.dataValues.toID])
                    }
                }
                if(cityButtons.length === 0)
                {
                    await context.send("‚Ñπ –í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–º –≥–æ—Ä–æ–¥–µ —Ñ—Ä–∞–∫—Ü–∏–∏ " + Data.GetCountryName(Data.GetCountryForCity(context.player.location).id))
                    return resolve()
                }
                let city = await InputManager.KeyboardBuilder(context, "1Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –≤ –∫–∞–∫–æ–π –≥–æ—Ä–æ–¥ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è", cityButtons, current_keyboard)
                if(!city) return resolve()
                city = Data.ParseButtonID(city)
                city = Data.cities[city]
                let road = {time: 0}
                roads.forEach(key => {if(key.dataValues.toID === city.id) road = key.dataValues})
                if(road?.isBlocked)
                {
                    await context.send("‚Ñπ –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —ç—Ç–∞ –¥–æ—Ä–æ–≥–∞ –ø–µ—Ä–µ–∫—Ä—ã—Ç–∞ –∏–∑-–∑–∞ –∏–≤–µ–Ω—Ç–∞.", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                if(city.isSiege && context.player.status !== "worker")
                {
                    await context.send("‚Ñπ –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≥–æ—Ä–æ–¥, –≤ –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –æ—Å–∞–¥–µ, –≤—ä–µ–∑–¥ –≤ –Ω–µ–≥–æ –Ω–µ –≤–æ–∑–º–æ–∂–µ–Ω", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                const accept = await InputManager.InputBoolean(context, `2Ô∏è‚É£ –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –≤ –¥—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥ –∑–∞–π–º–µ—Ç ${road?.time ? road?.time : 0} –º–∏–Ω—É—Ç, –Ω–∞ —ç—Ç–æ –≤—Ä–µ–º—è –≤—ã –±—É–¥–µ—Ç–µ –∑–∞–º–æ—Ä–æ–∂–µ–Ω—ã.\n–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?`, current_keyboard)
                if(!accept)
                {
                    await context.send("üö´ –û—Ç–º–µ–Ω–µ–Ω–æ", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                if(context.player.status === "worker")
                {
                    await context.send("üèô –í—ã –ø—Ä–∏—à–ª–∏ –≤ –≥–æ—Ä–æ–¥ " + city.name + "\n" + city.description, {attachment: city.photoURL, keyboard: keyboard.build(scenes.finishKeyboard(context))})
                    context.player.location = city.id
                    await PlayerStatus.update(
                        {location: city.id},
                        {where: {id: context.player.id}}
                    )
                    context.player.state = scenes.finish
                }
                else
                {
                    time.setMinutes(time.getMinutes() + parseInt(road.time))
                    context.player.lastActionTime = time
                    context.player.state = scenes.moving
                    await context.send("‚Ñπ –í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏—Å—å –≤ –≥–æ—Ä–æ–¥ " + city.name, {keyboard: keyboard.none})
                    Data.timeouts["user_timeout_walk_" + context.player.id] = {
                        type: "user_timeout",
                        subtype: "walk",
                        userId: context.player.id,
                        cityID: city.id,
                        time: time,
                        timeout: setTimeout(async () => {
                            await context.send("üèô –í—ã –ø—Ä–∏—à–ª–∏ –≤ –≥–æ—Ä–æ–¥ " + city.name + "\n" + city.description, {attachment: city.photoURL, keyboard: keyboard.build(scenes.finishKeyboard(context))})
                            context.player.location = city.id
                            context.player.countryID = city.countryID
                            await PlayerStatus.update(
                                {location: city.id, countryID: city.countryID},
                                {where: {id: context.player.id}}
                            )
                            if(city.notifications)
                            {
                                await api.SendMessage(city.leaderID, `‚Ñπ –ò–≥—Ä–æ–∫ ${context.player.GetName()} –∑–∞—à–µ–ª –≤ –≥–æ—Ä–æ–¥ ${city.name}`)
                            }
                            let stayTime = new Date()
                            stayTime.setMinutes(stayTime.getMinutes() + 30)
                            context.player.stayInCityTime = stayTime
                            context.player.state = scenes.finish
                            delete Data.timeouts["user_timeout_walk_" + context.player.id]
                        }, road.time * 60000)
                    }
                }
            }
            catch (e)
            {
                await api.SendLogs(context, "BuildersAndControlsScripts/GoToOtherCity", e)
            }
        })
    }

    async GoToOtherCountry(context, current_keyboard, scenes)
    {
        return new Promise(async (resolve) => {
            try
            {
                const time = new Date()
                if(context.player.stayInCityTime - time > 0)
                {
                    await context.send(`‚ö† –í—ã —Å–∏–ª—å–Ω–æ —É—Å—Ç–∞–ª–∏ –ø–æ—Å–ª–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –¥–æ—Ä–æ–≥–∏, –æ—Ç–¥–æ—Ö–Ω–∏—Ç–µ –∏ –º–æ–∂–Ω–æ –æ–ø—è—Ç—å –≤ –ø—É—Ç—å.\n\n–î–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–∏–ª ${NameLibrary.ParseFutureTime(context.player.stayInCityTime)}`, {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                if(Data.cities[context.player.location].isSiege)
                {
                    await context.send("üö´ –ì–æ—Ä–æ–¥ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø–æ–¥ –æ—Å–∞–¥–æ–π", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                if(Data.countries[context.player.countryID].isSiege)
                {
                    await context.send("üö´ –í —Ñ—Ä–∞–∫—Ü–∏–∏ –≤–≤–µ–¥–µ–Ω–æ –≤–æ–µ–Ω–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ, –≤—ã–µ–∑–¥ –∑–∞–ø—Ä–µ—â–µ–Ω", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                await context.send("‚Ñπ –ö–∞—Ä—Ç–∞ –¥–æ—Ä–æ–≥:", {attachment: Data.variables.roadMap})
                const playerPlace = Data.GetCountryForCity(context.player.location).id
                const roads = await CountryRoads.findAll({where: {fromID: playerPlace}})
                const countryButtons = []
                if(context.player.status === "worker")
                {
                    for(let i = 0; i < Data.countries?.length; i++)
                    {
                        if(Data.countries[i]?.id !== context.player.countryID && Data.countries[i])
                        {
                            countryButtons.push([Data.countries[i].name, "ID" + Data.countries[i].id])
                        }
                    }
                }
                else
                {
                    for(let i = 0; i < roads.length; i++)
                    {
                        countryButtons.push([Data.countries[roads[i].dataValues.toID].name, "ID" + roads[i].dataValues.toID])
                    }
                }
                if(countryButtons.length === 0)
                {
                    await context.send("‚Ñπ –î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã —É–µ—Ö–∞—Ç—å –∏–∑ —Ñ—Ä–∞–∫—Ü–∏–∏ –Ω—É–∂–Ω–∞ –¥–æ—Ä–æ–≥–∞, –Ω–æ –∏–∑ —Ñ—Ä–∞–∫—Ü–∏–∏, –≤ –∫–æ—Ç–æ—Ä–æ–π –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å, –Ω–µ –≤–µ–¥–µ—Ç –Ω–∏ –æ–¥–Ω–∞ –¥–æ—Ä–æ–≥–∞.\n–í—Å–µ –≤–æ–ø—Ä–æ—Å—ã –æ –¥–æ—Ä–æ–≥–∞—Ö –∫ –ì–µ–π–º-–ú–∞—Å—Ç–µ—Ä–∞–º")
                    return resolve()
                }
                let country = await InputManager.KeyboardBuilder(context, "1Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –≤ –∫–∞–∫—É—é —Ñ—Ä–∞–∫—Ü–∏—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è", countryButtons, current_keyboard)
                if(!country) return resolve()
                country = Data.ParseButtonID(country)
                let road = null
                roads.forEach(key => {if(key.dataValues.toID === country) road = key.dataValues})
                if(road?.isBlocked)
                {
                    await context.send("‚ö† –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —ç—Ç–∞ –¥–æ—Ä–æ–≥–∞ –ø–µ—Ä–µ–∫—Ä—ã—Ç–∞ –∏–∑-–∑–∞ –∏–≤–µ–Ω—Ç–∞.", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                if(Data.countries[country].isSiege)
                {
                    await context.send("‚ö† –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —Ñ—Ä–∞–∫—Ü–∏—è, –≤ –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø–æ–¥ –±–ª–æ–∫–∞–¥–æ–π, –≤—ä–µ–∑–¥ –≤ –Ω–µ–µ –Ω–µ –≤–æ–∑–º–æ–∂–µ–Ω", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                let accept
                if (Data.countries[country].entranceFee !== 0 && context.player.status !== "worker")
                {
                    accept = await InputManager.InputBoolean(context, `‚Ñπ –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –≤ ${Data.GetCountryName(country)} –∑–∞–π–º–µ—Ç ${road.time} –º–∏–Ω—É—Ç, –Ω–∞ —ç—Ç–æ –≤—Ä–µ–º—è –≤—ã –±—É–¥–µ—Ç–µ –∑–∞–º–æ—Ä–æ–∂–µ–Ω—ã.\n–£ —Ñ—Ä–∞–∫—Ü–∏–∏ ${Data.GetCountryName(country)} –µ—Å—Ç—å –≤—Ö–æ–¥–Ω–∞—è –ø–æ—à–ª–∏–Ω–∞ –≤ —Ä–∞–∑–º–µ—Ä–µ ${Data.countries[country].entranceFee} –º–æ–Ω–µ—Ç\n–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?`, current_keyboard)
                    if(context.player.money - Data.countries[country].entranceFee < 0)
                    {
                        await context.send("‚ö† –£ –≤–∞—Å –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –æ–ø–ª–∞—Ç—ã –≤—Ö–æ–¥–Ω–æ–π –ø–æ—à–ª–∏–Ω—ã", {keyboard: keyboard.build(current_keyboard)})
                        return resolve()
                    }
                }
                else
                {
                    accept = await InputManager.InputBoolean(context, `‚Ñπ –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –≤ ${Data.GetCountryName(country)} –∑–∞–π–º–µ—Ç ${road?.time ? road?.time : 0} –º–∏–Ω—É—Ç, –Ω–∞ —ç—Ç–æ –≤—Ä–µ–º—è –≤—ã –±—É–¥–µ—Ç–µ –∑–∞–º–æ—Ä–æ–∂–µ–Ω—ã, –∞ –ø–æ–≤–µ—Ä–Ω—É—Ç—å –Ω–∞–∑–∞–¥ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ.\n–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?`, current_keyboard)
                }
                if(!accept)
                {
                    await context.send("üö´ –û—Ç–º–µ–Ω–µ–Ω–æ", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                const fee = Data.countries[country].entranceFee
                if(context.player.status === "worker")
                {
                    await context.send("üèô –í—ã –ø—Ä–∏—à–ª–∏ –≤ –≥–æ—Ä–æ–¥ " + Data.GetCityName(Data.countries[country].capitalID) + "\n" + Data.cities[Data.countries[country].capitalID].description, {attachment: Data.countries[country].welcomePhotoURL, keyboard: keyboard.build(scenes.finishKeyboard(context))})
                    context.player.location = Data.countries[country].capitalID
                    context.player.countryID = Data.countries[country].id
                    await PlayerStatus.update(
                        {location: Data.countries[country].capitalID, countryID: Data.countries[country].id},
                        {where: {id: context.player.id}}
                    )
                    context.player.state = scenes.finish
                }
                else
                {
                    time.setMinutes(time.getMinutes() + parseInt(road.time))
                    context.player.lastActionTime = time
                    context.player.state = scenes.moving
                    await context.send("‚Ñπ –í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏—Å—å –≤ —Ñ—Ä–∞–∫—Ü–∏—é " + Data.countries[country].GetName(context.player.platform === "IOS"), {keyboard: keyboard.none})
                    Data.timeouts["user_timeout_walk_" + context.player.id] = {
                        type: "user_timeout",
                        subtype: "walk",
                        userId: context.player.id,
                        cityID: Data.countries[country].capitalID,
                        time: time,
                        timeout: setTimeout(async () => {
                            await context.send("üèô –í—ã –ø—Ä–∏—à–ª–∏ –≤ –≥–æ—Ä–æ–¥ " + Data.GetCityName(Data.countries[country].capitalID) + "\n" + Data.cities[Data.countries[country].capitalID].description, {attachment: Data.countries[country].welcomePhotoURL, keyboard: keyboard.build(scenes.finishKeyboard(context))})
                            context.player.location = Data.countries[country].capitalID
                            context.player.countryID = Data.countries[country].id
                            if (fee !== 0)
                            {
                                await Data.AddPlayerResources(context.player.id, {money: -fee})
                                await Data.AddCountryResources(country, {money: fee})
                            }
                            await PlayerStatus.update(
                                {location: Data.countries[country].capitalID, countryID: Data.countries[country].id},
                                {where: {id: context.player.id}}
                            )
                            if(Data.countries[country].notifications)
                            {
                                await api.SendMessage(Data.countries[country].leaderID, `‚Ñπ –ò–≥—Ä–æ–∫ ${context.player.GetName()} –∑–∞—à–µ–ª –≤ –≤–∞—à—É —Ñ—Ä–∞–∫—Ü–∏—é ${Data.countries[country].name}`)
                            }
                            if(Data.cities[Data.countries[country].capitalID].notifications)
                            {
                                await api.SendMessage(Data.cities[Data.countries[country].capitalID].leaderID, `‚Ñπ –ò–≥—Ä–æ–∫ ${context.player.GetName()} –∑–∞—à–µ–ª –≤ –≥–æ—Ä–æ–¥ ${Data.cities[Data.countries[country].capitalID].name}`)
                            }
                            let stayTime = new Date()
                            stayTime.setMinutes(stayTime.getMinutes() + 30)
                            context.player.stayInCityTime = stayTime
                            context.player.state = scenes.finish
                            delete Data.timeouts["user_timeout_walk_" + context.player.id]
                        }, road.time * 60000)
                    }
                }
            }
            catch (e)
            {
                await api.SendLogs(context, "BuildersAndControlsScripts/GoToOtherCountry", e)
            }
        })
    }

    async GiveKey(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                const keys = await Keys.findAll({where: {ownerID: context.player.id}})
                const keysButton = []
                if(keys.length === 0)
                {
                    await context.send("‚ö† –£ –≤–∞—Å –Ω–µ—Ç –∫–ª—é—á–µ–π", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                const user = await InputManager.InputUser(context, "1Ô∏è‚É£ –ö–æ–º—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–¥–∞—Ç—å —ç—Ç–æ—Ç –∫–ª—é—á?", current_keyboard)
                if(!user) return resolve()
                for(let i = 0; i < keys.length; i++)
                {
                    keysButton.push([keys[i].dataValues.name, "ID" + keys[i].dataValues.id])
                }
                let key = await InputManager.KeyboardBuilder(context, "2Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –∫–ª—é—á, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–¥–∞—Ç—å", keysButton, current_keyboard)
                if(!key) return resolve()
                key = Data.ParseButtonID(key)
                await Keys.update({ownerID: user.dataValues.id}, {where: {id: key}})
                await context.send("‚úÖ –ö–ª—é—á –æ—Ç–¥–∞–Ω.", {keyboard: keyboard.build(current_keyboard)})
            }
            catch (e)
            {
                await api.SendLogs(context, "BuildersAndControlsScripts/GiveKey", e)
            }
        })
    }

    async CopyKey(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                const keys = await Keys.findAll({where: {ownerID: context.player.id}})
                const keysButton = []
                if(keys.length === 0)
                {
                    await context.send("‚ö† –£ –≤–∞—Å –Ω–µ—Ç –∫–ª—é—á–µ–π", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                for(let i = 0; i < keys.length; i++)
                {
                    keysButton.push([keys[i].dataValues.name, "ID" + keys[i].dataValues.id])
                }
                let key = await InputManager.KeyboardBuilder(context, "1Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –∫–ª—é—á, –¥—É–±–ª–∏–∫–∞—Ç –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å.\n\n" + context.player.GetResources() + "\n\n–°—Ç–æ–∏–º–æ—Å—Ç—å:\n" + NameLibrary.GetPrice(Prices["copy_key"]), keysButton, current_keyboard)
                if(!key) return resolve()
                if (!context.player.CanPay(Prices["copy_key"]))
                {
                    await context.send("‚ö† –£ –≤–∞—Å –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç —Ä–µ—Å—É—Ä—Å–æ–≤", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                await Data.AddPlayerResources(context.player.id, Prices["copy_key"])
                key = Data.ParseButtonID(key)
                keys.forEach((i) => {if(parseInt(i.dataValues.id)  === parseInt(key)) key = i.dataValues})
                await Keys.create({
                    houseID: key.houseID,
                    ownerID: key.ownerID,
                    name: key.name.includes("-–¥—É–±–ª–∏–∫–∞—Ç") ? key.name : key.name + "-–¥—É–±–ª–∏–∫–∞—Ç"
                })
                await context.send("‚úÖ –ö–ª—é—á –ø—Ä–æ–¥—É–±–ª–∏—Ä–æ–≤–∞–Ω.", {keyboard: keyboard.build(current_keyboard)})
            }
            catch (e)
            {
                await api.SendLogs(context, "BuildersAndControlsScripts/CopyKey", e)
            }
        })
    }
    async GetAllProperty(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                const buildings = await Buildings.findAll({where: {ownerID: context.player.id}})
                let request = "‚Ñπ *id"+ context.player.id +"(–í–∞—à–∏) –ø–æ—Å—Ç—Ä–æ–π–∫–∏:\n"
                for(let i = 0; i < buildings.length; i++)
                {
                    request += (i+1) +
                        ": " +
                        NameLibrary.GetBuildingType(buildings[i].dataValues.type) +
                        " \"" +
                        buildings[i].dataValues.name +
                        "\" " +
                        buildings[i].dataValues.level +
                        " —É—Ä, –≥. " +
                        Data.GetCityName(buildings[i].dataValues.cityID) +
                        "\n"
                }
                if(buildings.length === 0)
                {
                    request += "‚õ∫ –£ –≤–∞—Å –Ω–µ—Ç –ø–æ—Å—Ç—Ä–æ–µ–∫\n"
                }

                const keys = await Keys.findAll({where: {ownerID: context.player.id}})
                request += "\n‚Ñπ *id"+ context.player.id +"(–í–∞—à–∏) –∫–ª—é—á–∏:\n"
                for(let i = 0; i < keys.length; i++)
                {
                    request += "üî∏ " + keys[i].dataValues.name + "\n"
                }
                if(keys.length === 0)
                {
                    request += "üìé –£ –≤–∞—Å –Ω–µ—Ç –∫–ª—é—á–µ–π"
                }

                await context.send(request, {keyboard: keyboard.build(current_keyboard)})
                return resolve()
            }
            catch (e)
            {
                await api.SendLogs(context, "BuildersAndControlsScripts/GetAllProperty", e)
            }
        })
    }

    async NewUserBuilding(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                const country = Data.GetCountryForCity(context.player.location)
                if(parseInt(context.player.citizenship) !== country.id)
                {
                    await context.send("‚ö† –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –≥—Ä–∞–∂–¥–∞–Ω–∏–Ω–æ–º —Ñ—Ä–∞–∫—Ü–∏–∏ " + Data.GetCountryName(country.id), {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                const buildingButtons = [
                    ["üè† –ñ–∏–ª–æ–π –¥–æ–º", "house"],
                    ["üè¶ –ë–∞–Ω–∫", "bank"]
                ]
                country.resources.match(/wheat/) && buildingButtons.push(["üåæ –°–µ–ª—å—Å–∫–æ–µ —Ö–æ–∑—è–π—Å—Ç–≤–æ", "wheat"])
                country.resources.match(/stone/) && buildingButtons.push(["ü™® –ö–∞–º–µ–Ω–æ–ª–æ–º–Ω—è", "stone"])
                country.resources.match(/wood/) && buildingButtons.push(["ü™µ –õ–µ—Å–æ–∑–∞–≥–æ—Ç–æ–≤–∫–∏", "wood"])
                country.resources.match(/iron/) && buildingButtons.push(["üåë –ñ–µ–ª–µ–∑–Ω—ã–π —Ä—É–¥–Ω–∏–∫", "iron"])
                country.resources.match(/silver/) && buildingButtons.push(["ü•à –°–µ—Ä–µ–±—Ä—è–Ω—ã–π —Ä—É–¥–Ω–∏–∫", "silver"])

                let request = "–¶–µ–Ω—ã –Ω–∞ –ø–æ—Å—Ç—Ä–æ–π–∫–∏:\n\n"
                request += context.player.GetResources() + "\n\n"
                buildingButtons.forEach(key => {
                    request += key[0] + ":\n" + NameLibrary.GetPrice(Prices["new_" + key[1]]) + "\n"
                })
                const building = await InputManager.KeyboardBuilder(context, request + "\n1Ô∏è‚É£ –ö–∞–∫—É—é –ø–æ—Å—Ç—Ä–æ–π–∫—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤–æ–∑–≤–µ—Å—Ç–∏?\n\n‚ö† –õ—é–±–∞—è –ø–æ—Å—Ç—Ä–æ–π–∫–∞ –∫—Ä–æ–º–µ –∂–∏–ª–æ–≥–æ –¥–æ–º–∞ –∑–∞–Ω–∏–º–∞–µ—Ç –ø–æ–ª–µ–∑–Ω–æ–µ –º–µ—Å—Ç–æ –≤ –≥–æ—Ä–æ–¥–µ, –ø–æ—ç—Ç–æ–º—É –¥–ª—è —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞ –≤–∞–º –Ω–∞–¥–æ –ø–æ–ª—É—á–∏—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –æ—Ç –≥–ª–∞–≤—ã –≥–æ—Ä–æ–¥–∞.\n\n‚ö† –ï—Å–ª–∏ –≤—ã –ø—Ä–æ–ø–∏—Å–∞–Ω—ã –≤ —ç—Ç–æ–º –≥–æ—Ä–æ–¥–µ, —Ç–æ –º–æ–∂–Ω–æ –Ω–µ –ø–æ–ª—É—á–∞—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ –æ—Ç –≥–ª–∞–≤—ã –≥–æ—Ä–æ–¥–∞.", buildingButtons, current_keyboard)
                if(!building) return resolve()
                if(!context.player.CanPay(Prices["new_" + building]))
                {
                    await context.send("‚ö† –£ –≤–∞—Å –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç —Ä–µ—Å—É—Ä—Å–æ–≤.", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                if(Data.cities[context.player.location].buildingsScore >= Data.cities[context.player.location].maxBuildings && building !== "house")
                {
                    await context.send("‚ö† –í –≥–æ—Ä–æ–¥–µ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å –º–µ—Å—Ç –¥–ª—è —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞ –Ω–æ–≤–æ–≥–æ –∑–¥–∞–Ω–∏—è.", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                const name = await InputManager.InputString(context, "2Ô∏è‚É£ –ù–∞–∑–æ–≤–∏—Ç–µ —Å–≤–æ—é –ø–æ—Å—Ç—Ä–æ–π–∫—É. (–æ—Ç 2 –¥–æ 35 —Å–∏–º–≤–æ–ª–æ–≤)", current_keyboard, 2, 35)
                if(!name) return resolve()
                const description = await InputManager.InputString(context, "3Ô∏è‚É£ –°–¥–µ–ª–∞–π—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ—Å—Ç—Ä–æ–π–∫–∏. (—á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å - –Ω–∞–∂–º–∏—Ç–µ \"–æ—Ç–º–µ–Ω–∞\")", current_keyboard, 2, 100)
                await Data.AddPlayerResources(context.player.id, Prices["new_" + building])
                const build = await Buildings.create({
                    cityID: context.player.location,
                    name: name,
                    description: description,
                    type: "building_of_" + building,
                    ownerID: context.player.id,
                    ownerType: "user",
                    level: 1,
                    freezing: (parseInt(context.player.location) !== parseInt(context.player.registration)) && building === "house"
                })
                if(parseInt(context.player.location) === parseInt(context.player.registration) && building === "house")
                {
                    await Data.ResetBuildings()
                    await Keys.create({
                        houseID: build.dataValues.id,
                        ownerID: context.player.id,
                        name: "üîë " + build.dataValues.name
                    })
                    await context.send("‚úÖ –ü–æ—Å—Ç—Ä–æ–π–∫–∞ –≤–æ–∑–≤–µ–¥–µ–Ω–∞. –í–∞–º –≤—ã–¥–∞–Ω –∫–ª—é—á –æ—Ç –Ω–µ–µ.", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                else
                {
                    if(!context.player.waitingAllowBuilding) context.player.waitingAllowBuilding = []
                    context.player.waitingAllowBuilding.push([
                        build.dataValues.id,
                        setTimeout(async () =>
                        {
                            const price = NameLibrary.ReversePrice(Prices["new_" + building])
                            await Data.AddPlayerResources(context.player.id, price)
                            await Buildings.destroy({where: {id: build.dataValues.id}})
                            await context.send(`‚ö† –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ–¥–æ–±—Ä–µ–Ω–∏—è —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞ –ø–æ—Å—Ç—Ä–æ–π–∫–∏ \"${NameLibrary.GetBuildingType(build.dataValues.type)}\" –≤—ã—à–ª–æ, —Ä–µ—Å—É—Ä—Å—ã –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã.`)
                            let length = 0
                            for(let i = 0; i < context.player.waitingAllowBuilding?.length; i++)
                            {
                                if(context.player.waitingAllowBuilding[i])
                                {
                                    length ++
                                }
                            }
                            if(length === 0)
                            {
                                context.player.waitingAllowBuilding = null
                            }
                        }, 86400000)
                    ])
                    await api.api.messages.send({
                        user_id: Data.GetCity(context.player.location).leaderID,
                        random_id: Math.round(Math.random() * 100000),
                        message: `–ò–≥—Ä–æ–∫ ${context.player.GetName()} —Ö–æ—á–µ—Ç –ø–æ—Å—Ç—Ä–æ–∏—Ç—å ${NameLibrary.GetBuildingType(build.dataValues.type)}.\n\n${context.player.GetInfo()}\n\n –†–∞–∑—Ä–µ—à–∏—Ç—å —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ?`,
                        keyboard: keyboard.build([[keyboard.acceptCallbackButton({command: "allow_user_building", item: context.player.id, parameter: build.dataValues.id}), keyboard.declineCallbackButton({command: "decline_user_building", item: context.player.id, parameter: build.dataValues.id})]]).inline().oneTime()
                    })
                    await context.send("‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ –≤–æ–∑–≤–µ–¥–µ–Ω–∏–µ –ø–æ—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∞–Ω–∞, —Ä–µ—Å—É—Ä—Å—ã –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω—ã", {keyboard: keyboard.build(current_keyboard)})
                }
            }
            catch (e)
            {
                await api.SendLogs(context, "BuildersAndControlsScripts/NewUserBuilding", e)
            }
        })
    }

    async UpgradeUserBuilding(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                const buildings = await Buildings.findAll({where: {ownerID: context.player.id, freezing: false}})
                if(buildings.length === 0)
                {
                    await context.send("‚ö† –£ –≤–∞—Å –Ω–µ—Ç –ø–æ—Å—Ç—Ä–æ–µ–∫.", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                let request = "üè¢ –í–∞—à–∏ –ø–æ—Å—Ç—Ä–æ–π–∫–∏:\n"
                const buildingButtons = []
                for(let i = 0; i < buildings.length; i++)
                {
                    if(!buildings[i].dataValues.type.match(/house/))
                    {
                        buildingButtons.push([NameLibrary.GetBuildingEmoji(buildings[i].dataValues.type) + buildings[i].dataValues.name, "ID" + buildings[i].dataValues.id])
                        request += `${NameLibrary.GetBuildingType(buildings[i].dataValues.type)} \"${buildings[i].dataValues.name}\" ${buildings[i].dataValues.level} —É—Ä–æ–≤–Ω—è\n`
                    }
                }
                if(buildingButtons.length === 0)
                {
                    await context.send("‚ö† –£ –≤–∞—Å –Ω–µ—Ç –ø–æ—Å—Ç—Ä–æ–µ–∫, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å.", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                let building = await InputManager.KeyboardBuilder(context, request, buildingButtons, current_keyboard)
                if(!building) return resolve()

                building = Data.ParseButtonID(building)
                buildings.forEach(key => {if(parseInt(key.dataValues.id) === parseInt(building)) building = key.dataValues})
                if(building.type.match(/house/))
                {
                    await context.send(`‚ö† –ñ–∏–ª—ã–µ –¥–æ–º–∞ –Ω–µ –∏–º–µ—é—Ç —É—Ä–æ–≤–Ω–µ–π —É–ª—É—á—à–µ–Ω–∏—è.`, {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                if(building.level >= 4)
                {
                    await context.send(`‚ö† ${NameLibrary.GetBuildingType(building.type)} \"${building.name}\" –∏–º–µ–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å —É–ª—É—á—à–µ–Ω–∏—è.`, {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                await context.send(`‚Ñπ –£–ª—É—á—à–µ–Ω–∏–µ –¥–ª—è ${NameLibrary.GetBuildingType(building.type)} \"${building.name}\":\n ${building.level} —É—Ä–æ–≤–µ–Ω—å => ${building.level + 1} —É—Ä–æ–≤–µ–Ω—å\n${NameLibrary.GetPrice(Prices[building.type.replace("building_of_", "") + "_lvl" + (building.level + 1)])}`)
                if(!context.player.CanPay(Prices[building.type.replace("building_of_", "") + "_lvl" + (building.level + 1)]))
                {
                    await context.send("‚ö† –£ –≤–∞—Å –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç —Ä–µ—Å—É—Ä—Å–æ–≤.", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                const accept = await InputManager.InputBoolean(context, "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?", current_keyboard)
                if(!accept)
                {
                    await context.send("üö´ –û—Ç–º–µ–Ω–µ–Ω–æ.", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                await Data.AddPlayerResources(context.player.id ,Prices[building.type.replace("building_of_", "") + "_lvl" + (building.level + 1)])
                await Buildings.update({level: building.level + 1}, {where: {id: building.id}})
                for(let i = 0; i < Data.buildings[building.cityID]?.length; i++)
                {
                    if(Data.buildings[building.cityID][i].id === building.id)
                    {
                        Data.buildings[building.cityID][i].Upgrade(building.level + 1)
                        break
                    }
                }
                await context.send(`‚úÖ –ü–æ—Å—Ç—Ä–æ–π–∫–∞ —É–ª—É—á—à–µ–Ω–∞ –¥–æ ${building.level + 1} —É—Ä–æ–≤–Ω—è.`, {keyboard: keyboard.build(current_keyboard)})
            }
            catch (e)
            {
                await api.SendLogs(context, "BuildersAndControlsScripts/UpgradeUserBuilding", e)
            }
        })
    }

    async EnterBuilding(context, current_keyboard, scenes)
    {
        return new Promise(async (resolve) => {
            try
            {
                const keys = await Keys.findAll({where: {ownerID: context.player.id}})
                let request = "‚Ñπ –ü–æ—Å—Ç—Ä–æ–π–∫–∏ –≤ –≥–æ—Ä–æ–¥–µ " + Data.GetCityName(context.player.location) + " :\n"
                const buildingButtons = []
                if(!Data.buildings[context.player.location])
                {
                    await context.send("‚õ∫ –í –≥–æ—Ä–æ–¥–µ –Ω–µ—Ç –ø–æ—Å—Ç—Ä–æ–µ–∫", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                for(let i = 0; i < Data.buildings[context.player.location].length; i++)
                {
                    request += (i+1) + ": " + NameLibrary.GetBuildingType(Data.buildings[context.player.location][i].type) + " \"" + Data.buildings[context.player.location][i].name + "\" " + Data.buildings[context.player.location][i].level + " —É—Ä–æ–≤–Ω—è\n"
                    if(Data.buildings[context.player.location][i].type.match(/mint/))
                    {
                        if(context.player.id === Data.countries[context.player.countryID].leaderID)
                        {
                            if(context.player.id === Data.countries[context.player.countryID].leaderID)
                            {

                                    buildingButtons.push([Data.buildings[context.player.location][i].GetEmoji() + Data.buildings[context.player.location][i].name, "ID" + Data.buildings[context.player.location][i].id])
                                    continue
                            }
                        }
                        if(Data.officials[context.player.countryID])
                        {
                            if(Data.officials[context.player.countryID][context.player.id]?.canUseResources)
                            {
                                buildingButtons.push([Data.buildings[context.player.location][i].GetEmoji() + Data.buildings[context.player.location][i].name, "ID" + Data.buildings[context.player.location][i].id])
                                continue
                            }
                        }
                    }
                    for(let j = 0; j < keys.length; j++)
                    {
                        if(keys[j].dataValues.houseID === Data.buildings[context.player.location][i].id)
                        {
                            buildingButtons.push([Data.buildings[context.player.location][i].GetEmoji() + Data.buildings[context.player.location][i].name, "ID" + Data.buildings[context.player.location][i].id])
                            break
                        }
                    }
                }
                if(buildingButtons.length === 0)
                {
                    await context.send(request + "üèò –í –≥–æ—Ä–æ–¥–µ –Ω–µ—Ç –ø–æ—Å—Ç—Ä–æ–µ–∫, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–µ—Ç–∏—Ç—å.", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                let building = await InputManager.KeyboardBuilder(context, request + "\n‚Ñπ –í—ã–±–µ—Ä–∏—Ç–µ, –∫—É–¥–∞ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–π—Ç–∏.", buildingButtons, current_keyboard)
                if(!building) return resolve()
                building = Data.ParseButtonID(building)
                for(let i = 0; i < Data.buildings[context.player.location].length; i++)
                {
                    if(parseInt(Data.buildings[context.player.location][i].id) === parseInt(building))
                    {
                        context.player.inBuild = Data.buildings[context.player.location][i]
                        context.player.state = scenes.build
                        context.send("–í—ã –∑–∞—à–ª–∏ –≤ " + NameLibrary.GetBuildingType(context.player.inBuild.type) + " \"" + context.player.inBuild.name + "\"", {keyboard: keyboard.build(scenes.buildKeyboard(context))})
                    }
                }
            }
            catch (e)
            {
                await api.SendLogs(context, "BuildersAndControlsScripts/EnterBuilding", e)
            }
        })
    }

    async GetResourcesFormBuilding(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                const time = new Date()
                if(context.player.inBuild.lastActivityTime - time > 0)
                {
                    await context.send("üëÄ –†–µ—Å—É—Ä—Å—ã –µ—â–µ –Ω–µ –¥–æ–±—ã—Ç—ã, –ø—Ä–∏—Ö–æ–¥–∏—Ç–µ —á–µ—Ä–µ–∑ " + NameLibrary.ParseFutureTime(context.player.inBuild.lastActivityTime), {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                time.setHours(time.getHours() + 6)
                const country = Data.GetCountryForCity(context.player.inBuild.cityID)
                const resource = context.player.inBuild.type.replace("building_of_", "")
                let playerBalance = {}
                let cityBalance = {}
                let extraction = context.player.inBuild.GetExtraction()
                const extractionTax = parseInt(context.player.citizenship) === parseInt(country.id) ? country.citizenTax : country.nonCitizenTax
                const tax = Math.round(extraction * (extractionTax * 0.01))
                extraction -= tax
                playerBalance[resource] = extraction
                cityBalance[resource] = tax
                await Data.AddPlayerResources(context.player.id, playerBalance)
                await Data.AddCityResources(context.player.location, cityBalance)
                context.player.inBuild.lastActivityTime = time
                await context.send("‚Ñπ –°–æ–±—Ä–∞–Ω–æ: " + NameLibrary.GetPrice(NameLibrary.ReversePrice(playerBalance)) + "\n–ù–∞–ª–æ–≥ —Å–æ—Å—Ç–∞–≤–∏–ª: " + NameLibrary.GetPrice(cityBalance) + "(" + extractionTax + "%)", {keyboard: keyboard.build(current_keyboard)})
                return resolve()
            }
            catch (e)
            {
                await api.SendLogs(context, "BuildersAndControlsScripts/GetResourcesFormBuilding", e)
            }
        })
    }

    async FillingOutTheRoad(context, current_keyboard, inputData, scenes)
    {
        return new Promise(async (resolve) => {
            try
            {
                const road = await CityRoads.findOne({where: {id: inputData.roadFromID}})
                if(road?.dataValues.isBlocked)
                {
                    let time = await InputManager.InputInteger(context, "1Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ –≤ –º–∏–Ω—É—Ç–∞—Ö –≤—Ä–µ–º—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –ø–æ –¥–æ—Ä–æ–≥–µ. (–¢—Ä–µ–±—É–µ—Ç—Å—è –≤–≤–µ—Å—Ç–∏ —Ü–µ–ª–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ)", current_keyboard, 1)
                    if(time === null) return resolve(false)
                    await CityRoads.update({time: time, isBlocked: false}, {where: {id: inputData.roadFromID}})
                    await CityRoads.update({time: time, isBlocked: false}, {where: {id: inputData.roadToID}})
                    await context.send("‚úÖ –ü—Ä–∏–Ω—è—Ç–æ, —Å–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ.", {keyboard: keyboard.build(current_keyboard)})
                    context.player.state = scenes.startMenu
                    return resolve(true)
                }
                else
                {
                    await context.send("‚ö† –ö—Ç–æ-—Ç–æ –∏–∑ –ì–ú-–æ–≤ —É–∂–µ –∑–∞–ø–æ–ª–Ω–∏–ª –¥–∞–Ω–Ω—ã–µ –≤–º–µ—Å—Ç–æ –≤–∞—Å, —Å–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ.", {keyboard: keyboard.build(current_keyboard)})
                    context.player.state = scenes.startMenu
                    return resolve(true)
                }
            }
            catch (e)
            {
                await api.SendLogs(context, "BuildersAndControlsScripts/FillingOutTheRoad", e)
            }
        })
    }

    async SQLSession(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                let request = "‚Ñπ –í—ã –≤–≤–µ–¥–µ–Ω—ã –≤ —Ä–µ–∂–∏–º SQL-—Ç–µ—Ä–º–∏–Ω–∞–ª–∞\n\n‚Ñπ –í–≤–µ–¥–∏—Ç–µ SQL-–∑–∞–ø—Ä–æ—Å, –µ—Å–ª–∏ –≤—ã –Ω–µ –∑–Ω–∞–µ—Ç–µ —á—Ç–æ —ç—Ç–æ —Ç–∞–∫–æ–µ, —Ç–æ –ª—É—á—à–µ —ç—Ç–æ –Ω–µ —Ç—Ä–æ–≥–∞—Ç—å."
                let query = null
                do
                {
                    try
                    {
                        query = await InputManager.InputString(context, request, current_keyboard)
                        if(!query) break
                        query = await sequelize.query(query)
                        if(query[0]) request = JSON.stringify(query[0], null, "\t")
                        else request = "üö´ –ù–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞"
                    }
                    catch (e)
                    {
                        await context.send("üö´ –û—à–∏–±–∫–∞: " + e.message)
                        request = "‚Ñπ –í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –ø–æ–≤—Ç–æ—Ä–Ω–æ"
                    }
                }
                while(query)
                await context.send("‚Ñπ –°–µ–∞–Ω—Å –∑–∞–≤–µ—Ä—à–µ–Ω.", {keyboard: keyboard.build(current_keyboard)})
                return resolve()
            }
            catch (e)
            {
                await api.SendLogs(context, "BuildersAndControlsScripts/SQLSession", e)
            }
        })
    }

    async SendLog(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                const log = await InputManager.InputString(context, "1Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞", current_keyboard)
                if(!log) return resolve()
                try
                {
                    const file = await api.upload.messageDocument({
                        peer_id: context.player.id,
                        source: {
                            value: "./logs/" + log
                        },
                        title: log
                    })
                    await context.send("‚úÖ –õ–æ–≤–∏:", {attachment: file, keyboard: keyboard.build(current_keyboard)})
                }
                catch (e)
                {
                    await context.send("‚ö† –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω", {keyboard: keyboard.build(current_keyboard)})
                }
            }
            catch (e)
            {
                await api.SendLogs(context, "BuildersAndControlsScripts/SendLog", e)
            }
        })
    }

    async SendLogList(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                const logs = fs.readdirSync("./logs/")
                let request = "‚Ñπ –°–ø–∏—Å–æ–∫ –ª–æ–≥–æ–≤:\n\n"
                logs.forEach(key => {
                    request += "üî∏ " + key + "\n"
                })
                if(logs.length === 0) request += "‚≠ï –ü—É—Å—Ç–æ"
                await context.send(request, {keyboard: keyboard.build(current_keyboard)})
                return resolve()
            }
            catch (e)
            {
                await api.SendLogs(context, "BuildersAndControlsScripts/SendLogList", e)
            }
        })
    }

    async ClearLogs(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                fs.readdir("./logs/", (err, files) => {
                    if (err) throw err;

                    for (const file of files) {
                        fs.unlink(path.join("./logs/", file), (err) => {
                            if (err) throw err
                        })
                    }
                })
                await context.send("‚úÖ –õ–æ–≥–∏ –æ—á–∏—â–µ–Ω—ã.", {keyboard: keyboard.build(current_keyboard)})
                return resolve()
            }
            catch (e)
            {
                await api.SendLogs(context, "BuildersAndControlsScripts/ClearLogs", e)
            }
        })
    }

    async ChangeMap(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                const kb = [
                    ["üó∫ –ö–∞—Ä—Ç–∞ –º–∏—Ä–∞", "global_map"],
                    ["üåê –ö–∞—Ä—Ç–∞ –¥–æ—Ä–æ–≥", "road_map"],
                    ["üóæ –ö–∞—Ä—Ç–∞ —Ñ—Ä–∞–∫—Ü–∏–∏", "country_map"]
                ]
                const action = await InputManager.KeyboardBuilder(context, "1Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–∞—Ä—Ç—ã, –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–º–µ–Ω—è—Ç—å", kb, current_keyboard)
                if(!action) return resolve()

                action === "global_map" && await this.ChangeGlobalMap(context, current_keyboard)
                action === "road_map" && await this.ChangeRoadMap(context, current_keyboard)
                action === "country_map" && await this.ChangeCountryMap(context, current_keyboard)

                return resolve()
            }
            catch (e)
            {
                await api.SendLogs(context, "BuildersAndControlsScripts/ChangeMap", e)
            }
        })
    }

    async ChangeGlobalMap(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                const newMap = await InputManager.InputPhoto(context, "2Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—É—é –∫–∞—Ä—Ç—É", current_keyboard)
                if(!newMap) return resolve()
                Data.variables.globalMap = newMap
                await Data.SaveVariables()
                await context.send("‚úÖ –ö–∞—Ä—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞", {keyboard: keyboard.build(current_keyboard)})
                return resolve()
            }
            catch (e)
            {
                await api.SendLogs(context, "BuildersAndControlsScripts/ChangeMap", e)
            }
        })
    }

    async ChangeRoadMap(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                const newMap = await InputManager.InputPhoto(context, "2Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—É—é –∫–∞—Ä—Ç—É", current_keyboard)
                if(!newMap) return resolve()
                Data.variables.roadMap = newMap
                await Data.SaveVariables()
                await context.send("‚úÖ –ö–∞—Ä—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞", {keyboard: keyboard.build(current_keyboard)})
                return resolve()
            }
            catch (e)
            {
                await api.SendLogs(context, "BuildersAndControlsScripts/ChangeMap", e)
            }
        })
    }

    async ChangeCountryMap(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                let country = await InputManager.KeyboardBuilder(context, "2Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ —Ñ—Ä–∞–∫—Ü–∏—é", Data.GetCountryButtons(), current_keyboard)
                if(!country) return resolve()
                country = Data.ParseButtonID(country)
                country = Data.countries[country]
                const newMap = await InputManager.InputPhoto(context, "3Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—É—é –∫–∞—Ä—Ç—É", current_keyboard)
                if(!newMap) return resolve()
                country.map = newMap
                await Country.update({map: newMap}, {where: {id: country.id}})
                await Data.SaveVariables()
                await context.send("‚úÖ –ö–∞—Ä—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞", {keyboard: keyboard.build(current_keyboard)})
                return resolve()
            }
            catch (e)
            {
                await api.SendLogs(context, "BuildersAndControlsScripts/ChangeMap", e)
            }
        })
    }

    async AddMessage(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                const text = await InputManager.InputString(context, "1Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–º–æ–≥—É—Ç –≤–∏–¥–µ—Ç—å –≤—Å–µ –∏–≥—Ä–æ–∫–∏ –ø–æ –Ω–∞–∂–∞—Ç–∏—é –∫–Ω–æ–ø–∫–∏ \"–°–æ–æ–±—â–µ–Ω–∏—è\" –≤ –º–µ–Ω—é", current_keyboard, 1)
                if(!text) return resolve()
                const isNoisy = await InputManager.InputBoolean(context, "2Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏?\n\nüî∏ –î–∞ - –í—Å–µ–º –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–º –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞–º –ø—Ä–∏–¥–µ—Ç –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏\nüî∏ –ù–µ—Ç - –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—Å—è –±–µ–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤, –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –µ–≥–æ –º–æ–∂–Ω–æ –±—É–¥–µ—Ç —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ –º–µ–Ω—é —Å–æ–æ–±—â–µ–Ω–∏–π", current_keyboard)
                const accept = await InputManager.InputBoolean(context, `3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n\n–¢–µ–∫—Å—Ç:\n${text}\n–¢–∏—Ö–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: ${isNoisy ? "–ù–µ—Ç" : "–î–∞"}`, current_keyboard)
                if(!accept)
                {
                    await context.send("üö´ –û—Ç–º–µ–Ω–µ–Ω–æ", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                await Messages.create({
                    text: text,
                    isSilent: !isNoisy
                })
                if(isNoisy)
                {
                    const subscribedUsers = await PlayerStatus.findAll({where: {notifications: true}, attributes: ["id"]})
                    await context.send("‚úÖ –ù–∞—á–∏–Ω–∞—é –æ—Ç–ø—Ä–∞–≤–∫—É, –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏–≥—Ä–æ–∫–æ–≤")
                    for(const user of subscribedUsers)
                    {
                        await api.SendNotification(user.dataValues.id, "‚ö°‚ö°‚ö° –ù–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ!\n\n" + text + "\n\n‚Ñπ–ü—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ –≤ –ú–µ–Ω—é>>–ü–∞—Ä–∞–º–µ—Ç—Ä—ã>>–û—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
                    }
                }
                await context.send("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ", {keyboard: keyboard.build(current_keyboard)})
                return resolve()
            }
            catch (e)
            {
                await api.SendLogs(context, "BuildersAndControlsScripts/AddMessage", e)
            }
        })
    }

    async RoadControls(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                const kb = [
                    ["‚ûï –ù–æ–≤–∞—è –≥–æ—Å –¥–æ—Ä–æ–≥–∞", "create_country_road"],
                    ["‚è≥ –ò–∑–º–µ–Ω–∏—Ç—å –≥–æ—Å –¥–æ—Ä–æ–≥—É", "edit_country_road"],
                    ["üö≥ –£–¥–∞–ª–∏—Ç—å –≥–æ—Å –¥–æ—Ä–æ–≥—É", "delete_country_road"],
                    ["‚è≥ –ò–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä –¥–æ—Ä–æ–≥—É", "edit_city_road"],
                    ["üö≥ –£–¥–∞–ª–∏—Ç—å –≥–æ—Ä –¥–æ—Ä–æ–≥—É", "delete_city_road"]
                ]
                const action = await InputManager.KeyboardBuilder(context, "1Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", kb, current_keyboard)
                if(!action) return resolve()
                action === "create_country_road" && await this.CreateRoad(context, current_keyboard)
                action === "edit_country_road" && await this.ChangeTheRoad(context, current_keyboard)
                action === "delete_country_road" && await this.DeleteRoad(context, current_keyboard)
                action === "edit_city_road" && await this.ChangeCityRoad(context, current_keyboard)
                action === "delete_city_road" && await this.DeleteCityRoad(context, current_keyboard)
                return resolve()
            }
            catch (e)
            {
                await api.SendLogs(context, "BuildersAndControlsScripts/ChangeTheRoad", e)
            }
        })
    }

    async DeleteCityRoad(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                let country = await InputManager.KeyboardBuilder(context, "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ—Ä–∞–∫—Ü–∏—é", Data.GetCountryButtons(), current_keyboard)
                if(!country) return resolve()
                country = Data.ParseButtonID(country)
                country = Data.countries[country]
                const roads = await CityRoads.findAll({where: {fromID: Data.cities.filter(city => {return city.countryID === country.id}).map(city => {return city.id})}})
                let request = "‚Ñπ ID –≥–æ—Ä–æ–¥–æ–≤:\n\n"
                const roadButtons = []
                Data.cities.filter(city => {return city.countryID === country.id}).forEach(city => {request += "üî∏ " + city.name + "  -  " + city.id + "\n"})
                request += "\n‚Ñπ –î–æ—Ä–æ–≥–∏ —É–¥–∞–ª—è—é—Ç—Å—è –ø–æ–ø–∞—Ä–Ω–æ, –µ—Å–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å –¥–æ—Ä–æ–≥—É A->B, —Ç–æ –∏–∑–º–µ–Ω–∏—Ç—Å—è –∏ –¥–æ—Ä–æ–≥–∞ B->A"
                for(let i = 0; i < roads.length; i++)
                {
                    roadButtons.push([roads[i].dataValues.fromID + " -> " + roads[i].dataValues.toID, "ID" + i])
                }
                if(roadButtons.length === 0)
                {
                    await context.send(`‚ö† –í —Ñ—Ä–∞–∫—Ü–∏–∏ ${country.GetName(context.player.platform === "IOS")} –Ω–µ—Ç –º–µ–∂–¥—É–≥–æ—Ä–æ–¥–Ω–∏—Ö –¥–æ—Ä–æ–≥`, {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                let road = await InputManager.KeyboardBuilder(context, request, roadButtons, current_keyboard)
                if(!road) return resolve()
                road = Data.ParseButtonID(road)
                road = roads[road]
                const time = await InputManager.InputBoolean(context, `‚ùì –í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –¥–æ—Ä–æ–≥—É —Å–æ–µ–¥–∏–Ω—è—é—â—É—é –≥–æ—Ä–æ–¥–∞ ${Data.cities[road.dataValues.fromID].name} –∏ ${Data.cities[road.dataValues.toID].name}?`, current_keyboard, 0)
                if(!time) return resolve()
                await CityRoads.destroy({where: {fromID: road.dataValues.fromID, toID: road.dataValues.toID}})
                await CityRoads.destroy({where: {fromID: road.dataValues.toID, toID: road.dataValues.fromID}})
                await context.send("‚úÖ –î–æ—Ä–æ–≥–∞ —É–¥–∞–ª–µ–Ω–∞", {keyboard: keyboard.build(current_keyboard)})
                return resolve()
            }
            catch (e)
            {
                await api.SendLogs(context, "BuildersAndControlsScripts/ChangeCityRoad", e)
            }
        })
    }

    async ChangeCityRoad(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                let country = await InputManager.KeyboardBuilder(context, "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ—Ä–∞–∫—Ü–∏—é", Data.GetCountryButtons(), current_keyboard)
                if(!country) return resolve()
                country = Data.ParseButtonID(country)
                country = Data.countries[country]
                const roads = await CityRoads.findAll({where: {fromID: Data.cities.filter(city => {return city.countryID === country.id}).map(city => {return city.id})}})
                let request = "‚Ñπ ID –≥–æ—Ä–æ–¥–æ–≤:\n\n"
                const roadButtons = []
                Data.cities.filter(city => {return city.countryID === country.id}).forEach(city => {request += "üî∏ " + city.name + "  -  " + city.id + "\n"})
                request += "\n‚Ñπ –î–æ—Ä–æ–≥–∏ –∏–∑–º–µ–Ω—è—é—Ç—Å—è –ø–æ–ø–∞—Ä–Ω–æ, –µ—Å–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å –¥–æ—Ä–æ–≥—É A->B, —Ç–æ –∏–∑–º–µ–Ω–∏—Ç—Å—è –∏ –¥–æ—Ä–æ–≥–∞ B->A"
                for(let i = 0; i < roads.length; i++)
                {
                    roadButtons.push([roads[i].dataValues.fromID + " -> " + roads[i].dataValues.toID, "ID" + i])
                }
                if(roadButtons.length === 0)
                {
                    await context.send(`‚ö† –í —Ñ—Ä–∞–∫—Ü–∏–∏ ${country.GetName(context.player.platform === "IOS")} –Ω–µ—Ç –º–µ–∂–¥—É–≥–æ—Ä–æ–¥–Ω–∏—Ö –¥–æ—Ä–æ–≥`, {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                let road = await InputManager.KeyboardBuilder(context, request, roadButtons, current_keyboard)
                if(!road) return resolve()
                road = Data.ParseButtonID(road)
                road = roads[road]
                const time = await InputManager.InputInteger(context, "–í–≤–µ–¥–∏—Ç–µ –≤ –º–∏–Ω—É—Ç–∞—Ö –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –ø–æ —ç—Ç–æ–π –¥–æ—Ä–æ–≥–µ", current_keyboard, 0)
                if(time === null) return resolve()
                await CityRoads.update({time: time}, {where: {fromID: road.dataValues.fromID, toID: road.dataValues.toID}})
                await CityRoads.update({time: time}, {where: {fromID: road.dataValues.toID, toID: road.dataValues.fromID}})
                await context.send("‚úÖ –î–æ—Ä–æ–≥–∞ –∏–∑–º–µ–Ω–µ–Ω–∞", {keyboard: keyboard.build(current_keyboard)})
                return resolve()
            }
            catch (e)
            {
                await api.SendLogs(context, "BuildersAndControlsScripts/ChangeCityRoad", e)
            }
        })
    }

    async DeleteRoad(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                const roads = await CountryRoads.findAll()
                let request = "ID —Ñ—Ä–∞–∫—Ü–∏–π:\n\n"
                const roadButtons = []
                for(let i = 0; i < Data.countries.length; i++)
                {
                    if(Data.countries[i])
                    {
                        request += "üî∏ " + Data.countries[i].GetName(context.player.platform === "IOS") + "  -  " + Data.countries[i].id + "\n"
                    }
                }
                request += "\n‚Ñπ –î–æ—Ä–æ–≥–∏ —É–¥–∞–ª—è—é—Ç—Å—è –ø–æ–ø–∞—Ä–Ω–æ, –µ—Å–ª–∏ —É–¥–∞–ª–∏—Ç—å –¥–æ—Ä–æ–≥—É A->B, —Ç–æ —É–¥–∞–ª–∏—Ç—Å—è –∏ –¥–æ—Ä–æ–≥–∞ B->A"
                for(let i = 0; i < roads.length; i++)
                {
                    roadButtons.push([roads[i].dataValues.fromID + " -> " + roads[i].dataValues.toID, "ID" + i])
                }
                let road = await InputManager.KeyboardBuilder(context, request, roadButtons, current_keyboard)
                if(!road) return resolve()
                road = Data.ParseButtonID(road)
                road = roads[road]
                const accept = await InputManager.InputBoolean(context, `‚ùì –£–¥–∞–ª–∏—Ç—å –¥–æ—Ä–æ–≥—É —Å–æ–µ–¥–∏–Ω—è—é—â—É—é ${Data.countries[road.dataValues.fromID].GetName(context.player.platform === "IOS")} –∏ ${Data.countries[road.dataValues.toID].GetName(context.player.platform === "IOS")}`)
                if(!accept)
                {
                    await context.send("üö´ –û—Ç–º–µ–Ω–µ–Ω–æ", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                await CountryRoads.destroy({where: {fromID: road.dataValues.fromID, toID: road.dataValues.toID}})
                await CountryRoads.destroy({where: {fromID: road.dataValues.toID, toID: road.dataValues.fromID}})
                await context.send("‚úÖ –î–æ—Ä–æ–≥–∞ —É–¥–∞–ª–µ–Ω–∞", {keyboard: keyboard.build(current_keyboard)})
                return resolve()
            }
            catch (e)
            {
                await api.SendLogs(context, "BuildersAndControlsScripts/DeleteRoad", e)
            }
        })
    }

    async CreateRoad(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                const firstCountryButtons = Data.GetCountryButtons()
                let firstCountry = await InputManager.KeyboardBuilder(context, "1Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–≤—É—é —Ñ—Ä–∞–∫—Ü–∏—é", firstCountryButtons, current_keyboard)
                if(!firstCountry) return resolve()
                firstCountry = Data.ParseButtonID(firstCountry)
                firstCountry = Data.countries[firstCountry]
                const secondCountryButtons = firstCountryButtons.filter(key => {return key[0] !== firstCountry.name})
                let secondCountry = await InputManager.KeyboardBuilder(context, "2Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ç–æ—Ä—É—é —Ñ—Ä–∞–∫—Ü–∏—é", secondCountryButtons, current_keyboard)
                if(!secondCountry) return resolve()
                secondCountry = Data.ParseButtonID(secondCountry)
                secondCountry = Data.countries[secondCountry]
                const road = await CountryRoads.count({where: {fromID: firstCountry.id, toID: secondCountry.id}})
                if(road !== 0)
                {
                    await context.send("‚ö† –¢–∞–∫–∞—è –¥–æ—Ä–æ–≥–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                const time = await InputManager.InputInteger(context, "3Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ –≤ –º–∏–Ω—É—Ç–∞—Ö –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –ø–æ —ç—Ç–æ–π –¥–æ—Ä–æ–≥–µ", current_keyboard, 0)
                if(time === null) return resolve()
                await CountryRoads.create({
                    time: time,
                    fromID: firstCountry.id,
                    toID: secondCountry.id,
                    isBlocked: false
                })
                await CountryRoads.create({
                    time: time,
                    fromID: secondCountry.id,
                    toID: firstCountry.id,
                    isBlocked: false
                })
                await context.send("‚úÖ –î–æ—Ä–æ–≥–∞ —Å–æ–∑–¥–∞–Ω–∞", {keyboard: keyboard.build(current_keyboard)})
                return resolve()
            }
            catch (e)
            {
                await api.SendLogs(context, "BuildersAndControlsScripts/CreateRoad", e)
            }
        })
    }

    async ChangeTheRoad(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                const roads = await CountryRoads.findAll()
                let request = "‚Ñπ ID —Ñ—Ä–∞–∫—Ü–∏–π:\n\n"
                const roadButtons = []
                for(let i = 0; i < Data.countries.length; i++)
                {
                    if(Data.countries[i])
                    {
                        request += "üî∏ " + Data.countries[i].GetName(context.player.platform === "IOS") + "  -  " + Data.countries[i].id + "\n"
                    }
                }
                request += "\n‚Ñπ –î–æ—Ä–æ–≥–∏ –∏–∑–º–µ–Ω—è—é—Ç—Å—è –ø–æ–ø–∞—Ä–Ω–æ, –µ—Å–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å –¥–æ—Ä–æ–≥—É A->B, —Ç–æ –∏–∑–º–µ–Ω–∏—Ç—Å—è –∏ –¥–æ—Ä–æ–≥–∞ B->A"
                for(let i = 0; i < roads.length; i++)
                {
                    roadButtons.push([roads[i].dataValues.fromID + " -> " + roads[i].dataValues.toID, "ID" + i])
                }
                let road = await InputManager.KeyboardBuilder(context, request, roadButtons, current_keyboard)
                if(!road) return resolve()
                road = Data.ParseButtonID(road)
                road = roads[road]
                const time = await InputManager.InputInteger(context, "–í–≤–µ–¥–∏—Ç–µ –≤ –º–∏–Ω—É—Ç–∞—Ö –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –ø–æ —ç—Ç–æ–π –¥–æ—Ä–æ–≥–µ", current_keyboard, 0)
                if(time === null) return resolve()
                await CountryRoads.update({time: time}, {where: {fromID: road.dataValues.fromID, toID: road.dataValues.toID}})
                await CountryRoads.update({time: time}, {where: {fromID: road.dataValues.toID, toID: road.dataValues.fromID}})
                await context.send("‚úÖ –î–æ—Ä–æ–≥–∞ –∏–∑–º–µ–Ω–µ–Ω–∞", {keyboard: keyboard.build(current_keyboard)})
                return resolve()
            }
            catch (e)
            {
                await api.SendLogs(context, "BuildersAndControlsScripts/ChangeTheRoad", e)
            }
        })
    }

    async ChatControls(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                const kb = [
                    ["‚ûï –î–æ–±–∞–≤–∏—Ç—å —á–∞—Ç", "add"],
                    ["‚ùå –£–¥–∞–ª–∏—Ç—å —á–∞—Ç", "delete"]
                ]
                const action = await InputManager.KeyboardBuilder(context, "1Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", kb, current_keyboard)
                if(!action) return resolve()
                action === "add" && await this.AddTheChat(context, current_keyboard)
                action === "delete" && await this.DeleteChat(context, current_keyboard)
                return resolve()
            }
            catch (e)
            {
                await api.SendLogs(context, "BuildersAndControlsScripts/ChatControls", e)
            }
        })
    }

    async DeleteChat(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                let buttons = []
                for(let i = 0; i < Data.countries.length; i++)
                {
                    if(Data.countries[i])
                    {
                        buttons.push([Data.countries[i].name, "ID" + Data.countries[i].id])
                    }
                }
                let country = await InputManager.KeyboardBuilder(context, "2Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –∫ –∫–∞–∫–æ–π —Ñ—Ä–∞–∫—Ü–∏–∏ –±—É–¥–µ—Ç –æ—Ç–Ω–æ—Å–∏—Ç—å—Å—è —á–∞—Ç", buttons, current_keyboard)
                if(!country) return resolve()
                country = Data.ParseButtonID(country)
                country = Data.countries[country]

                const chats = await Chats.findAll({where: {countryID: country.id}})
                if(chats.length === 0)
                {
                    await context.send(`‚ö† –î–ª—è —Ñ—Ä–∞–∫—Ü–∏–∏ ${country.GetName(context.player.platform === "IOS")} –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ —á–∞—Ç–æ–≤`, {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                buttons = []
                let request = `–°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ —Ñ—Ä–∞–∫—Ü–∏–∏ ${country.GetName(context.player.platform === "IOS")}:\n\n`
                for(let i = 0; i < chats.length; i++)
                {
                    if(chats[i])
                    {
                        buttons.push([chats[i].name, chats[i].link])
                        request += "üî∏" + chats[i].name + "  -  " + "https://vk.cc/" + chats[i].link + "\n"
                    }
                }
                const chat = await InputManager.KeyboardBuilder(context, request + "\n\n3Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å", buttons, current_keyboard)
                if(!chat) return resolve()
                await Chats.destroy({where: {link: chat}})
                await context.send("‚úÖ –ß–∞—Ç —É–¥–∞–ª–µ–Ω", {keyboard: keyboard.build(current_keyboard)})
                return resolve()
            }
            catch (e)
            {
                await api.SendLogs(context, "BuildersAndControlsScripts/DeleteChat", e)
            }
        })
    }

    async AddTheChat(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                const countryButtons = []
                for(let i = 0; i < Data.countries.length; i++)
                {
                    if(Data.countries[i])
                    {
                        countryButtons.push([Data.countries[i].name, "ID" + Data.countries[i].id])
                    }
                }
                let country = await InputManager.KeyboardBuilder(context, "2Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –∫ –∫–∞–∫–æ–π —Ñ—Ä–∞–∫—Ü–∏–∏ –±—É–¥–µ—Ç –æ—Ç–Ω–æ—Å–∏—Ç—å—Å—è —á–∞—Ç", countryButtons, current_keyboard)
                if(!country) return resolve()
                country = Data.ParseButtonID(country)
                country = Data.countries[country]

                const name = await InputManager.InputString(context, "3Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞", current_keyboard)
                if(!name) return resolve()

                const link = await InputManager.InputString(context, "4Ô∏è‚É£ –í—Å—Ç–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –≤ —á–∞—Ç –í–ö –∏–ª–∏ –¢–ì", current_keyboard)
                if(!link) return resolve()
                if(!link.match(/vk\.me\/join|t\.me\//))
                {
                    await context.send("üö´ –≠—Ç–æ –Ω–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ –±–µ—Å–µ–¥—É", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                const shortLink = await api.api.utils.getShortLink({
                    url: link,
                    private: 0
                })
                await Chats.create({
                    countryID: country.id,
                    link: shortLink.key,
                    name: name
                })
                await context.send("‚úÖ –ß–∞—Ç –¥–æ–±–∞–≤–ª–µ–Ω", {keyboard: keyboard.build(current_keyboard)})
                return resolve()
            }
            catch (e)
            {
                await api.SendLogs(context, "BuildersAndControlsScripts/AddTheChat", e)
            }
        })
    }

    async GetCountryInfo(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                let country = await InputManager.KeyboardBuilder(context, "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ—Ä–∞–∫—Ü–∏—é", Data.GetCountryButtons(), current_keyboard)
                if(!country) return resolve()
                country = Data.ParseButtonID(country)
                country = Data.countries[country]
                await context.send("‚Ñπ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ—Ä–∞–∫—Ü–∏–∏ " + country.GetName(context.player.platform === "IOS") + "\n\n" + await country.GetAllInfo() + "\n\n" + country.GetResources(), {keyboard: keyboard.build(current_keyboard)})
                return resolve()
            }
            catch (e)
            {
                await api.SendLogs(context, "BuildersAndControlsScripts/GetCountryInfo", e)
            }
        })
    }

    async GetCityInfo(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                let city = await InputManager.KeyboardBuilder(context, "–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥", Data.GetCityButtons(), current_keyboard)
                if(!city) return resolve()
                city = Data.ParseButtonID(city)
                city = Data.cities[city]
                await context.send("‚Ñπ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥–æ—Ä–æ–¥–µ " + city.name + "\n\n" + await city.GetAllInfo() + "\n\n" + city.GetResources(), {keyboard: keyboard.build(current_keyboard)})
                return resolve()
            }
            catch (e)
            {
                await api.SendLogs(context, "BuildersAndControlsScripts/GetCityInfo", e)
            }
        })
    }

    async GetUserInfo(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                let user = await InputManager.InputUser(context, "1Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", current_keyboard)
                if(!user) return resolve()
                await context.send(await NameLibrary.GetFullUserInfo(user.dataValues.id, User), {keyboard: keyboard.build(current_keyboard)})
                return resolve()
            }
            catch (e)
            {
                await api.SendLogs(context, "BuildersAndControlsScripts/GetUserInfo", e)
            }
        })
    }

    async GetBuildingInfo(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                let city = await InputManager.KeyboardBuilder(context, "1Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥", Data.GetCityButtons(), current_keyboard)
                if(!city) return resolve()
                city = Data.ParseButtonID(city)
                if(!Data.buildings[city])
                {
                    await context.send("üö´ –í –≥–æ—Ä–æ–¥–µ –Ω–µ—Ç –∑–¥–∞–Ω–∏–π", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                const buttons = []
                for(let i = 0; i < Data.buildings[city].length; i++)
                {
                    buttons.push([Data.buildings[city][i].name, "ID" + i])
                }
                let build = await InputManager.KeyboardBuilder(context, "2Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –∑–¥–∞–Ω–∏–µ", buttons, current_keyboard)
                if(!build) return resolve()
                build = Data.ParseButtonID(build)
                build = Data.buildings[city][build]
                await context.send("‚Ñπ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–¥–∞–Ω–∏–∏:" + "\n\n" + build.GetAllInfo(), {keyboard: keyboard.build(current_keyboard)})
                return resolve()
            }
            catch (e)
            {
                await api.SendLogs(context, "BuildersAndControlsScripts/GetBuildingInfo", e)
            }
        })
    }

    async RemoveEffect(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                let user = await InputManager.InputUser(context, "1Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä–æ–∫–∞", current_keyboard)
                if(!user) return resolve()
                if(!Data.users[user.dataValues.id])
                {
                    await context.send(`‚ö† –î–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞ ${user.dataValues.id}(${user.dataValues.nick}) –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ –∫—ç—à–µ, –ø–æ—Ö–æ–∂–µ —á—Ç–æ –æ–Ω –¥–∞–≤–Ω–æ –Ω–µ –∑–∞—Ö–æ–¥–∏–ª`, {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                user = Data.users[user.dataValues.id]
                user.effects = []
                await context.send(`‚Ñπ –°–ø–∏—Å–æ–∫ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ –∏–≥—Ä–æ–∫–∞ ${user.GetName()} –æ—á–∏—â–µ–Ω`, {keyboard: keyboard.build(current_keyboard)})
                return resolve()
            }
            catch (e)
            {
                await api.SendLogs(context, "BuildersAndControlsScripts/RemoveEffect", e)
            }
        })
    }

    async AddEffect(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                let user = await InputManager.InputUser(context, "1Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä–æ–∫–∞, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞–ª–æ–∂–∏—Ç—å —ç—Ñ—Ñ–µ–∫—Ç", current_keyboard)
                if(!user) return resolve()
                if(!Data.users[user.dataValues.id])
                {
                    await context.send(`‚ö† –î–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞ ${user.dataValues.id}(${user.dataValues.nick}) –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ –∫—ç—à–µ, –ø–æ—Ö–æ–∂–µ —á—Ç–æ –æ–Ω –¥–∞–≤–Ω–æ –Ω–µ –∑–∞—Ö–æ–¥–∏–ª`, {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                user = Data.users[user.dataValues.id]
                if(user.status === "worker")
                {
                    await context.send("‚ö† –ó–∞–ø—Ä–µ—â–∞–µ—Ç—Å—è –Ω–∞–∫–ª–∞–¥—ã–≤–∞—Ç—å —ç—Ñ—Ñ–µ–∫—Ç—ã –Ω–∞ –∏–≥—Ä–æ–∫–æ–≤ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º ‚öô –†–∞–±–æ—Ç–Ω–∏–∫", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                const effectButtons = []
                let request = "‚Ñπ –û–ø–∏—Å–∞–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤:\n\n"
                for(const effect of Object.keys(Effects))
                {
                    effectButtons.push([Effects[effect].name, effect])
                    request += `üî∂ ${Effects[effect].name} ${Effects[effect].description}\n`
                }
                let effect = await InputManager.KeyboardBuilder(context, request + "\n2Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ —ç—Ñ—Ñ–µ–∫—Ç", effectButtons, current_keyboard)
                if(!effect) return resolve()
                effect = Effects[effect]
                let time = await InputManager.InputDefaultInteger(context, "3Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –¥–µ–π—Å—Ç–≤–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∞ (–Ω–µ –±–æ–ª–µ–µ –Ω–µ–¥–µ–ª–∏ (10080 –º–∏–Ω))", current_keyboard, 1, 10080, effect.time)
                if(!time) return resolve()
                user.AddEffect(effect, time)
                await context.send(`‚úÖ –ò–≥—Ä–æ–∫ ${user.GetName()} –ø–æ–ª—É—á–∏–ª —ç—Ñ—Ñ–µ–∫—Ç ${effect.name}`, {keyboard: keyboard.build(current_keyboard)})
                await api.SendMessage(user.id, "‚Ñπ –ù–∞ –≤–∞—Å –±—ã–ª –Ω–∞–ª–æ–∂–µ–Ω —ç—Ñ—Ñ–µ–∫—Ç " + effect.name + " –Ω–∞ " + time + " –º–∏–Ω—É—Ç")
                return resolve()
            }
            catch (e)
            {
                await api.SendLogs(context, "BuildersAndControlsScripts/AddEffect", e)
            }
        })
    }

    async Events(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                let kb = [["‚ûï –ù–∞—á–∞—Ç—å", "start"], ["üö´ –ü—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å", "stop"]]
                let action = await InputManager.KeyboardBuilder(context, "1Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", kb, current_keyboard)
                if(!action) return resolve()
                action = action === "start"
                kb = [
                    ["üõ£ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–æ—Ä–æ–≥–∏", "block_road"],
                    ["üåá –û—Å–∞–¥–∞ –≥–æ—Ä–æ–¥–∞", "block_city"],
                    ["üî∞ –ë–ª–æ–∫–∞–¥–∞ —Ñ—Ä–∞–∫—Ü–∏–∏", "block_country"],
                    ["üî∞ –°–∞–Ω–∫—Ü–∏–∏ –¥–ª—è –≥—Ä–∞–∂–¥–∞–Ω", "block_country_citizen"],
                    ["üåá –°–∞–Ω–∫—Ü–∏–∏ –¥–ª—è –≥–æ—Ä–æ–∂–∞–Ω", "block_city_citizen"],
                    ["üì∞ –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ", "new_event"]
                ]
                const type = await InputManager.KeyboardBuilder(context, "‚Ñπ –°–ø—Ä–∞–≤–∫–∞:\n\nüî∏ üõ£ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–æ—Ä–æ–≥–∏ - –∑–∞–ø—Ä–µ—â–∞–µ—Ç –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –ø–æ –¥–æ—Ä–æ–≥–µ\n\nüî∏ üåá –û—Å–∞–¥–∞ –≥–æ—Ä–æ–¥–∞ - –±–ª–æ–∫–∏—Ä—É–µ—Ç –ø–µ—Ä–µ–≤–æ–¥—ã —Ä–µ—Å—É—Ä—Å–æ–≤ –∏–∑ –±—é–¥–∂–µ—Ç–∞ –≥–æ—Ä–æ–¥–∞ –∏ –∑–∞–ø—Ä–µ—â–∞–µ—Ç –≤—ä–µ–∑–¥/–≤—ã–µ–∑–¥\n\nüî∏ üî∞ –ë–ª–æ–∫–∞–¥–∞ —Ñ—Ä–∞–∫—Ü–∏–∏ - –±–ª–æ–∫–∏—Ä—É–µ—Ç –ø–µ—Ä–µ–≤–æ–¥—ã —Ä–µ—Å—É—Ä—Å–æ–≤ –∏–∑ –±—é–¥–∂–µ—Ç–∞ —Ñ—Ä–∞–∫—Ü–∏–∏ –∏ –∑–∞–ø—Ä–µ—â–∞–µ—Ç –≤—ä–µ–∑–¥/–≤—ã–µ–∑–¥\n\nüî∏ üî∞ –°–∞–Ω–∫—Ü–∏–∏ –¥–ª—è –≥—Ä–∞–∂–¥–∞–Ω - –±–ª–æ–∫–∏—Ä—É–µ—Ç —Ä–∞—Å–ø–æ—Ä—è–∂–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–∞–º–∏ –∏ –∏–º—É—â–µ—Å—Ç–≤–æ–º –∏–≥—Ä–æ–∫–æ–≤ –∏–º–µ—é—â–∏—Ö –≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ñ—Ä–∞–∫—Ü–∏–∏\n\nüî∏ üåá –°–∞–Ω–∫—Ü–∏–∏ –¥–ª—è –≥–æ—Ä–æ–∂–∞–Ω - –±–ª–æ–∫–∏—Ä—É–µ—Ç —Ä–∞—Å–ø–æ—Ä—è–∂–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–∞–º–∏ –∏ –∏–º—É—â–µ—Å—Ç–≤–æ–º –∏–≥—Ä–æ–∫–æ–≤ –∏–º–µ—é—â–∏—Ö –ø—Ä–æ–ø–∏—Å–∫—É –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞\n\n2Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ —Å–æ–±—ã—Ç–∏–µ", kb, current_keyboard)
                if(!type) return resolve()
                type === "block_road" && await this.BlockRoadEvent(context, current_keyboard, action)
                type === "block_city" && await this.BlockCityEvent(context, current_keyboard, action)
                type === "block_country" && await this.BlockCountryEvent(context, current_keyboard, action)
                type === "block_country_citizen" && await this.CountrySanctionsEvent(context, current_keyboard, action)
                type === "block_city_citizen" && await this.CitySanctionsEvent(context, current_keyboard, action)
                type === "new_event" && await this.NewEvent(context, current_keyboard, action)
                return resolve()
            }
            catch (e)
            {
                await api.SendLogs(context, "BuildersAndControlsScripts/Events", e)
            }
        })
    }

    async NewEvent(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                const name = await InputManager.InputString(context, "1Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è (–¥–æ 35 —Å–∏–º–≤–æ–ª–æ–≤)", current_keyboard, 1, 35)
                if(!name) return resolve()
                const text = await InputManager.InputString(context, "2Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è", current_keyboard)
                if(!text) return resolve()
                const date = await InputManager.InputDate(context, "3Ô∏è‚É£ –ö–æ–≥–¥–∞ –±—É–¥–µ—Ç –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å —ç—Ç–æ —Å–æ–±—ã—Ç–∏–µ?", current_keyboard)
                if(!date) return resolve()
                const accept = await InputManager.InputBoolean(context, `üì∞ ${name} ${NameLibrary.ParseDateTime(date)}\n${text}\n\n–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?`)
                if(!accept)
                {
                    await context.send("üö´ –û—Ç–º–µ–Ω–µ–Ω–æ")
                    return resolve()
                }
                await Events.create({
                    name: name,
                    description: text,
                    date: date
                })
                await context.send(`‚úÖ –°–æ–±—ã—Ç–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ`, {keyboard: keyboard.build(current_keyboard)})
            }
            catch (e)
            {
                await api.SendLogs(context, "BuildersAndControlsScripts/BlockRoadEvent", e)
            }
        })
    }

    async BlockRoadEvent(context, current_keyboard, action)
    {
        return new Promise(async (resolve) => {
            try
            {
                const roads = await CountryRoads.findAll({where: {isBlocked: !action}})
                let request = "ID —Ñ—Ä–∞–∫—Ü–∏–π:\n\n"
                const roadButtons = []
                for(let i = 0; i < Data.countries.length; i++)
                {
                    if(Data.countries[i])
                    {
                        request += "üî∏ " + Data.countries[i].GetName(context.player.platform === "IOS") + "  -  " + Data.countries[i].id + "\n"
                    }
                }
                request += `\n‚Ñπ –î–æ—Ä–æ–≥–∏ –±–ª–æ–∫–∏—Ä—É—é—Ç—Å—è –ø–æ–ø–∞—Ä–Ω–æ, –µ—Å–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –¥–æ—Ä–æ–≥—É A->B, —Ç–æ –∏–∑–º–µ–Ω–∏—Ç—Å—è –∏ –¥–æ—Ä–æ–≥–∞ B->A\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–∫—É—é –¥–æ—Ä–æ–≥—É –≤—ã —Ö–æ—Ç–∏—Ç–µ ${action ? "–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å" : "—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å"}`
                for(let i = 0; i < roads.length; i++)
                {
                    roadButtons.push([roads[i].dataValues.fromID + " -> " + roads[i].dataValues.toID, "ID" + i])
                }
                if(roadButtons.length === 0)
                {
                    await context.send(`‚ö† –ù–µ—Ç ${action ? "–Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö" : "–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö"} –¥–æ—Ä–æ–≥`, {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                let road = await InputManager.KeyboardBuilder(context, request, roadButtons, current_keyboard)
                if(!road) return resolve()
                road = Data.ParseButtonID(road)
                road = roads[road].dataValues
                await CountryRoads.update({isBlocked: action}, {where: {fromID: road.fromID, toID: road.toID}})
                await CountryRoads.update({isBlocked: action}, {where: {fromID: road.toID, toID: road.fromID}})
                await api.SendMessage(Data.countries[road.fromID].leaderID, `‚Ñπ –î–æ—Ä–æ–≥–∞ —Å–æ–µ–¥–∏–Ω—è—é—â–∞—è —Ñ—Ä–∞–∫—Ü–∏–∏ ${Data.countries[road.fromID].GetName(context.player.platform === "IOS")} –∏ ${Data.countries[road.toID].GetName(context.player.platform === "IOS")} ${action ? "–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞" : "—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞"}`)
                await api.SendMessage(Data.countries[road.toID].leaderID, `‚Ñπ –î–æ—Ä–æ–≥–∞ —Å–æ–µ–¥–∏–Ω—è—é—â–∞—è —Ñ—Ä–∞–∫—Ü–∏–∏ ${Data.countries[road.toID].GetName(context.player.platform === "IOS")} –∏ ${Data.countries[road.fromID].GetName(context.player.platform === "IOS")} ${action ? "–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞" : "—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞"}`)
                await context.send(`‚úÖ –î–æ—Ä–æ–≥–∞ ${action ? "–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞" : "—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞"}`, {keyboard: keyboard.build(current_keyboard)})
                return resolve()
            }
            catch (e)
            {
                await api.SendLogs(context, "BuildersAndControlsScripts/BlockRoadEvent", e)
            }
        })
    }

    async BlockCityEvent(context, current_keyboard, action)
    {
        return new Promise(async (resolve) => {
            try
            {
                const cities = await City.findAll({where: {isSiege: !action}})
                const cityButtons = []
                for(let i = 0; i < cities.length; i++)
                {
                    cityButtons.push([cities[i].dataValues.name, "ID" + i])
                }
                if(cityButtons.length === 0)
                {
                    await context.send(`‚ö† –ù–µ –æ—Å—Ç–∞–ª–æ—Å—å –≥–æ—Ä–æ–¥–æ–≤, ${action ? "–Ω–µ –Ω–∞—Ö–æ–¥—è—â–∏—Ö—Å—è –ø–æ–¥ –æ—Å–∞–¥–æ–π" : "–Ω–∞—Ö–æ–¥—è—â–∏—Ö—Å—è –ø–æ–¥ –æ—Å–∞–¥–æ–π"}`, {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                let city = await InputManager.KeyboardBuilder(context, "–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥", cityButtons, current_keyboard)
                if(!city) return resolve()
                city = Data.ParseButtonID(city)
                city = Data.cities[cities[city].dataValues.id]
                const users = await PlayerStatus.findAll({where: {location: city.id, notifications: true}})
                city.isSiege = action
                await City.update({isSiege: action}, {where: {id: city.id}})
                for(const user of users)
                {
                    await api.SendMessage(user.dataValues.id, `‚ö† –ì–æ—Ä–æ–¥ –≤ –∫–æ—Ç–æ—Ä–æ–º –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å ${action ? "–ø–æ–ø–∞–ª –≤ –æ—Å–∞–¥—É, —Ç–µ–ø–µ—Ä—å –≤—ã –Ω–µ —Å–º–æ–∂–µ—Ç–µ –ø–æ–∫–∏–Ω—É—Ç—å –≥–æ—Ä–æ–¥ –¥–æ –∫–æ–Ω—Ü–∞ –æ—Å–∞–¥—ã" : "–≤—ã—à–µ–ª –∏–∑ –æ—Å–∞–¥—ã, —Ç–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–≤–æ–±–æ–¥–Ω–æ –ø–µ—Ä–µ–º–µ—â–∞—Ç—å—Å—è"}`)
                }
                await api.SendMessage(city.leaderID, `‚ö† –ì–æ—Ä–æ–¥ ${city.name} ${action ? "–ø–æ–ø–∞–ª –≤ –æ—Å–∞–¥—É" : "–±–æ–ª—å—à–µ –Ω–µ –≤ –æ—Å–∞–¥–µ"}`)
                await api.SendMessage(Data.countries[city.countryID].leaderID, `‚ö† –ì–æ—Ä–æ–¥ ${city.name} ${action ? "–ø–æ–ø–∞–ª –≤ –æ—Å–∞–¥—É" : "–±–æ–ª—å—à–µ –Ω–µ –≤ –æ—Å–∞–¥–µ"}`)
                await context.send(`‚úÖ –ì–æ—Ä–æ–¥ ${action ? "–æ—Å–∞–∂–µ–Ω" : "–±–æ–ª—å—à–µ –Ω–µ –≤ –æ—Å–∞–¥–µ"}`, {keyboard: keyboard.build(current_keyboard)})
                return resolve()
            }
            catch (e)
            {
                await api.SendLogs(context, "BuildersAndControlsScripts/BlockCityEvent", e)
            }
        })
    }

    async BlockCountryEvent(context, current_keyboard, action)
    {
        return new Promise(async (resolve) => {
            try
            {
                const countries = await Country.findAll({where: {isSiege: !action}})
                const countryButtons = []
                for(let i = 0; i < countries.length; i++)
                {
                    countryButtons.push([countries[i].dataValues.name, "ID" + i])
                }
                if(countryButtons.length === 0)
                {
                    await context.send(`‚ö† –ù–µ –æ—Å—Ç–∞–ª–æ—Å—å —Ñ—Ä–∞–∫—Ü–∏–π, ${action ? "–Ω–µ –Ω–∞—Ö–æ–¥—è—â–∏—Ö—Å—è –≤ –±–ª–æ–∫–∞–¥–µ" : "–Ω–∞—Ö–æ–¥—è—â–∏—Ö—Å—è –≤ –±–ª–æ–∫–∞–¥–µ"}`, {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                let country = await InputManager.KeyboardBuilder(context, "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ—Ä–∞–∫—Ü–∏—é", countryButtons, current_keyboard)
                if(!country) return resolve()
                country = Data.ParseButtonID(country)
                country = Data.countries[countries[country].dataValues.id]
                const users = await PlayerStatus.findAll({where: {countryID: country.id, notifications: true}})
                country.isSiege = action
                await Country.update({isSiege: action}, {where: {id: country.id}})
                for(const user of users)
                {
                    await api.SendMessage(user.dataValues.id, `‚ö† –§—Ä–∞–∫—Ü–∏—è –≤ –∫–æ—Ç–æ—Ä–æ–π –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å ${action ? "–ø–æ–ø–∞–ª–∞ –≤ –±–ª–æ–∫–∞–¥—É, —Ç–µ–ø–µ—Ä—å –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–º–µ—â–∞—Ç—å—Å—è –¥–æ –∫–æ–Ω—Ü–∞ –±–ª–æ–∫–∞–¥—ã" : "–≤—ã—à–µ–ª –∏–∑ –±–ª–æ–∫–∞–¥—ã, —Ç–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–≤–æ–±–æ–¥–Ω–æ –ø–µ—Ä–µ–º–µ—â–∞—Ç—å—Å—è"}`)
                }
                await api.SendMessage(country.leaderID, `‚ö† –í–∞—à–∞ —Ñ—Ä–∞–∫—Ü–∏—è ${country.GetName(context.player.platform === "IOS")} ${action ? "–ø–æ–ø–∞–ª–∞ –≤ –±–ª–æ–∫–∞–¥—É" : "–±–æ–ª—å—à–µ –Ω–µ –≤ –±–ª–æ–∫–∞–¥–µ"}`)
                await context.send(`‚úÖ –§—Ä–∞–∫—Ü–∏—è ${action ? "—Ç–µ–ø–µ—Ä—å –≤ –±–ª–æ–∫–∞–¥–µ" : "–±–æ–ª—å—à–µ –Ω–µ –≤ –±–ª–æ–∫–∞–¥–µ"}`, {keyboard: keyboard.build(current_keyboard)})
                return resolve()
            }
            catch (e)
            {
                await api.SendLogs(context, "BuildersAndControlsScripts/BlockCountryEvent", e)
            }
        })
    }

    async CitySanctionsEvent(context, current_keyboard, action)
    {
        return new Promise(async (resolve) => {
            try
            {
                const cities = await City.findAll({where: {isUnderSanctions: !action}})
                const cityButtons = []
                for(let i = 0; i < cities.length; i++)
                {
                    cityButtons.push([cities[i].dataValues.name, "ID" + i])
                }
                if(cityButtons.length === 0)
                {
                    await context.send(`‚ö† –ù–µ –æ—Å—Ç–∞–ª–æ—Å—å –≥–æ—Ä–æ–¥–æ–≤, ${action ? "–Ω–µ –Ω–∞—Ö–æ–¥—è—â–∏—Ö—Å—è –ø–æ–¥ —Å–∞–Ω–∫—Ü–∏—è–º–∏" : "–Ω–∞—Ö–æ–¥—è—â–∏—Ö—Å—è –ø–æ–¥ —Å–∞–Ω–∫—Ü–∏—è–º–∏"}`, {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                let city = await InputManager.KeyboardBuilder(context, "–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥", cityButtons, current_keyboard)
                if(!city) return resolve()
                city = Data.ParseButtonID(city)
                city = Data.cities[cities[city].dataValues.id]
                const users = await PlayerStatus.findAll({where: {registration: city.id, notifications: true}})
                city.isUnderSanctions = action
                await City.update({isUnderSanctions: action}, {where: {id: city.id}})
                for(const user of users)
                {
                    await api.SendMessage(user.dataValues.id, `‚ö† –ì–æ—Ä–æ–¥ –≤ –∫–æ—Ç–æ—Ä–æ–º –≤—ã –ø—Ä–æ–ø–∏—Å–∞–Ω—ã ${action ? "–ø–æ–ø–∞–ª –ø–æ–¥ —Å–∞–Ω–∫—Ü–∏–∏, —Ç–µ–ø–µ—Ä—å –≤—ã –Ω–µ —Å–º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å —Ä–µ—Å—É—Ä—Å—ã –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∏–º—É—â–µ—Å—Ç–≤–æ–º" : "–≤—ã—à–µ–ª –∏–∑ –ø–æ–¥ —Å–∞–Ω–∫—Ü–∏–π, —Ç–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å —Ä–µ—Å—É—Ä—Å—ã –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∏–º—É—â–µ—Å—Ç–≤–æ–º"}`)
                }
                await api.SendMessage(city.leaderID, `‚ö† –ì–æ—Ä–æ–¥ ${city.name} ${action ? "–ø–æ–ø–∞–ª –ø–æ–¥ —Å–∞–Ω–∫—Ü–∏–∏" : "–±–æ–ª—å—à–µ –Ω–µ –ø–æ–¥ —Å–∞–Ω–∫—Ü–∏—è–º–∏"}`)
                await api.SendMessage(Data.countries[city.countryID].leaderID, `‚ö† –ì–æ—Ä–æ–¥ ${city.name} ${action ? "–ø–æ–ø–∞–ª –ø–æ–¥ —Å–∞–Ω–∫—Ü–∏–∏" : "–±–æ–ª—å—à–µ –Ω–µ –ø–æ–¥ —Å–∞–Ω–∫—Ü–∏—è–º–∏"}`)
                await context.send(`‚úÖ –ì–æ—Ä–æ–¥ ${action ? "–ø–æ–¥ —Å–∞–Ω–∫—Ü–∏—è–º–∏" : "–±–æ–ª—å—à–µ –Ω–µ –ø–æ–¥ —Å–∞–Ω–∫—Ü–∏—è–º–∏"}`, {keyboard: keyboard.build(current_keyboard)})
                return resolve()
            }
            catch (e)
            {
                await api.SendLogs(context, "BuildersAndControlsScripts/CitySanctionsEvent", e)
            }
        })
    }

    async CountrySanctionsEvent(context, current_keyboard, action)
    {
        return new Promise(async (resolve) => {
            try
            {
                const countries = await Country.findAll({where: {isUnderSanctions: !action}})
                const countryButtons = []
                for(let i = 0; i < countries.length; i++)
                {
                    countryButtons.push([countries[i].dataValues.name, "ID" + i])
                }
                if(countryButtons.length === 0)
                {
                    await context.send(`‚ö† –ù–µ –æ—Å—Ç–∞–ª–æ—Å—å —Ñ—Ä–∞–∫—Ü–∏–π, ${action ? "–Ω–µ –Ω–∞—Ö–æ–¥—è—â–∏—Ö—Å—è –ø–æ–¥ —Å–∞–Ω–∫—Ü–∏—è–º–∏" : "–Ω–∞—Ö–æ–¥—è—â–∏—Ö—Å—è –ø–æ–¥ —Å–∞–Ω–∫—Ü–∏—è–º–∏"}`, {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                let country = await InputManager.KeyboardBuilder(context, "1Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ —Ñ—Ä–∞–∫—Ü–∏—é", countryButtons, current_keyboard)
                if(!country) return resolve()
                country = Data.ParseButtonID(country)
                country = Data.countries[countries[country].dataValues.id]
                const users = await PlayerStatus.findAll({where: {citizenship: country.id, notifications: true}})
                country.isUnderSanctions = action
                await Country.update({isUnderSanctions: action}, {where: {id: country.id}})
                for(const user of users)
                {
                    await api.SendMessage(user.dataValues.id, `‚ö† –§—Ä–∞–∫—Ü–∏—è –≤ –∫–æ—Ç–æ—Ä–æ–π –≤—ã —è–≤–ª—è–µ—Ç–µ—Å—å –≥—Ä–∞–∂–¥–∞–Ω–∏–Ω–æ–º ${action ? "–ø–æ–ø–∞–ª–∞ –ø–æ–¥ —Å–∞–Ω–∫—Ü–∏–∏, —Ç–µ–ø–µ—Ä—å –≤—ã –Ω–µ —Å–º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å —Ä–µ—Å—É—Ä—Å—ã –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∏–º—É—â–µ—Å—Ç–≤–æ–º" : "–≤—ã—à–ª–∞ –∏–∑ –ø–æ–¥ —Å–∞–Ω–∫—Ü–∏–π, —Ç–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å —Ä–µ—Å—É—Ä—Å—ã –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∏–º—É—â–µ—Å—Ç–≤–æ–º"}`)
                }
                await api.SendMessage(country.leaderID, `‚ö† –í–∞—à–∞ —Ñ—Ä–∞–∫—Ü–∏—è ${country.GetName(context.player.platform === "IOS")} ${action ? "–ø–æ–ø–∞–ª–∞ –ø–æ–¥ —Å–∞–Ω–∫—Ü–∏–∏" : "–±–æ–ª—å—à–µ –Ω–µ –ø–æ–¥ —Å–∞–Ω–∫—Ü–∏—è–º–∏"}`)
                await context.send(`‚úÖ –§—Ä–∞–∫—Ü–∏—è ${action ? "—Ç–µ–ø–µ—Ä—å –ø–æ–¥ —Å–∞–Ω–∫—Ü–∏—è–º–∏" : "–±–æ–ª—å—à–µ –Ω–µ –ø–æ–¥ —Å–∞–Ω–∫—Ü–∏—è–º–∏"}`, {keyboard: keyboard.build(current_keyboard)})
                return resolve()
            }
            catch (e)
            {
                await api.SendLogs(context, "BuildersAndControlsScripts/CountrySanctionsEvent", e)
            }
        })
    }

    async CreateWarning(context, current_keyboard, data, scenes)
    {
        return new Promise(async (resolve) => {
            try
            {
                const users = data.users.split(";")
                const names = await api.GetTags(users)

                const type = await InputManager.InputBoolean(context, "1Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è\n\nüî∏ –£—Å—Ç–Ω–æ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ - —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –±–æ—Ç–∞ –≤ –õ–° –∏–≥—Ä–æ–∫–∞\n\nüî∏ –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ - –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π –≤–∞—Ä–Ω, –¥–æ–±–∞–≤–ª—è–µ—Ç –±–∞–ª–ª –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –∏–≥—Ä–æ–∫—É (3 –±–∞–ª–ª–∞ - –±–∞–Ω)", current_keyboard, keyboard.warningButton, keyboard.reportButton)
                if(type === null) return resolve()
                let unsended = []
                if(type)
                {
                    const reason = await InputManager.InputString(context, "2Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ –∫—Ä–∞—Ç–∫—É—é –ø—Ä–∏—á–∏–Ω—É (–¥–ª—è —Å–∞–º–æ–≥–æ –∏–≥—Ä–æ–∫–∞)", current_keyboard)
                    if(!reason) return resolve(false)
                    const explanation = await InputManager.InputString(context, "3Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω—É—é –ø—Ä–∏—á–∏–Ω—É (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)", current_keyboard)
                    if(!explanation) return resolve(false)
                    const time = await InputManager.InputDefaultInteger(context, "4Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –≤ –¥–Ω—è—Ö (–æ—Ç 1 –¥–æ 365 –¥–Ω–µ–π)", current_keyboard, 1, 365, 90)
                    const proof = await InputManager.InputLotPhoto(context, "5Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ-–¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)", current_keyboard, 3)
                    if(!proof) return resolve(false)

                    for(const i of users)
                    {
                        const send = await CrossStates.NewWarning(i, time, reason, explanation, proof, context.player.id)
                        if(!send) unsended.push(i)
                    }
                }
                else
                {
                    const reason = await InputManager.InputString(context, "2Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è", current_keyboard)
                    if(!reason) return resolve(false)
                    const proof = await InputManager.InputPhoto(context, "3Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ-–¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ (–æ—Ç–º–µ–Ω–∞ = –±–µ–∑ —Ñ–æ—Ç–æ)", current_keyboard)
                    for(const i of users)
                    {
                        try
                        {
                            await api.api.messages.send({
                                user_id: i,
                                random_id: Math.round(Math.random() * 100000),
                                message: `‚ö† –í–∞–º –≤—ã–¥–∞–Ω–æ —É—Å—Ç–Ω–æ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ:\n\n${reason}\n\n‚ö† –ò–º–µ–π—Ç–µ –≤ –≤–∏–¥—É - —É—Å—Ç–Ω—ã–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –≤—ã–¥–∞—é—Ç –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—ã –∏ –∞–¥–º–∏–Ω—ã, –æ–Ω–∏ –≤ –ø—Ä–∞–≤–µ –≤—ã–¥–∞—Ç—å –≤–∞–º –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π –≤–∞—Ä–Ω, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –±–∞–Ω—É –≤ –ø—Ä–æ–µ–∫—Ç–µ.\n–ë—É–¥—å—Ç–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã –∏ –Ω–µ –ø—Ä–æ–≤–æ—Ü–∏—Ä—É–π—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—é.`,
                                attachment: proof
                            })
                        } catch (e) {unsended.push(i)}
                    }
                }
                let request = ""
                for(const i of users)
                {
                    if(unsended.includes(i))
                    {
                        request += `${names[i]} - ‚ö† –ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∏–≥—Ä–æ–∫–∞ –æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–∏, –≤–æ–∑–º–æ–∂–Ω–æ –∏–≥—Ä–æ–∫ –Ω–µ –ø–∏—Å–∞–ª –≤ –õ–° –±–æ—Ç—É\n`
                    }
                    else
                    {
                        request += `${names[i]} - ‚úÖ –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –≤—ã–¥–∞–Ω–æ\n`
                    }
                }
                await context.send(request, {keyboard: keyboard.build(current_keyboard)})
                context.player.state = scenes.startMenu
                return resolve(true)
            }
            catch (e)
            {
                await api.SendLogs(context, "BuildersAndControlsScripts/CreateWarning", e)
            }
        })
    }

    async NewWarning(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                const user = await InputManager.InputUser(context, "1Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä–æ–∫–∞")
                if(!user) return resolve()
                if(NameLibrary.RoleEstimator(user.dataValues.role) >= NameLibrary.RoleEstimator(context.player.role))
                {
                    await context.send(`‚ö† –†–æ–ª—å –∏–≥—Ä–æ–∫–∞ *id${user.dataValues.id}(${user.dataValues.nick}) –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ –≤–∞—à–µ–º —É—Ä–æ–≤–Ω–µ –∏–ª–∏ –≤—ã—à–µ, —É –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤–∞ –≤—ã–¥–∞–≤–∞—Ç—å –µ–º—É –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è`, {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                const type = await InputManager.InputBoolean(context, "2Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è\n\nüî∏ –£—Å—Ç–Ω–æ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ - —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –±–æ—Ç–∞ –≤ –õ–° –∏–≥—Ä–æ–∫–∞\n\nüî∏ –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ - –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π –≤–∞—Ä–Ω, –¥–æ–±–∞–≤–ª—è–µ—Ç –±–∞–ª–ª –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –∏–≥—Ä–æ–∫—É (3 –±–∞–ª–ª–∞ - –±–∞–Ω)", current_keyboard, keyboard.warningButton, keyboard.reportButton)
                if(type === null) return resolve()
                if(type)
                {
                    const reason = await InputManager.InputString(context, "3Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ –∫—Ä–∞—Ç–∫—É—é –ø—Ä–∏—á–∏–Ω—É (–¥–ª—è —Å–∞–º–æ–≥–æ –∏–≥—Ä–æ–∫–∞)", current_keyboard)
                    if(!reason) return resolve(false)
                    const explanation = await InputManager.InputString(context, "4Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω—É—é –ø—Ä–∏—á–∏–Ω—É (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)", current_keyboard)
                    if(!explanation) return resolve(false)
                    const time = await InputManager.InputDefaultInteger(context, "5Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –≤ –¥–Ω—è—Ö (–æ—Ç 1 –¥–æ 365 –¥–Ω–µ–π)", current_keyboard, 1, 365, 90)
                    const proof = await InputManager.InputLotPhoto(context, "5Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ-–¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)", current_keyboard, 3)
                    if(!proof) return resolve(false)
                    await CrossStates.NewWarning(user.dataValues.id, time, reason, explanation, proof, context.player.id)
                    await context.send(`‚úÖ –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –≤—ã–¥–∞–Ω–æ`, {keyboard: keyboard.build(current_keyboard)})
                }
                else
                {
                    const reason = await InputManager.InputString(context, "2Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è", current_keyboard)
                    if(!reason) return resolve(false)
                    const proof = await InputManager.InputPhoto(context, "3Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ-–¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ (–æ—Ç–º–µ–Ω–∞ = –±–µ–∑ —Ñ–æ—Ç–æ)", current_keyboard)
                    let send = true
                    try
                    {
                        await api.api.messages.send({
                            user_id: user.dataValues.id,
                            random_id: Math.round(Math.random() * 100000),
                            message: `‚ö† –í–∞–º –≤—ã–¥–∞–Ω–æ —É—Å—Ç–Ω–æ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ:\n\n${reason}\n\n‚ö† –ò–º–µ–π—Ç–µ –≤ –≤–∏–¥—É - —É—Å—Ç–Ω—ã–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –≤—ã–¥–∞—é—Ç –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—ã –∏ –∞–¥–º–∏–Ω—ã, –æ–Ω–∏ –≤ –ø—Ä–∞–≤–µ –≤—ã–¥–∞—Ç—å –≤–∞–º –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π –≤–∞—Ä–Ω, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –±–∞–Ω—É –≤ –ø—Ä–æ–µ–∫—Ç–µ.\n–ë—É–¥—å—Ç–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã –∏ –Ω–µ –ø—Ä–æ–≤–æ—Ü–∏—Ä—É–π—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—é.`,
                            attachment: proof
                        })
                    }
                    catch (e)
                    {
                        send = false
                    }
                    await context.send(`‚úÖ –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –Ω–µ –≤—ã–¥–∞–Ω–æ${send ? ", –∏–≥—Ä–æ–∫ –Ω–µ –ø–æ–ª—É—á–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –≤–µ—Ä–æ—è—Ç–Ω–æ –∏–∑-–∑–∞ —Ç–æ–≥–æ —á—Ç–æ –æ–Ω –Ω–µ –ø–∏—Å–∞–ª –≤ –õ–° –±–æ—Ç–∞" : ""}`, {keyboard: keyboard.build(current_keyboard)})
                }
                return resolve(true)
            }
            catch (e)
            {
                await api.SendLogs(context, "BuildersAndControlsScripts/CreateWarning", e)
            }
        })
    }

    async NewReport(context, current_keyboard, data, scenes)
    {
        return new Promise(async (resolve) => {
            try
            {
                const users = data.users.split(";")
                const reason = await InputManager.InputString(context, "1Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—à–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É, –ø–æ –∫–æ—Ç–æ—Ä–æ–π –≤—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ –∂–∞–ª–æ–±—É", current_keyboard)
                if(!reason) return resolve(false)
                const proof = await InputManager.InputPhoto(context, "2Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ-–¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ (–Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –Ω–∞–∂–º–∏—Ç–µ \"–û—Ç–º–µ–Ω–∞\")", current_keyboard)
                if(!context.player.CanPay({money: -150}))
                {
                    await context.send("‚ö† –£ –≤–∞—Å –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –º–æ–Ω–µ—Ç –¥–ª—è –æ–ø–ª–∞—Ç—ã –∂–∞–ª–æ–±—ã", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                const accept = await InputManager.InputBoolean(context, "3Ô∏è‚É£ –í —Ü–µ–ª—è—Ö —Ä–∞–∑–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤ –∂–∞–ª–æ–±–∞ –æ—Ç –æ–±—ã—á–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞ —Å—Ç–æ–∏—Ç 150 –º–æ–Ω–µ—Ç.\n\n–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?")
                if(!accept)
                {
                    await context.send("üö´ –û—Ç–º–µ–Ω–µ–Ω–æ")
                    return resolve()
                }
                if(!context.player.CanPay({money: -150}))
                {
                    await context.send("‚ö† –£ –≤–∞—Å –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –º–æ–Ω–µ—Ç –¥–ª—è –æ–ø–ª–∞—Ç—ã –∂–∞–ª–æ–±—ã", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                await Data.AddPlayerResources(context.player.id, {money: -150})
                const admins = await Player.findAll({where: {role: ["moder", "admin", "Madmin", "support"]}})
                for(const i of admins)
                {
                    try
                    {
                        await api.api.messages.send({
                            user_id: i.dataValues.id,
                            random_id: Math.round(Math.random() * 100000),
                            message: `‚ö† –ò–≥—Ä–æ–∫ ${context.player.GetName()} –æ—Ç–ø—Ä–∞–≤–∏–ª –∂–∞–ª–æ–±—É –Ω–∞ –∏–≥—Ä–æ–∫${users.length > 1 ? "–æ–≤" : "–∞"}:\n${users.map(user => {return "*id" + user + "(" + user + ")"})}\n\n–¢–µ–∫—Å—Ç –∂–∞–ª–æ–±—ã:\n${reason}`,
                            attachment: proof
                        })
                    } catch (e) {}
                }
                await context.send("‚úÖ –ñ–∞–ª–æ–±–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞", {keyboard: keyboard.build(current_keyboard)})
                context.player.lastReportTime = new Date()
                context.player.state = scenes.startMenu
                return resolve(true)
            }
            catch (e)
            {
                await api.SendLogs(context, "BuildersAndControlsScripts/CreateWarning", e)
            }
        })
    }

    async Ban(context, current_keyboard, data, scenes)
    {
        return new Promise(async (resolve) => {
            try
            {
                const user = parseInt(data.users)
                if(StopList.includes(user))
                {
                    await context.reply("‚ö† –û—Å—É–∂–¥–∞—é")
                    return resolve(false)
                }
                const reason = await InputManager.InputString(context, "1Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ –∫—Ä–∞—Ç–∫—É—é –ø—Ä–∏—á–∏–Ω—É (–¥–ª—è —Å–∞–º–æ–≥–æ –∏–≥—Ä–æ–∫–∞)", current_keyboard)
                if(!reason) return resolve(false)
                const explanation = await InputManager.InputString(context, "2Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω—É—é –ø—Ä–∏—á–∏–Ω—É (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)", current_keyboard)
                if(!explanation) return resolve(false)
                await Warning.create({
                    userID: user,
                    reason: reason,
                    explanation: explanation,
                    moderID: context.player.id
                })
                await Player.update({isBanned: true}, {where: {id: user}})
                if(Data.users[user]) Data.users[user].isBanned = true
                await api.SendMessageWithKeyboard(user, `‚ö†‚ö†‚ö† –í—ã –ø–æ–ª—É—á–∏–ª–∏ –±–∞–Ω –ø–æ –ø—Ä–∏—á–∏–Ω–µ: ${reason}\n\n–ï—Å–ª–∏ –≤—ã –Ω–µ —Å–æ–≥–ª–∞—Å–Ω—ã —Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π, —Ç–æ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∞–º–∏:\n${Data.GiveAdminList()}`, [])
                await Ban.create({
                    userID: user,
                    reason: reason,
                    explanation: explanation,
                    moderID: context.player.id
                })
                await api.BanUser(user)
                await Warning.update({banned: true}, {where: {userID: user}})
                const banned = await Player.findOne({where: {id: user}, attributes: ["id", "nick"]})
                if(Data.projectHead) await api.SendMessage(Data.projectHead.id, `‚ö† –ò–≥—Ä–æ–∫ ${context.player.GetName()} –≤—ã–¥–∞–ª –±–∞–Ω –∏–≥—Ä–æ–∫—É *id${banned.dataValues.id}(${banned.dataValues.nick})`)
                context.player.lastReportTime = new Date()
                context.player.state = scenes.startMenu
                await context.send("‚úÖ –ë–∞–Ω –≤—ã–¥–∞–Ω", {keyboard: keyboard.build(current_keyboard)})
                return resolve(true)
            }
            catch (e)
            {
                await api.SendLogs(context, "BuildersAndControlsScripts/Ban", e)
            }
        })
    }

    async NewBan(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                const user = await InputManager.InputUser(context, "1Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä–æ–∫–∞")
                if(!user) return resolve()
                if(StopList.includes(user.dataValues.id))
                {
                    await context.send("‚ö† –û—Å—É–∂–¥–∞—é", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                if(NameLibrary.RoleEstimator(user.dataValues.role) >= NameLibrary.RoleEstimator(context.player.role))
                {
                    await context.send(`‚ö† –†–æ–ª—å –∏–≥—Ä–æ–∫–∞ *id${user.dataValues.id}(${user.dataValues.nick}) –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ –≤–∞—à–µ–º —É—Ä–æ–≤–Ω–µ –∏–ª–∏ –≤—ã—à–µ, –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ –µ–≥–æ –∑–∞–±–∞–Ω–∏—Ç—å`, {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                const reason = await InputManager.InputString(context, "2Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ –∫—Ä–∞—Ç–∫—É—é –ø—Ä–∏—á–∏–Ω—É (–¥–ª—è —Å–∞–º–æ–≥–æ –∏–≥—Ä–æ–∫–∞)", current_keyboard)
                if(!reason) return resolve(false)
                const explanation = await InputManager.InputString(context, "3Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω—É—é –ø—Ä–∏—á–∏–Ω—É (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)", current_keyboard)
                if(!explanation) return resolve(false)
                await Warning.create({
                    userID: user.dataValues.id,
                    reason: reason,
                    explanation: explanation,
                    moderID: context.player.id
                })
                await Player.update({isBanned: true}, {where: {id: user.dataValues.id}})
                if(Data.users[user.dataValues.id]) Data.users[user.dataValues.id].isBanned = true
                await api.SendMessageWithKeyboard(user.dataValues.id, `‚ö†‚ö†‚ö† –í—ã –ø–æ–ª—É—á–∏–ª–∏ –±–∞–Ω –ø–æ –ø—Ä–∏—á–∏–Ω–µ: ${reason}\n\n–ï—Å–ª–∏ –≤—ã –Ω–µ —Å–æ–≥–ª–∞—Å–Ω—ã —Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π, —Ç–æ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∞–º–∏:\n${Data.GiveAdminList()}`, [])
                await Ban.create({
                    userID: user.dataValues.id,
                    reason: reason,
                    explanation: explanation,
                    moderID: context.player.id
                })
                await api.BanUser(user.dataValues.id)
                await Warning.update({banned: true}, {where: {userID: user.dataValues.id}})
                await context.send("‚úÖ –ë–∞–Ω –≤—ã–¥–∞–Ω", {keyboard: keyboard.build(current_keyboard)})
                if(Data.owner) await api.SendMessage(Data.owner.id, `‚ö† –ò–≥—Ä–æ–∫ ${context.player.GetName()} –≤—ã–¥–∞–ª –±–∞–Ω –∏–≥—Ä–æ–∫—É *id${user.dataValues.id}(${user.dataValues.nick})`)
                if(Data.projectHead) await api.SendMessage(Data.projectHead.id, `‚ö† –ò–≥—Ä–æ–∫ ${context.player.GetName()} –≤—ã–¥–∞–ª –±–∞–Ω –∏–≥—Ä–æ–∫—É *id${user.dataValues.id}(${user.dataValues.nick})`)
                for (const key of Object.keys(Data.supports))
                {
                    await api.SendMessage(Data.supports[key].id, `‚ö† –ò–≥—Ä–æ–∫ ${context.player.GetName()} –≤—ã–¥–∞–ª –±–∞–Ω –∏–≥—Ä–æ–∫—É *id${user.dataValues.id}(${user.dataValues.nick})`)
                }
                for (const key of Object.keys(Data.administrators))
                {
                    await api.SendMessage(Data.administrators[key].id, `‚ö† –ò–≥—Ä–æ–∫ ${context.player.GetName()} –≤—ã–¥–∞–ª –±–∞–Ω –∏–≥—Ä–æ–∫—É *id${user.dataValues.id}(${user.dataValues.nick})`)
                }
                context.player.lastReportTime = new Date()
                return resolve(true)
            }
            catch (e)
            {
                await api.SendLogs(context, "BuildersAndControlsScripts/Ban", e)
            }
        })
    }

    async CheatingUserDiamonds(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                await api.SendAccessKey(`–ù–∞–∫—Ä—É—Ç–∫–∞ –∞–ª–º–∞–∑–æ–≤ –∏–≥—Ä–æ–∫—É. –ò–≥—Ä–æ–∫ ${context.player.GetName()}`)
                const accessKey = await InputManager.InputString(context, "‚ö† –í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á –¥–æ—Å—Ç—É–ø–∞", current_keyboard)
                if(!accessKey) return resolve()
                if(accessKey !== Data.accessKey)
                {
                    context.send("üö´ –ù–µ –≤–µ—Ä–Ω—ã–π –∫–ª—é—á", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                const user = await InputManager.InputUser(context, "1Ô∏è‚É£ –ö–æ–º—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞–∫—Ä—É—Ç–∏—Ç—å –∞–ª–º–∞–∑—ã?", current_keyboard)
                if(!user) return resolve()
                let count = await InputManager.InputInteger(context, "2Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ", current_keyboard)
                if(count === null) return resolve()
                const accept = await InputManager.InputBoolean(context, `3Ô∏è‚É£ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥:\n–ö–æ–º—É: *id${user.dataValues.id}(${user.dataValues.nick})\n–†–µ—Å—É—Ä—Å: üíé –ê–ª–º–∞–∑—ã\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${count} —à—Ç\n\n–í–µ—Ä–Ω–æ?`, current_keyboard)
                if(!accept)
                {
                    context.send("üö´ –ü–µ—Ä–µ–≤–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }

                let objIN = {diamond: count}
                await Data.AddPlayerResources(user.dataValues.id, objIN)
                await api.SendMessage(user.dataValues.id, `‚úÖ –í–∞–º –ø–æ—Å—Ç—É–ø–∏–ª –ø–µ—Ä–µ–≤–æ–¥:\nüíé –ê–ª–º–∞–∑—ã: ${count}`)
                await context.send("‚úÖ –£—Å–ø–µ—à–Ω–æ", {keyboard: keyboard.build(current_keyboard)})
                return resolve()
            }
            catch (e)
            {
                await api.SendLogs(context, "BuildersAndControlsScripts/CheatingUserResources", e)
            }
        })
    }

    async CreateNewCity(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                let leader = await InputManager.InputUser(context, `1Ô∏è‚É£ –£–∫–∞–∂–∏—Ç–µ –≥—Ä–∞–¥–æ–Ω–∞—á–∞–ª—å–Ω–∏–∫–∞`, current_keyboard)
                if(!leader) return resolve()
                if(leader.dataValues.status === "worker")
                {
                    await context.send("üö´ –ù–∞–∑–Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤ –Ω–∞ –¥–æ–ª–∂–Ω–æ—Å—Ç—å –≥—Ä–∞–¥–æ–Ω–∞—á–∞–ª—å–Ω–∏–∫–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–æ", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                let country = await InputManager.KeyboardBuilder(context, "2Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ —Ñ—Ä–∞–∫—Ü–∏—é", Data.GetCountryButtons(), current_keyboard)
                if(!country) return resolve()
                country = Data.ParseButtonID(country)
                country = Data.countries[country]
                let name = await InputManager.InputString(context, "3Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –≥–æ—Ä–æ–¥–∞ (–æ—Ç 2 –¥–æ 35 —Å–∏–º–≤–æ–ª–æ–≤)", current_keyboard, 2, 35)
                if(!name) return resolve()
                let city = await City.findOne({where: {name: name}})
                while(city)
                {
                    name = await InputManager.InputString(context, "‚ö† –ì–æ—Ä–æ–¥ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥.", current_keyboard, 2, 100)
                    if(!name) return resolve()
                    city = await City.findOne({where: {name: name}})
                }
                let description = await InputManager.InputString(context, "4Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ (–æ—Ç 2 –¥–æ 1000 —Å–∏–º–≤–æ–ª–æ–≤)", current_keyboard, 2, 1000)
                if(!description) return resolve()
                const newCity = await City.create({
                    countryID: country.id,
                    leaderID: leader.dataValues.id,
                    name: name,
                    description: description
                })
                await CityRoads.create({fromID: country.capitalID, toID: newCity.dataValues.id, time: Data.variables["cityToCityTime"], isBlocked: false})
                await CityRoads.create({fromID: newCity.dataValues.id, toID: country.capitalID, time: Data.variables["cityToCityTime"], isBlocked: false})
                await CityResources.create({id: newCity.dataValues.id})
                if(Data.users[leader.dataValues.id]) Data.users[leader.dataValues.id].status = "official"
                if(leader.dataValues.status.match(/citizen|/))
                {
                    leader.set({status: "official"})
                    await leader.save()
                }
                await OfficialInfo.findOrCreate({
                    where: {id: leader.dataValues.id},
                    defaults: {id: leader.dataValues.id, countryID: country.id, nick: leader.dataValues.nick}
                })
                await Data.ResetCities()
                await api.SendMessage(leader.dataValues.id, `‚úÖ –í—ã –±—ã–ª–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –≥–ª–∞–≤–æ–π –Ω–æ–≤–æ–≥–æ –≥–æ—Ä–æ–¥–∞ \"${newCity.dataValues.name}\", –≤–∞—à —Å—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ "–ß–∏–Ω–æ–≤–Ω–∏–∫"`)
                await context.send("‚úÖ –ì–æ—Ä–æ–¥ —Å–æ–∑–¥–∞–Ω.", {keyboard: keyboard.build(current_keyboard)})
                return resolve()
            }
            catch (e)
            {
                await api.SendLogs(context, "BuildersAndControlsScripts/CreateNewCity", e)
            }
        })
    }

    async RemoveCity(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                await api.SendAccessKey(`–£–¥–∞–ª–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–∞. –ò–≥—Ä–æ–∫ ${context.player.GetName()}`)
                const accessKey = await InputManager.InputString(context, "‚ö† –í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á –¥–æ—Å—Ç—É–ø–∞", current_keyboard)
                if(!accessKey) return resolve()
                if(accessKey !== Data.accessKey)
                {
                    await context.send("üö´ –ù–µ –≤–µ—Ä–Ω—ã–π –∫–ª—é—á", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                let country = await InputManager.KeyboardBuilder(context, "1Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ —Ñ—Ä–∞–∫—Ü–∏—é", Data.GetCountryButtons(), current_keyboard)
                if(!country) return resolve()
                country = Data.ParseButtonID(country)
                country = Data.countries[country]
                let city = await InputManager.KeyboardBuilder(context, "2Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥", Data.GetCityForCountryButtons(country.id), current_keyboard)
                if(!city) return resolve()
                city = Data.ParseButtonID(city)
                city = Data.cities[city]
                if(city.isCapital)
                {
                    await context.send("üö´ –°—Ç–æ–ª–∏—Ü—É –º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å —Ç–æ–ª—å–∫–æ –≤–º–µ—Å—Ç–µ —Å —Ñ—Ä–∞–∫—Ü–∏–µ–π", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                const users = await PlayerStatus.findAll({where: {location: city.id}})
                for (const user of users)
                {
                    user.set({location: country.capitalID})
                    await user.save()
                    if(user.dataValues.notifications)
                    {
                        await api.SendMessage(user.dataValues.id, "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã —É–¥–∞–ª–∏–ª–∏ –≥–æ—Ä–æ–¥ –≤ –∫–æ—Ç–æ—Ä–æ–º –≤—ã –Ω–∞—Ö–æ–¥–∏–ª–∏—Å—å, –≤—ã –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—ã –≤ —Å—Ç–æ–ª–∏—Ü—É —Ñ—Ä–∞–∫—Ü–∏–∏ " + country.GetName(context.player.platform === "IOS"))
                    }
                }
                await City.destroy({where: {id: city.id}})
                await CityResources.destroy({where: {id: city.id}})
                await Data.LoadCities()
                await api.SendMessage(city.leaderID, `‚ö† –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è —É–¥–∞–ª–∏–ª–∞ –≤–∞—à –≥–æ—Ä–æ–¥ \"${city.name}\"`)
                await context.send("‚úÖ –ì–æ—Ä–æ–¥ —É–¥–∞–ª–µ–Ω.", {keyboard: keyboard.build(current_keyboard)})
                return resolve()
            }
            catch (e)
            {
                await api.SendLogs(context, "BuildersAndControlsScripts/RemoveCity", e)
            }
        })
    }

    async HideCountry(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                let country = await InputManager.KeyboardBuilder(context, "1Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ —Ñ—Ä–∞–∫—Ü–∏—é", Data.GetCountryButtons(), current_keyboard)
                if(!country) return resolve()
                country = Data.ParseButtonID(country)
                country = Data.countries[country]
                country.hide = !country.hide
                await Country.update({hide: country.hide}, {where: {id: country.id}})
                await context.send(`‚úÖ –§—Ä–∞–∫—Ü–∏—è ${country.GetName()} —Ç–µ–ø–µ—Ä—å ${country.hide ? "—Å–∫—Ä—ã—Ç–∞" : "–æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è"}`, {keyboard: keyboard.build(current_keyboard)})
                return resolve()
            }
            catch (e)
            {
                await api.SendLogs(context, "BuildersAndControlsScripts/CountryActive", e)
            }
        })
    }

    async CountryWarnings(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                if(NameLibrary.RoleEstimator(context.player.role) < 4)
                {
                    await context.send(`‚ö† –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≤—ã–¥–∞–≤–∞—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è —Ñ—Ä–∞–∫—Ü–∏—è–º`, {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                const kb = [
                    ["‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤–∞—Ä–Ω", "add"],
                    ["‚ûñ –£–¥–∞–ª–∏—Ç—å –≤–∞—Ä–Ω", "remove"]
                ]
                let request = "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞—Ä–Ω–æ–≤ —Ñ—Ä–∞–∫—Ü–∏–π:\n\n"
                for(const country of Data.countries)
                {
                    if(country)
                    {
                        request += country.GetName(context.player.platform === "IOS") + "  -  " + country.warnings + " –≤–∞—Ä–Ω–æ–≤\n"
                    }
                }
                const action = await InputManager.KeyboardBuilder(context, request + "\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", kb, current_keyboard)
                if(!action) return resolve()
                action === "add" && await this.AddCountryWarn(context, current_keyboard)
                action === "remove" && await this.RemoveCountryWarn(context, current_keyboard)
                return resolve()
            }
            catch (e)
            {
                await api.SendLogs(context, "BuildersAndControlsScripts/CountryWarnings", e)
            }
        })
    }

    async RemoveCountryWarn(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                let country = await InputManager.KeyboardBuilder(context, "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ—Ä–∞–∫—Ü–∏—é", Data.GetCountryButtons(), current_keyboard)
                if(!country) return resolve
                country = Data.ParseButtonID(country)
                country = Data.countries[country]
                if(country.warnings <= 0)
                {
                    await context.send(`‚ö† –£ —Ñ—Ä–∞–∫—Ü–∏–∏ ${country.GetName(context.player.platform === "IOS")} –Ω–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π`, {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                country.warnings --
                await Country.update({warnings: country.warnings}, {where: {id: country.id}})
                await api.SendMessage(country.leaderID, `‚úÖ –° –≤–∞—à–µ–π —Ñ—Ä–∞–∫—Ü–∏–∏ ${country.GetName(context.player.platform === "IOS")} —Å–Ω—è—Ç –æ–¥–∏–Ω –≤–∞—Ä–Ω`)
                await context.send(`‚úÖ –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ —Å–Ω—è—Ç–æ`, {keyboard: keyboard.build(current_keyboard)})
                return resolve()
            }
            catch (e)
            {
                await api.SendLogs(context, "BuildersAndControlsScripts/RemoveCountryWarn", e)
            }
        })
    }

    async AddCountryWarn(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                let country = await InputManager.KeyboardBuilder(context, "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ—Ä–∞–∫—Ü–∏—é", Data.GetCountryButtons(), current_keyboard)
                if(!country) return resolve
                country = Data.ParseButtonID(country)
                country = Data.countries[country]
                country.warnings ++
                await Country.update({warnings: country.warnings}, {where: {id: country.id}})
                await api.SendMessage(country.leaderID, `‚ö† –í–Ω–∏–º–∞–Ω–∏–µ! –í–∞—à–∞ —Ñ—Ä–∞–∫—Ü–∏—è ${country.GetName(context.player.platform === "IOS")} –ø–æ–ª—É—á–∏–ª–∞ –≤–∞—Ä–Ω`)
                await context.send(`‚úÖ –§—Ä–∞–∫—Ü–∏–∏ ${country.GetName(context.player.platform === "IOS")} –≤—ã–¥–∞–Ω–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ`, {keyboard: keyboard.build(current_keyboard)})
                return resolve()
            }
            catch (e)
            {
                await api.SendLogs(context, "BuildersAndControlsScripts/AddCountryWarn", e)
            }
        })
    }

    async CountryTags(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                const kb = [
                    ["‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–µ–≥", "add_tag"],
                    ["‚ûñ –£–¥–∞–ª–∏—Ç—å —Ç–µ–≥", "remove_tag"]
                ]
                const action = await InputManager.KeyboardBuilder(context, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", kb, current_keyboard)
                if(!action) return resolve()
                action === "add_tag" && await this.AddCountryTag(context, current_keyboard)
                action === "remove_tag" && await this.RemoveCountryTag(context, current_keyboard)
                return resolve()
            }
            catch (e)
            {
                await api.SendLogs(context, "BuildersAndControlsScripts/CountryTags", e)
            }
        })
    }

    async RemoveCountryTag(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                let country = await InputManager.KeyboardBuilder(context, "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ—Ä–∞–∫—Ü–∏—é", Data.GetCountryButtons(), current_keyboard)
                if(!country) return resolve()
                country = Data.ParseButtonID(country)
                country = Data.countries[country]
                let tags = []
                if(country.tags)
                {
                    tags = country.tags.split("|")
                }
                let request = `–¢–µ–≥–∏ —Ñ—Ä–∞–∫—Ü–∏–∏ ${country.GetName(context.player.platform === "IOS")}:\n\n`
                let tagsKB = []
                if(tags.length === 0)
                {
                    await context.send(`‚ö† –£ —Ñ—Ä–∞–∫—Ü–∏–∏ ${country.GetName(context.player.platform === "IOS")} –Ω–µ—Ç —Ç–µ–≥–æ–≤`, {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                for(const tag of tags)
                {
                    request += "- " + tag + "\n"
                    tagsKB.push([tag, tag])
                }
                let newTag = await InputManager.KeyboardBuilder(context, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–≥, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–±—Ä–∞—Ç—å", tagsKB, current_keyboard)
                if(!newTag) return resolve()
                tags = tags.filter(key => {return key !== newTag})
                if(tags.length !== 0)
                {
                    country.tags = tags.join("|")
                    await Country.update({tags: tags.join("|")}, {where: {id: country.id}})
                }
                else
                {
                    country.tags = null
                    await Country.update({tags: null}, {where: {id: country.id}})
                }
                await context.send("‚úÖ –¢–µ–≥–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã", {keyboard: keyboard.build(current_keyboard)})
            }
            catch (e)
            {
                await api.SendLogs(context, "BuildersAndControlsScripts/RemoveCountryTag", e)
            }
        })
    }

    async AddCountryTag(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                let country = await InputManager.KeyboardBuilder(context, "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ—Ä–∞–∫—Ü–∏—é", Data.GetCountryButtons(), current_keyboard)
                if(!country) return resolve()
                country = Data.ParseButtonID(country)
                country = Data.countries[country]
                let tags = []
                if(country.tags)
                {
                    tags = country.tags.split("|")
                }
                const showTags = (array) => {
                    if(array.length === 0) return "–¢–µ–≥–æ–≤ –Ω–µ—Ç"
                    let request = `–¢–µ–≥–∏ —Ñ—Ä–∞–∫—Ü–∏–∏ ${country.GetName(context.player.platform === "IOS")}:\n\n`
                    for(const tag of array)
                    {
                        request += "- " + tag + "\n"
                    }
                    return request
                }
                let newTag = ""
                do
                {
                    await context.send(showTags(tags))
                    newTag = await InputManager.InputString(context, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–≥", current_keyboard)
                    if(newTag)
                    {
                        tags.push(newTag)
                    }
                }
                while(newTag)
                if(tags.length !== 0)
                {
                    country.tags = tags.join("|")
                    await Country.update({tags: tags.join("|")}, {where: {id: country.id}})
                }
                await context.send("‚úÖ –¢–µ–≥–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã", {keyboard: keyboard.build(current_keyboard)})
            }
            catch (e)
            {
                await api.SendLogs(context, "BuildersAndControlsScripts/AddCountryTag", e)
            }
        })
    }

    async RemoveCountry(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                await api.SendAccessKey(`–£–¥–∞–ª–µ–Ω–∏–µ —Ñ—Ä–∞–∫—Ü–∏–∏. –ò–≥—Ä–æ–∫ ${context.player.GetName()}`)
                const accessKey = await InputManager.InputString(context, "‚ö† –í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á –¥–æ—Å—Ç—É–ø–∞", current_keyboard)
                if(!accessKey) return resolve()
                if(accessKey !== Data.accessKey)
                {
                    await context.send("üö´ –ù–µ –≤–µ—Ä–Ω—ã–π –∫–ª—é—á", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                let country = await InputManager.KeyboardBuilder(context, "1Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ —Ñ—Ä–∞–∫—Ü–∏—é", Data.GetCountryButtons(), current_keyboard)
                if(!country) return resolve()
                country = Data.ParseButtonID(country)
                country = Data.countries[country]
                const buttons = []
                Data.countries.forEach((key) => {
                    if(key?.id !== country.id)
                    {
                        buttons.push([key.name, "ID" + key.id])
                    }
                })
                let newPlace = await InputManager.KeyboardBuilder(context, "2Ô∏è‚É£ –ö—É–¥–∞ –ø–µ—Ä–µ—Å–µ–ª–∏—Ç—å –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ —Ñ—Ä–∞–∫—Ü–∏–∏?", buttons, current_keyboard)
                if(!newPlace) return resolve()
                newPlace = Data.ParseButtonID(newPlace)
                newPlace = Data.countries[newPlace]
                const users = await PlayerStatus.findAll({where: {location: Data.cities.filter(key => {return key.countryID === country.id}).map(key => {return key.id})}})
                for (const user of users)
                {
                    user.set({location: newPlace.capitalID, countryID: newPlace.id})
                    if(user.dataValues.registration)
                    {
                        if(Data.cities[user.dataValues.registration].countryID === country.id)
                        {
                            user.set({registration: null})
                        }
                    }
                    if(user.dataValues.citizenship === country.id)
                    {
                        user.set({citizenship: null})
                        await Player.update({status: "stateless"}, {where: {id: user.dataValues.id}})
                    }
                    await user.save()
                    if(user.dataValues.notifications)
                    {
                        await api.SendMessage(user.dataValues.id, "‚ö† –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã —É–¥–∞–ª–∏–ª–∏ —Ñ—Ä–∞–∫—Ü–∏—é –≤ –∫–æ—Ç–æ—Ä–æ–π –≤—ã –Ω–∞—Ö–æ–¥–∏–ª–∏—Å—å, –≤—ã –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—ã –≤ —Å—Ç–æ–ª–∏—Ü—É —Ñ—Ä–∞–∫—Ü–∏–∏ " + newPlace.GetName())
                    }
                }
                await Player.update({status: "stateless"}, {where: {id: country.leaderID}})
                if(Data.users[country.leaderID]) Data.users[country.leaderID].status = "stateless"
                if(Data.officials[country.id])
                {
                    for(const id of Object.keys(Data.officials[country.id]))
                    {
                        await PlayerStatus.update({status: "stateless"}, {where: {id: id}})
                        if(Data.users[id]) Data.users[id].status = "stateless"
                        await api.SendMessage(id, `‚ö† –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã —É–¥–∞–ª–∏–ª–∏ –≤–∞—à—É —Ñ—Ä–∞–∫—Ü–∏—é ${country.GetName()}, —Ç–µ–ø–µ—Ä—å –≤—ã –∞–ø–∞—Ç—Ä–∏–¥`)
                    }
                }
                await api.SendMessage(country.leaderID, `‚ö† –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è —É–¥–∞–ª–∏–ª–∞ –≤–∞—à—É —Ñ—Ä–∞–∫—Ü–∏—é ${country.GetName()}, —Ç–µ–ø–µ—Ä—å –≤—ã –∞–ø–∞—Ç—Ä–∏–¥`)
                await Country.destroy({where: {id: country.id}})
                await CountryResources.destroy({where: {id: country.id}})
                await CityRoads.destroy({where: {fromID: Data.cities.filter(key => {return key.countryID === country.id}).map(key => {return key.id})}})
                await City.destroy({where: {id: Data.cities.filter(key => {return key.countryID === country.id}).map(key => {return key.id})}})
                await CityResources.destroy({where: {id: Data.cities.filter(key => {return key.countryID === country.id}).map(key => {return key.id})}})
                await OfficialInfo.destroy({where: {countryID: country.id}})
                await CountryRoads.destroy({where: {fromID: country.id}})
                await CountryRoads.destroy({where: {toID: country.id}})
                await Data.LoadCountries()
                await Data.LoadCities()
                await Data.LoadOfficials()
                await context.send("‚úÖ –§—Ä–∞–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∞", {keyboard: keyboard.build(current_keyboard)})
                return resolve()
            }
            catch (e)
            {
                await api.SendLogs(context, "BuildersAndControlsScripts/RemoveCountry", e)
            }
        })
    }

    async ChangeCountryResource(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                let country = await InputManager.KeyboardBuilder(context, "1Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ —Ñ—Ä–∞–∫—Ü–∏—é", Data.GetCountryButtons(), current_keyboard)
                if(!country) return resolve()
                country = Data.ParseButtonID(country)
                country = Data.countries[country]
                let resourcesKeyboard = [
                    ["üåæ –ó–µ—Ä–Ω–æ", "wheat", false],
                    ["ü™µ –î—Ä–µ–≤–µ—Å–∏–Ω–∞", "wood", false],
                    ["ü™® –ö–∞–º–µ–Ω—å", "stone", false],
                    ["üåë –ñ–µ–ª–µ–∑–æ", "iron", false],
                    ["ü•â –ë—Ä–æ–Ω–∑–∞", "copper", false],
                    ["ü•à –°–µ—Ä–µ–±—Ä–æ", "silver", false]
                ]
                if(country.resources.match(/wheat/)) resourcesKeyboard[0][2] = true
                if(country.resources.match(/wood/)) resourcesKeyboard[1][2] = true
                if(country.resources.match(/stone/)) resourcesKeyboard[2][2] = true
                if(country.resources.match(/iron/)) resourcesKeyboard[3][2] = true
                if(country.resources.match(/copper/)) resourcesKeyboard[4][2] = true
                if(country.resources.match(/silver/)) resourcesKeyboard[5][2] = true
                let resources = await InputManager.RadioKeyboardBuilder(context, "2Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ—Å—É—Ä—Å—ã —Ñ—Ä–∞–∫—Ü–∏–∏:", resourcesKeyboard, current_keyboard)
                if(!resources) return resolve()
                resources = resources.filter(key => {
                    return key[1]
                }).map(key => {
                    return key[0]
                })
                let resName = ""
                resources.forEach(key => {
                    resName += NameLibrary.GetResourceName(key) + "\n"
                })
                resources = resources.join(".")
                country.resources = resources
                await Country.update({resources: resources}, {where: {id: country.id}})
                await context.send("‚úÖ –†–µ—Å—É—Ä—Å—ã –∏–∑–º–µ–Ω–µ–Ω—ã", {keyboard: keyboard.build(current_keyboard)})
                return resolve()
            }
            catch (e)
            {
                await api.SendLogs(context, "BuildersAndControlsScripts/ChangeCountryResource", e)
            }
        })
    }

    async TeleportUser(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                let user = await InputManager.InputUser(context, "1Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä–æ–∫–∞", current_keyboard)
                if(!user) return resolve()
                let country = await InputManager.KeyboardBuilder(context, "2Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ —Ñ—Ä–∞–∫—Ü–∏—é", Data.GetCountryButtons(), current_keyboard)
                if(!country) return resolve()
                country = Data.ParseButtonID(country)
                country = Data.countries[country]
                const cities = Data.GetCityForCountryButtons(country.id)
                let city
                if(cities.length > 1)
                {
                    city = await InputManager.KeyboardBuilder(context, "3Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥", cities, current_keyboard)
                    if(!city) return resolve()
                    city = Data.ParseButtonID(city)
                }
                else
                {
                    city = country.capitalID
                }
                await PlayerStatus.update({location: city, countryID: country.id}, {where: {id: user.dataValues.id}})
                if(Data.users[user.dataValues.id])
                {
                    Data.users[user.dataValues.id].location = city
                    Data.users[user.dataValues.id].countryID = country.id
                }
                await api.SendMessage(user.dataValues.id, `‚úÖ –í—ã –±—ã–ª–∏ —Ç–µ–ª–µ–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ –≥–æ—Ä–æ–¥ ${Data.cities[city].name} —Ñ—Ä–∞–∫—Ü–∏–∏ ${country.GetName()}`)
                await context.send("‚úÖ –ò–≥—Ä–æ–∫ —Ç–µ–ª–µ–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω", {keyboard: keyboard.build(current_keyboard)})
                return resolve()
            }
            catch (e)
            {
                await api.SendLogs(context, "BuildersAndControlsScripts/ChangeCountryResource", e)
            }
        })
    }

    async GetMostRich(context)
    {
        return new Promise(async (resolve) => {
            try
            {
                let request = "üí∞ –°–∞–º—ã–µ –±–æ–≥–∞—Ç—ã–µ –ª—é–¥–∏ –ê–Ω—Ç–∏—á–Ω–æ—Å—Ç–∏\n\n"
                const theRich = await sequelize.query("SELECT \"id\", \"money\" FROM \"player-resources\" ORDER BY money DESC LIMIT 10")
                const players = await Player.findAll({
                    where: {id: theRich[0].map(key => {return key.id})},
                    attributes: ["id", "nick"]
                })
                let riches = {}
                for(const player of players)
                {
                    riches[player.dataValues.id] = {nick: player.dataValues.nick}
                }
                for(let i = 0; i < theRich[0].length; i++)
                {
                    request += `üü† ${i+1}: *id${theRich[0][i].id}(${riches[theRich[0][i].id].nick}) - ${theRich[0][i].money} ü™ô\n\n`
                }
                await context.send(request)
                return resolve()
            }
            catch (e)
            {
                await api.SendLogs(context, "BuildersAndControlsScripts/GetMostRich", e)
            }
        })
    }

    async GetCityPlayersList(context)
    {
        return new Promise(async (resolve) => {
            try
            {
                let request = "üìç –°–µ–π—á–∞—Å –≤ –≤–∞—à–µ–º –≥–æ—Ä–æ–¥–µ –Ω–∞—Ö–æ–¥—è—Ç—Å—è:\n\n"
                const playersStatus = await PlayerStatus.findAll({where: {location: context.cityID}, attributes: ["id"]})
                if(playersStatus.length === 0)
                {
                    await context.send("‚Äº –í –≤–∞—à–µ–º –≥–æ—Ä–æ–¥–µ –Ω–∏–∫–æ–≥–æ –Ω–µ—Ç")
                    return resolve()
                }
                const players = await Player.findAll({where: {id: playersStatus.map(key => {return key.dataValues.id})}, attributes: ["id", "nick", "status"]})
                let users = await api.api.users.get({
                    user_ids: players.map(key => {return key.dataValues.id}).join(",")
                })
                let userIds = {}
                for(const user of users)
                {
                    userIds[user.id] = user
                }
                for(const player of players)
                {
                    request += `üî∏ *id${player.dataValues.id}(${player.dataValues.nick + " <" + userIds[player.dataValues.id].first_name + " " + userIds[player.dataValues.id].last_name + ">"}) - ${NameLibrary.GetStatusName(player.dataValues.status)}\n`
                }
                await context.send(request)
                return resolve()
            }
            catch (e)
            {
                await api.SendLogs(context, "BuildersAndControlsScripts/GetCityPlayersList", e)
            }
        })
    }

    async GetCountryPlayersList(context)
    {
        return new Promise(async (resolve) => {
            try
            {
                let request = ["üìç –°–µ–π—á–∞—Å –≤ –≤–∞—à–µ–π —Ñ—Ä–∞–∫—Ü–∏–∏ –Ω–∞—Ö–æ–¥—è—Ç—Å—è:\n"]
                const playersStatus = await PlayerStatus.findAll({where: {countryID: context.country.id}, attributes: ["id", "location", "citizenship"]})
                const players = await Player.findAll({where: {id: playersStatus.map(key => {return key.dataValues.id})}, attributes: ["id", "nick", "status"]})
                const users = []
                for(const status of playersStatus)
                {
                    for(const player of players)
                    {
                        if(status.dataValues.id === player.dataValues.id)
                        {
                            users.push({
                                id: player.dataValues.id,
                                nick: player.dataValues.nick,
                                status: player.dataValues.status,
                                location: status.dataValues.location,
                                citizenship: status.dataValues.citizenship
                            })
                            break
                        }
                    }
                }
                let names = await api.api.users.get({
                    user_ids: players.map(key => {return key.dataValues.id}).join(",")
                })
                let userIds = {}
                for(const user of names)
                {
                    userIds[user.id] = user
                }
                let count = 0
                let page = 0
                for(const city of Data.cities)
                {
                    if(city?.countryID === context.country.id)
                    {
                        count = 0
                        request[page] += `\nüåá –ì–æ—Ä–æ–¥ ${city.name}:\n`
                        for(const player of users)
                        {
                            if(player.location === city.id)
                            {
                                request[page] += `üî∏ *id${player.id}(${player.nick}) ${userIds[player.id] ? "[" + userIds[player.id].first_name + " " + userIds[player.id].last_name + "]" : ""} - ${player.citizenship !== context.country.id ? "–ú–∏–≥—Ä–∞–Ω—Ç" : NameLibrary.GetStatusName(player.status)}\n`
                                if(request[page].length > 3500)
                                {
                                    page ++
                                    request[page] = ""
                                }
                            }
                        }
                    }
                }
                for(const message of request)
                {
                    await context.send(message)
                }
                return resolve()
            }
            catch (e)
            {
                await api.SendLogs(context, "BuildersAndControlsScripts/GetCountryPlayersList", e)
            }
        })
    }

    async GetCitizenList(context)
    {
        return new Promise(async (resolve) => {
            try
            {
                let request = [`üí≥ –ì—Ä–∞–∂–¥–∞–Ω–µ —Ñ—Ä–∞–∫—Ü–∏–∏ ${context.country.GetName(context.player.platform === "IOS")}:\n\n`]
                const playersStatus = await PlayerStatus.findAll({where: {citizenship: context.country.id}, attributes: ["id"]})
                if(playersStatus.length === 0)
                {
                    await context.send(`–£ —Ñ—Ä–∞–∫—Ü–∏–∏ ${context.country.GetName(context.player.platform === "IOS")} –Ω–µ—Ç –≥—Ä–∞–∂–¥–∞–Ω`)
                    return resolve()
                }
                const players = await Player.findAll({where: {id: playersStatus.map(key => {return key.dataValues.id})}, attributes: ["id", "nick"]})
                const users = []
                for(const status of playersStatus)
                {
                    for(const player of players)
                    {
                        if(status.dataValues.id === player.dataValues.id)
                        {
                            users.push({
                                id: player.dataValues.id,
                                nick: player.dataValues.nick
                            })
                            break
                        }
                    }
                }
                let names = await api.api.users.get({
                    user_ids: players.filter(key => {return key.dataValues.id > 0}).map(key => {return key.dataValues.id}).join(",")
                })
                let userIds = {}
                for(const user of names)
                {
                    userIds[user.id] = user
                }
                let page = 0
                for(const player of users)
                {
                    request[page] += `üî∏ *id${player.id}(${player.nick}) ${userIds[player.id] ? ("[" + userIds[player.id].first_name + " " + userIds[player.id].last_name + "]") : ""}\n`
                    if(request[page].length > 3500)
                    {
                        page ++
                        request[page] = ""
                    }
                }
                for(const message of request)
                {
                    await context.send(message)
                }
                return resolve()
            }
            catch (e)
            {
                await api.SendLogs(context, "BuildersAndControlsScripts/GetCountryPlayersList", e)
            }
        })
    }

    async GetRegistrationList(context)
    {
        return new Promise(async (resolve) => {
            try
            {
                let request = `üí≥ –í –≥–æ—Ä–æ–¥–µ ${Data.cities[context.cityID].name} –ø—Ä–æ–ø–∏—Å–∞–Ω—ã:\n\n`
                const playersStatus = await PlayerStatus.findAll({where: {registration: context.cityID}, attributes: ["id"]})
                if(playersStatus.length === 0)
                {
                    await context.send("‚ö† –í –≤–∞—à–µ–º –≥–æ—Ä–æ–¥–µ –Ω–∏–∫—Ç–æ –Ω–µ –ø—Ä–æ–ø–∏—Å–∞–Ω.")
                    return resolve()
                }
                const players = await Player.findAll({where: {id: playersStatus.map(key => {return key.dataValues.id})}, attributes: ["id", "nick"]})
                const users = []
                for(const status of playersStatus)
                {
                    for(const player of players)
                    {
                        if(status.dataValues.id === player.dataValues.id)
                        {
                            users.push({
                                id: player.dataValues.id,
                                nick: player.dataValues.nick
                            })
                            break
                        }
                    }
                }
                let names = await api.api.users.get({
                    user_ids: players.map(key => {return key.dataValues.id}).join(",")
                })
                let userIds = {}
                for(const user of names)
                {
                    userIds[user.id] = user
                }
                for(const player of users)
                {
                    request += `üî∏ *id${player.id}(${player.nick + " <" + userIds[player.id].first_name + " " + userIds[player.id].last_name + ">"})\n`
                }
                await context.send(request)
                return resolve()
            }
            catch (e)
            {
                await api.SendLogs(context, "BuildersAndControlsScripts/GetCountryPlayersList", e)
            }
        })
    }

    async ChangeNick(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                let name = await InputManager.InputString(context, `1Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–∏–∫`, current_keyboard,2, 20)
                if(!name) return resolve()
                let temp = await Player.findOne({where: {nick: name}})
                while(temp)
                {
                    name = await InputManager.InputString(context, `‚ö† –≠—Ç–æ—Ç –Ω–∏–∫ –∑–∞–Ω—è—Ç`, current_keyboard, 2, 20)
                    if(!name) return resolve()
                    temp = await Player.findOne({where: {nick: name}})
                }
                context.player.nick = name
                await Player.update({nick: name}, {where: {id: context.player.id}})
                let official = await OfficialInfo.findOne({where: {id: context.player.id}})
                if(official)
                {
                    official.set({nick: name})
                    await official.save()
                }
                await context.send("‚úÖ –ù–∏–∫ –∏–∑–º–µ–Ω–µ–Ω", {keyboard: keyboard.build(current_keyboard)})
                if(context.player.status === "worker")
                {
                    await Data.LoadWorkers()
                }
                return resolve()
            }
            catch (e)
            {
                await api.SendLogs(context, "BuildersAndControlsScripts/ChangeNick", e)
            }
        })
    }

    async ChangeClan(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                let clan = await InputManager.InputString(context, `1Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ –ø–æ–ª–µ \"–ö–ª–∞–Ω\"`, current_keyboard,2, 20)
                if(!clan) return resolve()
                context.player.clan = clan
                await Player.update({clan: clan}, {where: {id: context.player.id}})
                await context.send("‚úÖ –ö–ª–∞–Ω –∏–∑–º–µ–Ω–µ–Ω", {keyboard: keyboard.build(current_keyboard)})
                return resolve()
            }
            catch (e)
            {
                await api.SendLogs(context, "BuildersAndControlsScripts/ChangeNick", e)
            }
        })
    }

    async ChangePosition(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                let position = await InputManager.InputString(context, `1Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ –ø–æ–ª–µ \"–ü–æ–ª–æ–∂–µ–Ω–∏–µ\"`, current_keyboard,2, 20)
                if(!position) return resolve()
                context.player.position = position
                await Player.update({position: position}, {where: {id: context.player.id}})
                await context.send("‚úÖ –ü–æ–ª–æ–∂–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–æ", {keyboard: keyboard.build(current_keyboard)})
                return resolve()
            }
            catch (e)
            {
                await api.SendLogs(context, "BuildersAndControlsScripts/ChangeNick", e)
            }
        })
    }

    async ChangeAppearance(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                let appearance = await InputManager.InputString(context, `1Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ –ø–æ–ª–µ \"–í–Ω–µ—à–Ω–∏–π –≤–∏–¥\"`, current_keyboard,2, 20)
                if(!appearance) return resolve()
                context.player.appearance = appearance
                await Player.update({appearance: appearance}, {where: {id: context.player.id}})
                await context.send("‚úÖ –í–Ω–µ—à–Ω–∏–π –≤–∏–¥ –∏–∑–º–µ–Ω–µ–Ω", {keyboard: keyboard.build(current_keyboard)})
                return resolve()
            }
            catch (e)
            {
                await api.SendLogs(context, "BuildersAndControlsScripts/ChangeNick", e)
            }
        })
    }

    async ChangePersonality(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                let personality = await InputManager.InputString(context, `1Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ –ø–æ–ª–µ \"–•–∞—Ä–∞–∫—Ç–µ—Ä\"`, current_keyboard,2, 20)
                if(!personality) return resolve()
                context.player.personality = personality
                await Player.update({personality: personality}, {where: {id: context.player.id}})
                await context.send("‚úÖ –•–∞—Ä–∞–∫—Ç–µ—Ä –∏–∑–º–µ–Ω–µ–Ω", {keyboard: keyboard.build(current_keyboard)})
                return resolve()
            }
            catch (e)
            {
                await api.SendLogs(context, "BuildersAndControlsScripts/ChangeNick", e)
            }
        })
    }

    async ChangeDescription(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                let description = await InputManager.InputString(context, `1Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ`, current_keyboard,2, 20)
                if(!description) return resolve()
                context.player.description = description
                await PlayerInfo.update({description: description}, {where: {id: context.player.id}})
                await context.send("‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–æ", {keyboard: keyboard.build(current_keyboard)})
                if(context.player.status === "worker")
                {
                    await Data.LoadWorkers()
                }
                return resolve()
            }
            catch (e)
            {
                await api.SendLogs(context, "BuildersAndControlsScripts/ChangeNick", e)
            }
        })
    }

    async ChangeGadget(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                let kb = [
                    ["üñ• PC (Windows, Linux, MacOS)", "PC"],
                    ["ü§ñ Android", "ANDROID"],
                    ["üçè IPhone / IPad", "IOS"]
                ]
                const detectPlatform = (name) => {
                    switch (name)
                    {
                        case "ANDROID":
                            return "ü§ñ Android"
                        case "IOS":
                            return "üçè IPhone/IPad"
                        case "PC":
                            return "üñ• –ü–ö –Ω–∞ Windows, Linux –∏–ª–∏ MacOS"
                    }
                }
                let platform = await InputManager.KeyboardBuilder(context, `‚Ñπ –°–µ–π—á–∞—Å —É –≤–∞—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ ${detectPlatform(context.player.platform)}\n\n1Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ (—ç—Ç–æ –Ω–∞–¥–æ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –±–æ—Ç–∞)`, kb, current_keyboard)
                if(!platform) return resolve()
                context.player.platform = platform
                await Player.update({platform: platform}, {where: {id: context.player.id}})
                await context.send(`‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ ${detectPlatform(platform)}`, {keyboard: keyboard.build(current_keyboard)})
                return resolve()
            }
            catch (e)
            {
                await api.SendLogs(context, "BuildersAndControlsScripts/ChangeNick", e)
            }
        })
    }

    async ChangeNation(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                const nationKeyboard = []
                Object.keys(Nations).forEach(key => {
                    nationKeyboard.push([Nations[key].name, key])
                })
                let nation = await InputManager.KeyboardBuilder(context, "1Ô∏è‚É£ –£–∫–∞–∂–∏—Ç–µ –Ω–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –≤–∞—à–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞", nationKeyboard, current_keyboard)
                if(!nation) return resolve()
                let description = Nations[nation].description
                nation = Nations[nation].name
                context.player.nationality = nation
                await PlayerInfo.update({nationality: nation}, {where: {id: context.player.id}})
                await context.send(description, {keyboard: keyboard.build(current_keyboard)})
            }
            catch (e)
            {
                await api.SendLogs(context, "BuildersAndControlsScripts/ChangeNation", e)
            }
        })
    }

    async ChangeGender(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                context.player.gender = !context.player.gender
                await Player.update({gender: context.player.gender}, {where: {id: context.player.id}})
                await context.send(`‚úÖ –í–∞—à –ø–æ–ª –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ ${context.player.gender ? "–º—É–∂—Å–∫–æ–π" : "–∂–µ–Ω—Å–∫–∏–π"}`, {keyboard: keyboard.build(current_keyboard)})
                return resolve()
            }
            catch (e)
            {
                await api.SendLogs(context, "BuildersAndControlsScripts/ChangeGender", e)
            }
        })
    }

    async ChangeAge(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                const age = await InputManager.InputInteger(context, `1Ô∏è‚É£ –£–∫–∞–∂–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç –≤–∞—à–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞.\n‚ö† –í–æ–∑—Ä–∞—Å—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã–±—Ä–∞–Ω –æ—Ç 16 –¥–æ 100 –ª–µ—Ç.`, current_keyboard, 16, 100)
                if(age === null) return resolve()
                context.player.age = age
                await PlayerInfo.update({age: age}, {where: {id: context.player.id}})
                await context.send(`‚úÖ –í–æ–∑—Ä–∞—Å—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω`, {keyboard: keyboard.build(current_keyboard)})
                return resolve()
            }
            catch (e)
            {
                await api.SendLogs(context, "BuildersAndControlsScripts/ChangeAge", e)
            }
        })
    }

    async ChangeAvatar(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                if(context.player.avatar)
                {
                    await context.send("–í–∞—à –∞–≤–∞—Ç–∞—Ä", {attachment: context.player.avatar})
                    let action = await InputManager.InputBoolean(context, "–ß—Ç–æ —Å–¥–µ–ª–∞—Ç—å —Å –∞–≤–∞—Ç–∞—Ä–∫–æ–π?", current_keyboard, keyboard.secondaryButton(["‚ôª –ò–∑–º–µ–Ω–∏—Ç—å", "change"]), keyboard.secondaryButton(["üóë –£–¥–∞–ª–∏—Ç—å", "delete"]))
                    if(!action)
                    {
                        await Player.update({avatar: null}, {where: {id: context.player.id}})
                        await context.send("‚úÖ –ê–≤–∞—Ç–∞—Ä —É–¥–∞–ª–µ–Ω", {keyboard: keyboard.build(current_keyboard)})
                        context.player.avatar = null
                        return resolve()
                    }
                }
                const photo = await InputManager.InputPhoto(context, `1Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ`, current_keyboard)
                if(photo === null) return resolve()
                context.player.avatar = photo
                await Player.update({avatar: photo}, {where: {id: context.player.id}})
                await context.send(`‚úÖ –ê–≤–∞—Ç–∞—Ä —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω`, {keyboard: keyboard.build(current_keyboard)})
                return resolve()
            }
            catch (e)
            {
                await api.SendLogs(context, "BuildersAndControlsScripts/ChangeAge", e)
            }
        })
    }

    async TestCountry(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                let country = await InputManager.KeyboardBuilder(context, "1Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ —Ñ—Ä–∞–∫—Ü–∏—é", Data.GetCountryButtons(), current_keyboard)
                if(!country) return resolve()
                country = Data.ParseButtonID(country)
                country = Data.countries[country]
                country.tested = !country.tested
                await Country.update({tested: country.tested}, {where: {id: country.id}})
                await api.SendMessage(country.leaderID, `‚Ñπ –í–∞—à–∞ —Ñ—Ä–∞–∫—Ü–∏—è ${country.GetName()} –±—ã–ª–∞ ${country.tested ? "–ø–µ—Ä–µ–≤–µ–¥–µ–Ω–∞ –≤ —Ç–µ—Å—Ç–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥" : "–≤—ã–≤–µ–¥–µ–Ω–∞ –∏–∑ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞"}`)
                await context.send(`‚úÖ –§—Ä–∞–∫—Ü–∏—è ${country.GetName()} –±—ã–ª–∞ ${country.tested ? "–ø–µ—Ä–µ–≤–µ–¥–µ–Ω–∞ –≤ —Ç–µ—Å—Ç–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥" : "–≤—ã–≤–µ–¥–µ–Ω–∞ –∏–∑ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞"}`, {keyboard: keyboard.build(current_keyboard)})
                return resolve()
            }
            catch (e)
            {
                await api.SendLogs(context, "BuildersAndControlsScripts/TestCountry", e)
            }
        })
    }

    async MintingMoney(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                let maxCount = 0
                let middleChance = 0
                let minChance = 0
                let maxChance = 0
                let mintCount = 0
                let workingCount = 0
                let flag = true
                let lastMintTime = new Date()
                const time = new Date()
                const lvls = {
                    1: {from: 0.4, to: 0.6, max: 125},
                    2: {from: 0.45, to: 0.6, max: 250},
                    3: {from: 0.5, to: 0.6, max: 500},
                    4: {from: 0.55, to: 0.6, max: 1000}
                }
                if(context.country.silver === 0)
                {
                    await context.send("‚ö† –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç —Å–µ—Ä–µ–±—Ä–∞ –¥–ª—è —á–µ–∫–∞–Ω–∫–∏", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                for(let k = 0; k < Data.cities.length; k++)
                {
                    if(Data.cities[k]?.countryID === context.country.id)
                    {
                        for(let i = 0; i < Data.buildings[Data.cities[k].id]?.length; i++)
                        {
                            if(Data.buildings[Data.cities[k].id][i].type.match(/mint/))
                            {
                                flag = false
                                if(Data.buildings[Data.cities[k].id][i].lastActivityTime - time < 0)
                                {
                                    maxCount += lvls[Data.buildings[Data.cities[k].id][i].level].max
                                    mintCount += 1
                                    middleChance += (lvls[Data.buildings[Data.cities[k].id][i].level].from + lvls[Data.buildings[Data.cities[k].id][i].level].to) / 2
                                }
                                else
                                {
                                    workingCount += 1
                                    if(Data.buildings[Data.cities[k].id][i].lastActivityTime - time > lastMintTime - time)
                                    {
                                        lastMintTime = Data.buildings[Data.cities[k].id][i].lastActivityTime
                                    }
                                }
                            }
                        }
                    }
                }
                if(flag)
                {
                    await context.send("‚ö† –í —Ñ—Ä–∞–∫—Ü–∏–∏ –Ω–µ—Ç –º–æ–Ω–µ—Ç–Ω—ã—Ö –¥–≤–æ—Ä–æ–≤", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                if(mintCount === 0)
                {
                    await context.send("‚ö† –í—Å–µ –º–æ–Ω–µ—Ç–Ω—ã–µ –¥–≤–æ—Ä—ã –∑–∞–Ω—è—Ç—ã —á–µ–∫–∞–Ω–∫–æ–π, –ø—Ä–∏—Ö–æ–¥–∏—Ç–µ —á–µ—Ä–µ–∑ " + NameLibrary.ParseFutureTime(lastMintTime), {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                middleChance = Math.round((middleChance / mintCount) * 100)
                let count = await InputManager.InputDefaultInteger(context, `1Ô∏è‚É£ –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç—á–µ–∫–∞–Ω–∏—Ç—å –º–æ–Ω–µ—Ç—ã –∏–∑ —Å–µ—Ä–µ–±—Ä–∞, –Ω–∞—Ö–æ–¥—è—â–µ–≥–æ—Å—è –≤ –±—é–¥–∂–µ—Ç–µ —Ñ—Ä–∞–∫—Ü–∏–∏.\n‚Ñπ –°–µ–π—á–∞—Å –≤ –±—é–¥–∂–µ—Ç–µ ${context.country.silver} —Å–µ—Ä–µ–±—Ä–∞.\n\n‚Ñπ –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ ${maxCount} —Å–µ—Ä–µ–±—Ä–∞ –≤ ${mintCount} / ${mintCount + workingCount} —Å–≤–æ–±–æ–¥–Ω—ã–µ –º–æ–Ω–µ—Ç–Ω—ã–µ –¥–≤–æ—Ä—ã, –ø—Ä–∏ —ç—Ç–æ–º —Å—Ä–µ–¥–Ω–∏–π –ö–ü–î –±—É–¥–µ—Ç –æ–∫–æ–ª–æ ${middleChance}%\n\n–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ—Ä–µ–±—Ä–∞ –¥–ª—è —á–µ–∫–∞–Ω–∫–∏`, current_keyboard, 1, Math.min(maxCount, context.country.silver), Math.min(maxCount, context.country.silver))
                if(!count) return resolve()
                await Data.AddCountryResources(context.country.id, {silver: -count})
                let access = await InputManager.InputBoolean(context, `–û—Ç–ø—Ä–∞–≤–∏—Ç—å ${count} —Å–µ—Ä–µ–±—Ä–∞ –Ω–∞ —á–µ–∫–∞–Ω–∫—É?`, current_keyboard)
                if(!access)
                {
                    await Data.AddCountryResources(context.country.id, {silver: count})
                    await context.send("üö´ –û—Ç–º–µ–Ω–µ–Ω–æ", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                let seconds = Math.round(14400 * (count / maxCount))
                time.setSeconds(time.getSeconds() + seconds)
                mintCount = 0
                for(let k = 0; k < Data.cities.length; k++)
                {
                    if(Data.cities[k]?.countryID === context.country.id)
                    {
                        for(let i = 0; i < Data.buildings[Data.cities[k].id]?.length; i++)
                        {
                            if(Data.buildings[Data.cities[k].id][i].type.match(/mint/))
                            {
                                if(Data.buildings[Data.cities[k].id][i].lastActivityTime - time < 0)
                                {
                                    mintCount += 1
                                    minChance += lvls[Data.buildings[Data.cities[k].id][i].level].from
                                    maxChance += lvls[Data.buildings[Data.cities[k].id][i].level].to
                                    Data.buildings[Data.cities[k].id][i].lastActivityTime = time
                                }
                            }
                        }
                    }
                }
                minChance /= mintCount
                maxChance /= mintCount
                let extraction = NameLibrary.GetRandomNumb(Math.round(count * minChance), Math.round(count * maxChance))
                await Data.AddCountryResources(context.country.id, {money: extraction})
                await context.send(`‚úÖ –ò–∑ ${count} —Å–µ—Ä–µ–±—Ä–∞ –æ—Ç—á–µ–∫–∞–Ω–µ–Ω–æ ${extraction} –º–æ–Ω–µ—Ç, –ö–ü–î —Å–æ—Å—Ç–∞–≤–∏–ª ${Math.round((extraction / count) * 100)}%`, {keyboard: keyboard.build(current_keyboard)})
                return resolve()
            }
            catch (e)
            {
                await api.SendLogs(context, "BuildersAndControlsScripts/MintingMoney", e)
            }
        })
    }

    async ChangeArmyDetachment(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                const kb = [
                    ["‚ûï –°–æ–∑–¥–∞—Ç—å –æ—Ç—Ä—è–¥", "add"],
                    ["‚Üò –ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –æ—Ç—Ä—è–¥", "move"],
                    ["üéØ –ò–∑–º–µ–Ω–∏—Ç—å –±–æ–µ–≤–æ–π –æ–ø—ã—Ç", "experience"],
                    ["‚ôæ –ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —é–Ω–∏—Ç–æ–≤", "count"],
                    ["‚úè –ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–º–µ—Ç–∫—É", "note"],
                    ["‚ùå –£–¥–∞–ª–∏—Ç—å –æ—Ç—Ä—è–¥", "delete"]
                ]
                const action = await InputManager.KeyboardBuilder(context, "1Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", kb, current_keyboard)
                if(!action) return resolve()
                action === "add" && await this.CreateArmyDetachment(context, current_keyboard)
                action === "count" && await this.ChangeCountDetachment(context, current_keyboard)
                action === "move" && await this.MoveDetachment(context, current_keyboard)
                action === "note" && await this.ChangeNoteDetachment(context, current_keyboard)
                action === "experience" && await this.ChangeDetachmentExperience(context, current_keyboard)
                action === "delete" && await this.DeleteDetachment(context, current_keyboard)
                return resolve()
            }
            catch (e)
            {
                await api.SendLogs(context, "BuildersAndControlsScripts/ChangeClassUnits", e)
            }
        })
    }

    async DeleteDetachment(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                let country = await InputManager.KeyboardBuilder(context, "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ—Ä–∞–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–æ–π –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –æ—Ç—Ä—è–¥", Data.GetCountryButtons(), current_keyboard)
                if(!country) return resolve()
                country = Data.ParseButtonID(country)
                country = Data.countries[country]
                const detachments = await Army.findAll({where: {ownerId: country.id, ownerType: "country"}})
                if(detachments.length === 0)
                {
                    await context.send("–£ —Ñ—Ä–∞–∫—Ü–∏–∏ " + country.GetName(context.player.platform === "IOS") + " –Ω–µ—Ç –æ—Ç—Ä—è–¥–æ–≤")
                    return resolve()
                }
                let detachment = await InputManager.KeyboardBuilder(context, "–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç—Ä—è–¥, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å", detachments.map(key => {return [`${key.dataValues.name} ${key.dataValues.count}`, "ID" + key.dataValues.id]}), current_keyboard)
                if(!detachment) return resolve()
                detachment = Data.ParseButtonID(detachment)
                detachment = detachments.filter(key => {return key.dataValues.id === detachment})[0]
                let accept = await InputManager.InputBoolean(context, "–í—ã —É–≤–µ—Ä–µ–Ω—ã?", current_keyboard)
                if(!accept) return resolve()
                await Army.destroy({where: {id: detachment.dataValues.id}})
                await context.send("‚úÖ –û—Ç—Ä—è–¥ —É–¥–∞–ª–µ–Ω", {keyboard: keyboard.build(current_keyboard)})
            }
            catch (e)
            {
                await api.SendLogs(context, "BuildersAndControlsScripts/CreateUnit", e)
            }
        })
    }

    async ChangeDetachmentExperience(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                let country = await InputManager.KeyboardBuilder(context, "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ—Ä–∞–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–æ–π –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –æ—Ç—Ä—è–¥", Data.GetCountryButtons(), current_keyboard)
                if(!country) return resolve()
                country = Data.ParseButtonID(country)
                country = Data.countries[country]
                const detachments = await Army.findAll({where: {ownerId: country.id, ownerType: "country"}})
                if(detachments.length === 0)
                {
                    await context.send("–£ —Ñ—Ä–∞–∫—Ü–∏–∏ " + country.GetName(context.player.platform === "IOS") + " –Ω–µ—Ç –æ—Ç—Ä—è–¥–æ–≤")
                    return resolve()
                }
                let detachment = await InputManager.KeyboardBuilder(context, "–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç—Ä—è–¥, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å", detachments.map(key => {return [`${key.dataValues.name} ${key.dataValues.count}`, "ID" + key.dataValues.id]}), current_keyboard)
                if(!detachment) return resolve()
                detachment = Data.ParseButtonID(detachment)
                detachment = detachments.filter(key => {return key.dataValues.id === detachment})[0]
                let newExperience = await InputManager.InputInteger(context, "–°–µ–π—á–∞—Å –æ–ø—ã—Ç –æ—Ç—Ä—è–¥–∞ —Ä–∞–≤–µ–Ω  " + detachment.dataValues.experience + "\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ", current_keyboard, 0)
                if(!newExperience) return resolve()
                await Army.update({experience: newExperience}, {where: {id: detachment.dataValues.id}})
                await context.send("‚úÖ –ë–æ–µ–≤–æ–π –æ–ø—ã—Ç –æ—Ç—Ä—è–¥–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", {keyboard: keyboard.build(current_keyboard)})
            }
            catch (e)
            {
                await api.SendLogs(context, "BuildersAndControlsScripts/CreateUnit", e)
            }
        })
    }

    async ChangeNoteDetachment(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                let country = await InputManager.KeyboardBuilder(context, "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ—Ä–∞–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–æ–π –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –æ—Ç—Ä—è–¥", Data.GetCountryButtons(), current_keyboard)
                if(!country) return resolve()
                country = Data.ParseButtonID(country)
                country = Data.countries[country]
                const detachments = await Army.findAll({where: {ownerId: country.id, ownerType: "country"}})
                if(detachments.length === 0)
                {
                    await context.send("–£ —Ñ—Ä–∞–∫—Ü–∏–∏ " + country.GetName(context.player.platform === "IOS") + " –Ω–µ—Ç –æ—Ç—Ä—è–¥–æ–≤")
                    return resolve()
                }
                let detachment = await InputManager.KeyboardBuilder(context, "–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç—Ä—è–¥, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å", detachments.map(key => {return [`${key.dataValues.name} ${key.dataValues.count}`, "ID" + key.dataValues.id]}), current_keyboard)
                if(!detachment) return resolve()
                detachment = Data.ParseButtonID(detachment)
                detachment = detachments.filter(key => {return key.dataValues.id === detachment})[0]
                let newNote = await InputManager.InputString(context, "–¢–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏: " + detachment.dataValues.note + "\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏", current_keyboard)
                if(!newNote) return resolve()
                await Army.update({note: newNote}, {where: {id: detachment.dataValues.id}})
                await context.send("‚úÖ –ó–∞–º–µ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∞", {keyboard: keyboard.build(current_keyboard)})
            }
            catch (e)
            {
                await api.SendLogs(context, "BuildersAndControlsScripts/CreateUnit", e)
            }
        })
    }

    async MoveDetachment(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                let country = await InputManager.KeyboardBuilder(context, "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ—Ä–∞–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–æ–π –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –æ—Ç—Ä—è–¥", Data.GetCountryButtons(), current_keyboard)
                if(!country) return resolve()
                country = Data.ParseButtonID(country)
                country = Data.countries[country]
                const detachments = await Army.findAll({where: {ownerId: country.id, ownerType: "country"}})
                if(detachments.length === 0)
                {
                    await context.send("–£ —Ñ—Ä–∞–∫—Ü–∏–∏ " + country.GetName(context.player.platform === "IOS") + " –Ω–µ—Ç –æ—Ç—Ä—è–¥–æ–≤")
                    return resolve()
                }
                let detachment = await InputManager.KeyboardBuilder(context, "–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç—Ä—è–¥, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å", detachments.map(key => {return [`${key.dataValues.name} ${key.dataValues.count}`, "ID" + key.dataValues.id]}), current_keyboard)
                if(!detachment) return resolve()
                detachment = Data.ParseButtonID(detachment)
                detachment = detachments.filter(key => {return key.dataValues.id === detachment})[0]
                let locateCountry = await InputManager.KeyboardBuilder(context, "–°–µ–π—á–∞—Å –æ—Ç—Ä—è–¥ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –≥–æ—Ä–æ–¥–µ " + Data.cities[detachment.dataValues.location].name + " —Ñ—Ä–∞–∫—Ü–∏–∏ " + Data.countries[Data.cities[detachment.dataValues.location].countryID]?.GetName() + "\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –æ—Ç—Ä—è–¥–∞\n\n–£–∫–∞–∂–∏—Ç–µ —Ñ—Ä–∞–∫—Ü–∏—é", Data.GetCountryButtons(), current_keyboard)
                if(!locateCountry) return resolve()
                locateCountry = Data.ParseButtonID(locateCountry)
                locateCountry = Data.countries[locateCountry]
                let locateCity = await InputManager.KeyboardBuilder(context, "–£–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥, –≤ –∫–æ—Ç–æ—Ä–æ–º –∏–ª–∏ —Ä—è–¥–æ–º —Å –∫–æ—Ç–æ—Ä—ã–º —Ä–∞—Å–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è –æ—Ç—Ä—è–¥", Data.GetCityForCountryButtons(locateCountry.id), current_keyboard)
                if(!locateCity) return resolve()
                locateCity = Data.ParseButtonID(locateCity)
                locateCity = Data.cities[locateCity]
                await Army.update({location: locateCity.id}, {where: {id: detachment.dataValues.id}})
                await context.send("‚úÖ –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ", {keyboard: keyboard.build(current_keyboard)})
            }
            catch (e)
            {
                await api.SendLogs(context, "BuildersAndControlsScripts/CreateUnit", e)
            }
        })
    }

    async ChangeCountDetachment(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                const arrToObj = (arr) =>
                {
                    let obj = {}
                    for(const e of arr)
                    {
                        obj[e[0]] = e[1]
                    }
                    return obj
                }
                let country = await InputManager.KeyboardBuilder(context, "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ—Ä–∞–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–æ–π –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –æ—Ç—Ä—è–¥", Data.GetCountryButtons(), current_keyboard)
                if(!country) return resolve()
                country = Data.ParseButtonID(country)
                country = Data.countries[country]
                const population = await PlayerStatus.count({where: {citizenship: country.id}})
                const detachments = await Army.findAll({where: {ownerId: country.id, ownerType: "country"}})
                if(detachments.length === 0)
                {
                    await context.send("–£ —Ñ—Ä–∞–∫—Ü–∏–∏ " + country.GetName(context.player.platform === "IOS") + " –Ω–µ—Ç –æ—Ç—Ä—è–¥–æ–≤")
                    return resolve()
                }
                let types = []
                for(const det of detachments) {if(!types.includes(det.dataValues.typeId)) types.push(det.dataValues.typeId)}
                types = await UnitType.findAll({where: {id: types}})
                types = arrToObj(types.map(key => {return [key.dataValues.id, key.dataValues]}))
                let detachment = await InputManager.KeyboardBuilder(context, "–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç—Ä—è–¥, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å", detachments.map(key => {return [`${key.dataValues.name} ${key.dataValues.count}`, "ID" + key.dataValues.id]}), current_keyboard)
                if(!detachment) return resolve()
                detachment = Data.ParseButtonID(detachment)
                detachment = detachments.filter(key => {return key.dataValues.id === detachment})[0]
                let usedUnitPos = 0
                for(const det of detachments)
                {
                    if(detachment.dataValues.id === det.dataValues.id) continue
                    usedUnitPos += Math.ceil(det.dataValues.count / types[det.dataValues.typeId].citizenPrice)
                }
                usedUnitPos = population - usedUnitPos
                const count = await InputManager.InputInteger(context, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —é–Ω–∏—Ç–æ–≤ –≤ –æ—Ç—Ä—è–¥–µ, –æ—Ç 1 –¥–æ " + usedUnitPos * types[detachment.dataValues.typeId].citizenPrice, current_keyboard, 0, usedUnitPos * types[detachment.dataValues.typeId].citizenPrice)
                if(!count) return resolve()
                await Army.update({count: count}, {where: {id: detachment.dataValues.id}})
                await context.send("‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ", {keyboard: keyboard.build(current_keyboard)})
            }
            catch (e)
            {
                await api.SendLogs(context, "BuildersAndControlsScripts/CreateUnit", e)
            }
        })
    }

    async CreateArmyDetachment(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                const types = await UnitType.findAll()
                if(types.length === 0)
                {
                    await context.send("–ü–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –æ—Ç—Ä—è–¥–∞ –¥–æ–±–∞–≤—å—Ç–µ —Ç–∏–ø—ã —é–Ω–∏—Ç–æ–≤")
                    return resolve()
                }
                let country = await InputManager.KeyboardBuilder(context, "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ—Ä–∞–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–æ–π –±—É–¥–µ—Ç –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—Ç—å –æ—Ç—Ä—è–¥", Data.GetCountryButtons(), current_keyboard)
                if(!country) return resolve()
                country = Data.ParseButtonID(country)
                country = Data.countries[country]
                const classes = await UnitClass.findAll({where: {countryId: country.id}})
                if(classes.length === 0)
                {
                    await context.send("–ü–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –æ—Ç—Ä—è–¥–∞ –¥–æ–±–∞–≤—å—Ç–µ —é–Ω–∏—Ç—ã —Ñ—Ä–∞–∫—Ü–∏–∏ " + country.GetName(), {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                let unitType = await InputManager.KeyboardBuilder(context, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —é–Ω–∏—Ç–∞", types.map(key => {return [key.name, "ID" + key.id]}), current_keyboard)
                if(!unitType) return resolve()
                unitType = Data.ParseButtonID(unitType)
                unitType = types.filter(key => {return key.id === unitType})[0].dataValues
                let unitClass = await InputManager.KeyboardBuilder(context, "–í—ã–±–µ—Ä–∏—Ç–µ —é–Ω–∏—Ç", classes.map(key => {return [key.name, "ID" + key.id]}), current_keyboard)
                if(!unitClass) return resolve()
                unitClass = Data.ParseButtonID(unitClass)
                unitClass = classes.filter(key => {return key.id === unitClass})[0].dataValues

                const allCountryArmy = await Army.findAll({where: {ownerId: country.id, ownerType: "country"}})
                const population = await PlayerStatus.count({where: {citizenship: country.id}})
                let usedCitizens = 0
                for(const unit of allCountryArmy)
                {
                    let type = await UnitType.findOne({where: {id: unit.dataValues.typeId}})
                    if(!type) continue
                    usedCitizens += Math.ceil(unit.dataValues.count / type.dataValues.citizenPrice)
                }
                const freeCitizens = population - usedCitizens
                if(freeCitizens <= 0)
                {
                    await context.send("–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –≥—Ä–∞–∂–¥–∞–Ω –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç—Ä—è–¥–∞ —ç—Ç–æ–≥–æ —Ç–∏–ø–∞", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                const name = await InputManager.InputString(context, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ç—Ä—è–¥–∞", current_keyboard)
                if(!name) return resolve()
                let count = await InputManager.InputInteger(context, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —é–Ω–∏—Ç–æ–≤ –≤ –æ—Ç—Ä—è–¥–µ (–æ—Ç 1 –¥–æ " + (unitType.citizenPrice * freeCitizens) + ")", current_keyboard, 1, unitType.citizenPrice * freeCitizens)
                if(!count) return resolve()
                let rating = await InputManager.InputDefaultInteger(context, "–£–∫–∞–∂–∏—Ç–µ –±–æ–µ–≤–æ–π –æ–ø—ã—Ç —ç—Ç–æ–≥–æ –æ—Ç—Ä—è–¥–∞", current_keyboard, -1000000, 1000000, 0)
                if(rating === null) return resolve()
                let locateCountry = await InputManager.KeyboardBuilder(context, "–í–≤–µ–¥–∏—Ç–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –æ—Ç—Ä—è–¥–∞\n\n–£–∫–∞–∂–∏—Ç–µ —Ñ—Ä–∞–∫—Ü–∏—é", Data.GetCountryButtons(), current_keyboard)
                if(!locateCountry) return resolve()
                locateCountry = Data.ParseButtonID(locateCountry)
                locateCountry = Data.countries[locateCountry]
                let locateCity = await InputManager.KeyboardBuilder(context, "–£–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥, –≤ –∫–æ—Ç–æ—Ä–æ–º –∏–ª–∏ —Ä—è–¥–æ–º —Å –∫–æ—Ç–æ—Ä—ã–º —Ä–∞—Å–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è –æ—Ç—Ä—è–¥", Data.GetCityForCountryButtons(locateCountry.id), current_keyboard)
                if(!locateCity) return resolve()
                locateCity = Data.ParseButtonID(locateCity)
                locateCity = Data.cities[locateCity]
                let note = await InputManager.InputString(context, "–°–¥–µ–ª–∞–π—Ç–µ —É—Ç–æ—á–Ω–µ–Ω–∏–µ –ø–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—é –æ—Ç—Ä—è–¥–∞", current_keyboard)
                if(!note) return resolve()

                const request = "–û—Ç—Ä—è–¥ —é–Ω–∏—Ç–æ–≤: " + unitClass.name + "\n" +
                    "–¢–∏–ø —é–Ω–∏—Ç–æ–≤: " + unitType.name + "\n" +
                    "–ü—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —Ñ—Ä–∞–∫—Ü–∏–∏ " + country.GetName() + "\n" +
                    "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: " + count + "\n" +
                    "–ë–æ–µ–≤–æ–π –æ–ø—ã—Ç: " + rating + "\n" +
                    "–†–∞—Å–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è –≤ —Ñ—Ä–∞–∫—Ü–∏–∏ " + locateCountry.GetName() + ", –≤ –≥–æ—Ä–æ–¥–µ " + locateCity.name + ", " + note
                const accept = await InputManager.InputBoolean(context, request, current_keyboard)
                if(!accept) return resolve()
                await Army.create({
                    ownerId: country.id,
                    ownerType: "country",
                    typeId: unitType.id,
                    classId: unitClass.id,
                    count: count,
                    experience: rating,
                    note: note,
                    name: name,
                    location: locateCity.id
                })
                await context.send("‚úÖ –û—Ç—Ä—è–¥ —Å–æ–∑–¥–∞–Ω", {keyboard: keyboard.build(current_keyboard)})
            }
            catch (e)
            {
                await api.SendLogs(context, "BuildersAndControlsScripts/CreateUnit", e)
            }
        })
    }

    async ChangeTypeUnits(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                const kb = [
                    ["‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–∏–ø", "add"],
                    ["‚úè –ò–∑–º–µ–Ω–∏—Ç—å —Ç–∏–ø", "edit"],
                    ["‚ùå –£–¥–∞–ª–∏—Ç—å —Ç–∏–ø", "delete"]
                ]
                const action = await InputManager.KeyboardBuilder(context, "1Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", kb, current_keyboard)
                if(!action) return resolve()
                action === "add" && await this.AddUnitType(context, current_keyboard)
                action === "edit" && await this.EditUnitType(context, current_keyboard)
                action === "delete" && await this.DeleteUnitType(context, current_keyboard)
                return resolve()
            }
            catch (e)
            {
                await api.SendLogs(context, "BuildersAndControlsScripts/ChangeClassUnits", e)
            }
        })
    }

    async DeleteUnitType(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                const classes = await UnitType.findAll()
                if(classes.length === 0)
                {
                    await context.send("–¢–∏–ø—ã –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã")
                    return resolve()
                }
                let unitType = await InputManager.KeyboardBuilder(context, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å", classes.map(key => {return [key.name, "ID" + key.id]}), current_keyboard)
                if(!unitType) return resolve()
                unitType = Data.ParseButtonID(unitType)
                unitType = classes.filter(key => {return key.id === unitType})[0].dataValues
                const accept = await InputManager.InputBoolean(context, `–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ç–∏–ø ${unitType.name}?`, current_keyboard)
                if(!accept)
                {
                    await context.send("üö´ –û—Ç–º–µ–Ω–µ–Ω–æ")
                    return resolve()
                }
                await UnitType.destroy({where: {id: unitType.id}})
                await Army.destroy({where: {typeId: unitType.id}})
                await context.send("‚úÖ –¢–∏–ø —É–¥–∞–ª–µ–Ω", {keyboard: keyboard.build(current_keyboard)})
            }
            catch (e)
            {
                await api.SendLogs(context, "BuildersAndControlsScripts/EditUnitClass", e)
            }
        })
    }

    async EditUnitType(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                const classes = await UnitType.findAll()
                if(classes.length === 0)
                {
                    await context.send("–¢–∏–ø—ã –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã")
                    return resolve()
                }
                let unitType = await InputManager.KeyboardBuilder(context, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —é–Ω–∏—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", classes.map(key => {return [key.name, "ID" + key.id]}), current_keyboard)
                if(!unitType) return resolve()
                unitType = Data.ParseButtonID(unitType)
                unitType = classes.filter(key => {return key.id === unitType})[0].dataValues
                let name = await InputManager.InputString(context, `–¢–µ–∫—É—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: ${unitType.name}\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∞ —é–Ω–∏—Ç–∞\n\n–ß—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –Ω–∞–∂–º–∏—Ç–µ \"–æ—Ç–º–µ–Ω–∞\"`, current_keyboard)
                if(!name) name = unitType.name

                let accept = await InputManager.InputBoolean(context, "–ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ —Ç–∏–ø–∞ —é–Ω–∏—Ç–∞?", current_keyboard)
                let newPrice = JSON.parse(unitType.price)
                if(accept)
                {
                    newPrice = await InputManager.InputPrice(context, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏", current_keyboard)
                    if(!newPrice) newPrice = JSON.parse(unitType.price)
                }
                accept = await InputManager.InputBoolean(context, "–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è —Ç–∏–ø–∞ —é–Ω–∏—Ç–∞?", current_keyboard)
                let newService = JSON.parse(unitType.price)
                if(accept)
                {
                    newService = await InputManager.InputPrice(context, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è", current_keyboard)
                    if(!newPrice) newService = JSON.parse(unitType.price)
                }
                let barracksLVL = await InputManager.InputInteger(context, "–í–≤–µ–¥–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –∫–∞–∑–∞—Ä–º—ã, —Å –∫–æ—Ç–æ—Ä–æ–≥–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ —é–Ω–∏—Ç–∞ —Ç–∞–∫–æ–≥–æ —Ç–∏–ø–∞, —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –∫–∞–∫ –µ—Å—Ç—å, –Ω–∞–∂–º–∏—Ç–µ –æ—Ç–º–µ–Ω–∞", current_keyboard, 1, 4)
                if(!barracksLVL) barracksLVL = unitType.barracksLVL
                let citizenPrice = await InputManager.InputInteger(context, "–í–≤–µ–¥–∏—Ç–µ —Å–∫–æ–ª—å–∫–æ –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –Ω–∞—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å —é–Ω–∏—Ç–æ–≤ —Ç–∞–∫–æ–≥–æ —Ç–∏–ø–∞ –∑–∞ –æ–¥–Ω–æ–≥–æ –≥—Ä–∞–∂–¥–∞–Ω–∏–Ω–∞, —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –∫–∞–∫ –µ—Å—Ç—å, –Ω–∞–∂–º–∏—Ç–µ –æ—Ç–º–µ–Ω–∞", current_keyboard, 1)
                if(!citizenPrice) citizenPrice = unitType.citizenPrice

                await UnitType.update({
                    name: name,
                    price: JSON.stringify(newPrice),
                    service: JSON.stringify(newService),
                    barracksLVL: barracksLVL,
                    citizenPrice: citizenPrice
                }, {where: {id: unitType.id}})
                await context.send("‚úÖ –¢–∏–ø –æ–±–Ω–æ–≤–ª–µ–Ω", {keyboard: keyboard.build(current_keyboard)})
            }
            catch (e)
            {
                await api.SendLogs(context, "BuildersAndControlsScripts/EditUnitClass", e)
            }
        })
    }

    async AddUnitType(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                const name = await InputManager.InputString(context, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∏–ø–∞ —é–Ω–∏—Ç–∞", current_keyboard)
                if(!name) return resolve()

                const price = await InputManager.InputPrice(context, "–£–∫–∞–∂–∏—Ç–µ —Ü–µ–Ω—É –ø–æ–∫—É–ø–∫–∏ —é–Ω–∏—Ç–∞ —ç—Ç–æ–≥–æ —Ç–∏–ø–∞", current_keyboard)
                if(!price) return resolve()
                const service = await InputManager.InputPrice(context, "–£–∫–∞–∂–∏—Ç–µ —Ü–µ–Ω—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —é–Ω–∏—Ç–∞ —ç—Ç–æ–≥–æ —Ç–∏–ø–∞", current_keyboard, true)
                if(!service) return resolve()
                const barracksLVL = await InputManager.InputInteger(context, "–£–∫–∞–∂–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –∫–∞–∑–∞—Ä–º—ã, —Å –∫–æ—Ç–æ—Ä–æ–≥–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ —é–Ω–∏—Ç–∞ —Ç–∞–∫–æ–≥–æ —Ç–∏–ø–∞", current_keyboard, 1, 4)
                if(!barracksLVL) return resolve()
                const citizenPrice = await InputManager.InputInteger(context, "–£–∫–∞–∂–∏—Ç–µ —Å–∫–æ–ª—å–∫–æ —é–Ω–∏—Ç–æ–≤ —Ç–∞–∫–æ–≥–æ —Ç–∏–ø–∞ –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –Ω–∞—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å –∑–∞ –æ–¥–Ω–æ–≥–æ –≥—Ä–∞–∂–¥–∞–Ω–∏–Ω–∞", current_keyboard, 1,)
                if(!citizenPrice) return resolve()

                const accept = await InputManager.InputBoolean(context, `\n–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–∏–ø–∞: ${name}\n–£—Ä–æ–≤–µ–Ω—å –∫–∞–∑–∞—Ä–º—ã:\n${barracksLVL}\n–¶–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏: ${NameLibrary.GetPrice(price)}\n\n–°—Ç–æ–∏–º–æ—Å—Ç—å —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è: ${NameLibrary.GetPrice(service)}\n\n–í–µ—Ä–Ω–æ?`, current_keyboard)
                if(!accept) return resolve()
                await UnitType.create({
                    name: name,
                    price: JSON.stringify(price),
                    service: JSON.stringify(service),
                    barracksLVL: barracksLVL,
                    citizenPrice: citizenPrice
                })
                await context.send("‚úÖ –¢–∏–ø —é–Ω–∏—Ç–∞ —Å–æ–∑–¥–∞–Ω", {keyboard: keyboard.build(current_keyboard)})
            }
            catch (e)
            {
                await api.SendLogs(context, "BuildersAndControlsScripts/AddUnitClass", e)
            }
        })
    }

    async ChangeClassUnits(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                const kb = [
                    ["‚ûï –î–æ–±–∞–≤–∏—Ç—å —é–Ω–∏—Ç", "add"],
                    ["‚úè –ò–∑–º–µ–Ω–∏—Ç—å —é–Ω–∏—Ç", "edit"],
                    ["‚ùå –£–¥–∞–ª–∏—Ç—å —é–Ω–∏—Ç", "delete"]
                ]
                const action = await InputManager.KeyboardBuilder(context, "1Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", kb, current_keyboard)
                if(!action) return resolve()
                action === "add" && await this.AddUnitClass(context, current_keyboard)
                action === "edit" && await this.EditUnitClass(context, current_keyboard)
                action === "delete" && await this.DeleteUnitClass(context, current_keyboard)
                return resolve()
            }
            catch (e)
            {
                await api.SendLogs(context, "BuildersAndControlsScripts/ChangeClassUnits", e)
            }
        })
    }

    async AddUnitClass(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                const showTags = (array) => {
                    if(array.length === 0) return "–¢–µ–≥–æ–≤ –Ω–µ—Ç"
                    let request = `–°–ø–∏—Å–æ–∫ —Ç–µ–≥–æ–≤:\n\n`
                    for(const tag of array)
                    {
                        request += "- " + tag + "\n"
                    }
                    return request
                }

                const name = await InputManager.InputString(context, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —é–Ω–∏—Ç–∞", current_keyboard)
                if(!name) return resolve()
                const description = await InputManager.InputString(context, "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —é–Ω–∏—Ç–∞", current_keyboard)
                if(!description) return resolve()
                let country = await InputManager.KeyboardBuilder(context, "–í—ã–±–µ—Ä–∏—Ç–µ  —Ñ—Ä–∞–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–æ–π –±—É–¥–µ—Ç –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—Ç—å —é–Ω–∏—Ç", Data.GetCountryButtons(), current_keyboard)
                if(!country) return resolve()
                country = Data.ParseButtonID(country)
                country = Data.countries[country]

                await context.send("–£–∫–∞–∂–∏—Ç–µ —Ç–µ–≥–∏ —ç—Ç–æ–≥–æ —é–Ω–∏—Ç–∞.\n\n–¢–µ–≥–∏ –Ω—É–∂–Ω—ã –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –±—ã—Å—Ç—Ä–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º —é–Ω–∏—Ç–µ, –∏–∑–º–µ–Ω—è—Ç—å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∏ —Ç.–¥.\n\n–¢–µ–≥–æ–º –º–æ–∂–µ—Ç —è–≤–ª—è—Ç—å—Å—è —á–∞—Å—Ç—å —Å–ª–æ–≤–∞: —Å —Ç–µ–≥–æ–º \"–∫–∞–≤–∞–ª–µ—Ä\" –±–æ—Ç –Ω–∞–π–¥–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –≤ —Å–ª–æ–≤–∞—Ö \"–ö–ê–í–ê–õ–ï–†\", \"–ö–ê–í–ê–õ–ï–†–∏—è\", \"–ö–ê–í–ê–õ–ï–†–∏–π—Å–∫–∏–π\" –∏ —Ç.–¥.\n\n–ë—É–¥—å—Ç–µ –∞–∫–∫—É—Ä–∞—Ç–Ω—ã, –µ—Å–ª–∏ —Ç–µ–≥–∏ –±—É–¥—É—Ç –ø–µ—Ä–µ—Å–µ–∫–∞—Ç—å—Å—è, —Ç–æ –±–æ—Ç –º–æ–∂–µ—Ç –≤—ã–¥–∞–≤–∞—Ç—å –Ω–µ –≤–µ—Ä–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
                let tags = []
                let newTag = ""
                do
                {
                    await context.send(showTags(tags))
                    newTag = await InputManager.InputString(context, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–≥", current_keyboard)
                    if(newTag)
                    {
                        tags.push(newTag.toLowerCase())
                    }
                }
                while(newTag)
                if(tags.length === 0) return resolve()
                newTag = tags.join("|")

                const accept = await InputManager.InputBoolean(context, `${country.GetName(context.player.platform === "IOS")}\n–ù–∞–∑–≤–∞–Ω–∏–µ: ${name}\n–û–ø–∏—Å–∞–Ω–∏–µ:\n${description}\n\n–í–µ—Ä–Ω–æ?`, current_keyboard)
                if(!accept) return resolve()
                await UnitClass.create({
                    name: name,
                    description: description,
                    countryId: country.id,
                    tag: newTag
                })
                await context.send("‚úÖ –Æ–Ω–∏—Ç —Å–æ–∑–¥–∞–Ω", {keyboard: keyboard.build(current_keyboard)})
            }
            catch (e)
            {
                await api.SendLogs(context, "BuildersAndControlsScripts/AddUnitClass", e)
            }
        })
    }

    async EditUnitClass(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                const showTags = (array) => {
                    if(array.length === 0) return "–¢–µ–≥–æ–≤ –Ω–µ—Ç"
                    let request = `–°–ø–∏—Å–æ–∫ —Ç–µ–≥–æ–≤:\n\n`
                    for(const tag of array)
                    {
                        request += "- " + tag + "\n"
                    }
                    return request
                }

                const classes = await UnitClass.findAll()
                if(classes.length === 0)
                {
                    await context.send("–Æ–Ω–∏—Ç—ã –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã")
                    return resolve()
                }
                let unitClass = await InputManager.KeyboardBuilder(context, "–í—ã–±–µ—Ä–∏—Ç–µ —é–Ω–∏—Ç, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", classes.map(key => {return [key.name, "ID" + key.id]}), current_keyboard)
                if(!unitClass) return resolve()
                unitClass = Data.ParseButtonID(unitClass)
                unitClass = classes.filter(key => {return key.id === unitClass})[0].dataValues
                let name = await InputManager.InputString(context, `–ù–∞–∑–≤–∞–Ω–∏–µ: ${unitClass.name}\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —é–Ω–∏—Ç–∞\n\n–ß—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –Ω–∞–∂–º–∏—Ç–µ \"–æ—Ç–º–µ–Ω–∞\"`, current_keyboard)
                if(!name) name = unitClass.name
                let description = await InputManager.InputString(context, `–û–ø–∏—Å–∞–Ω–∏–µ: ${unitClass.description}\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —é–Ω–∏—Ç–∞\n\n–ß—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –Ω–∞–∂–º–∏—Ç–µ \"–æ—Ç–º–µ–Ω–∞\"`, current_keyboard)
                if(!description) description = unitClass.description

                let newTag = ""
                let tags = unitClass.tag ? unitClass.tag.split("|") : []
                const action = await InputManager.ChooseButton(context, "–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ —Å–¥–µ–ª–∞—Ç—å —Å —Ç–µ–≥–∞–º–∏:", [[keyboard.deleteButton, keyboard.skipButton, keyboard.addButton]])
                if(action === "add")
                {
                    do
                    {
                        await context.send(showTags(tags))
                        newTag = await InputManager.InputString(context, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–≥", current_keyboard)
                        if(newTag)
                        {
                            tags.push(newTag.toLowerCase())
                        }
                    }
                    while(newTag)
                    if(tags.length === 0) return resolve()
                    newTag = tags.join("|")
                }
                else if(action === "delete")
                {
                    if(tags.length === 0)
                    {
                        await context.send("–ù–µ—Ç —Ç–µ–≥–æ–≤", {keyboard: keyboard.build(current_keyboard)})
                        return resolve()
                    }
                    let tagsKB = []
                    for(const tag of tags)
                    {
                        tagsKB.push([tag, tag])
                    }
                    let newTag = await InputManager.KeyboardBuilder(context, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–≥, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–±—Ä–∞—Ç—å", tagsKB, current_keyboard)
                    if(!newTag) return resolve()
                    tags = tags.filter(key => {return key !== newTag})
                    if(tags.length !== 0)
                    {
                        newTag = tags.join("|")
                    }
                }
                else
                {
                    newTag = tags.join("|")
                }

                let country = await InputManager.KeyboardBuilder(context, `–°–µ–π—á–∞—Å —é–Ω–∏—Ç –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —Ñ—Ä–∞–∫—Ü–∏–∏: ${Data.countries[unitClass.countryId]?.GetName(context.player.platform === "IOS")}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é —Ñ—Ä–∞–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–æ–π –±—É–¥–µ—Ç –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—Ç—å —é–Ω–∏—Ç, –æ—Ç–º–µ–Ω–∞ = –æ—Å—Ç–∞–≤–∏—Ç—å –ø—Ä–µ–∂–Ω—é—é`, Data.GetCountryButtons(), current_keyboard)
                if(country)
                {
                    country = Data.ParseButtonID(country)
                    country = Data.countries[country].id
                }
                else
                {
                    country = unitClass.countryId
                }
                await UnitClass.update({
                    name: name,
                    description: description,
                    countryId: country,
                    tag: newTag
                }, {where: {id: unitClass.id}})
                await context.send("‚úÖ –Æ–Ω–∏—Ç –æ–±–Ω–æ–≤–ª–µ–Ω", {keyboard: keyboard.build(current_keyboard)})
            }
            catch (e)
            {
                await api.SendLogs(context, "BuildersAndControlsScripts/EditUnitClass", e)
            }
        })
    }

    async DeleteUnitClass(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                const classes = await UnitClass.findAll()
                if(classes.length === 0)
                {
                    await context.send("–Æ–Ω–∏—Ç—ã –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã")
                    return resolve()
                }
                let unitClass = await InputManager.KeyboardBuilder(context, "–í—ã–±–µ—Ä–∏—Ç–µ —é–Ω–∏—Ç, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å", classes.map(key => {return [key.name, "ID" + key.id]}), current_keyboard)
                if(!unitClass) return resolve()
                unitClass = Data.ParseButtonID(unitClass)
                unitClass = classes.filter(key => {return key.id === unitClass})[0].dataValues
                const accept = await InputManager.InputBoolean(context, `–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —é–Ω–∏—Ç ${unitClass.name}?`, current_keyboard)
                if(!accept)
                {
                    await context.send("üö´ –û—Ç–º–µ–Ω–µ–Ω–æ")
                    return resolve()
                }
                await UnitClass.destroy({where: {id: unitClass.id}})
                await Army.destroy({where: {classId: unitClass.id}})
                await context.send("‚úÖ –Æ–Ω–∏—Ç —É–¥–∞–ª–µ–Ω", {keyboard: keyboard.build(current_keyboard)})
            }
            catch (e)
            {
                await api.SendLogs(context, "BuildersAndControlsScripts/EditUnitClass", e)
            }
        })
    }

    async GetChatGPTRequest(messages)
    {
        let key = APIKeysGenerator.GetKey()
        try
        {
            let request = await axios.post("https://api.openai.com/v1/chat/completions", {
                    model: "gpt-3.5-turbo",
                    messages: messages
                },
                {
                    headers: {
                        Authorization: 'Bearer ' + key
                    }
                })
            request = request.data["choices"][0].message.content
            let pages = []
            for(let i = 0; i < Math.ceil(request.length/4000); i++)
            {
                pages[i] = request.slice((i * 4000), (i * 4000) + 4000)
            }
            return pages
        }
        catch (e)
        {
            APIKeysGenerator.WarnKey(key)
            Data.variables["isTest"] && console.log(e)
            return undefined
        }
    }

    async SubscribeToMemory(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                const now = new Date()
                let time
                if(context.player.botForgotTime - now > 0)
                {
                    time = context.player.botForgotTime
                }
                else
                {
                    time = now
                }
                time.setMonth(time.getMonth() + 1)
                time.setDate(time.getDate() + 1)
                time.setHours(0)
                time.setMinutes(0)
                time.setSeconds(0)
                time.setMilliseconds(0)
                const request = "‚Ñπ –° —ç—Ç–æ–π –ø–æ–¥–ø–∏—Å–∫–æ–π –±–æ—Ç —Å–º–æ–∂–µ—Ç –∑–∞–ø–æ–º–∏–Ω–∞—Ç—å –∑–∞–¥–∞–Ω–Ω—ã–µ –≤–∞–º–∏ —Ñ—Ä–∞–∑—ã, —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ –∏ –º—É–∑—ã–∫—É.\n" +
                    "‚Ñπ –ü–æ –≤—ã–∑–æ–≤—É —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–æ—Ç–∞ \"–±–æ—Ç\" –≤ –æ–±—â–µ–¥–æ—Å—Ç—É–ø–Ω—ã—Ö —á–∞—Ç–∞—Ö, –±–æ—Ç –±—É–¥–µ—Ç –≤—ã–¥–∞–≤–∞—Ç—å –Ω–µ —Å–ª—É—á–∞–π–Ω—É—é –∑–∞–≥–æ—Ç–æ–≤–∫—É, –∞ —Ç–æ, —á—Ç–æ –≤—ã –¥–∞–¥–∏—Ç–µ –±–æ—Ç—É.\n\n" +
                    "–°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –º–µ—Å—è—Ü:\n" +
                    "üíé –ê–ª–º–∞–∑—ã: 1\n\n" +
                    "‚Ñπ–ü–æ–¥–ø–∏—Å–∫–∞ –±—É–¥–µ—Ç –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ " + NameLibrary.ParseDateTime(time.toString()) + "\n\n" +
                    "‚Ñπ –í –≤–∞—à–µ–º –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ " + context.player.diamond + " –∞–ª–º–∞–∑–æ–≤\n\n"
                if(context.player.diamond < 1)
                {
                    await context.send(request + "‚ö† –£ –≤–∞—Å –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –∞–ª–º–∞–∑–æ–≤", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                const accept = await InputManager.InputBoolean(context, request + "–û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É?", current_keyboard)
                if(!accept)
                {
                    await context.send("üö´ –û—Ç–º–µ–Ω–µ–Ω–æ", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                context.player.botForgotTime = time
                await PlayerStatus.update({botForgotTime: time}, {where: {id: context.player.id}})
                await Data.AddPlayerResources(context.player.id, {diamond: -1})
                await context.send("‚úÖ –í—ã –æ—Ñ–æ—Ä–º–∏–ª–∏ –º–µ—Å—è—á–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –∫–æ–º–∞–Ω–¥–∞–º:\n\nüî∏\"–ë–æ—Ç –∑–∞–ø–æ–º–Ω–∏\" - –±–æ—Ç –±—É–¥–µ—Ç –æ—Ç–∑—ã–≤–∞—Ç—å—Å—è –∑–∞–¥–∞–Ω–Ω–æ–π –≤–∞–º–∏ –ø–æ—Å–ª–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã —Ñ—Ä–∞–∑–æ–π (–º–æ–∂–Ω–æ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ –∏ –º—É–∑—ã–∫—É)\n\nüî∏\"–ë–æ—Ç –∑–∞–±—É–¥—å\" - –±–æ—Ç —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç –∑–∞–¥–∞–Ω–Ω—É—é –≤–∞–º–∏ —Ñ—Ä–∞–∑—É –∏ –Ω–∞—á–∏–Ω–∞–µ—Ç –æ—Ç–≤–µ—á–∞—Ç—å –∑–∞–≥–æ—Ç–æ–≤–∫–∞–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é\n\n‚Ñπ –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –∫–æ–≥–¥–∞ —Å—Ä–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏ –∏—Å—Ç–µ—á–µ—Ç, –∑–∞–¥–∞–Ω–Ω–∞—è –≤–∞–º–∏ —Ñ—Ä–∞–∑–∞ –æ—Å—Ç–∞–Ω–µ—Ç—Å—è —Å –≤–∞–º–∏, –Ω–æ –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –ø–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–æ–≤—É—é - –Ω–∞–¥–æ –±—É–¥–µ—Ç –ø—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É.", {keyboard: keyboard.build(current_keyboard)})
            }
            catch (e)
            {
                await api.SendLogs(context, "BuildersAndControlsScripts/CreateUnit", e)
            }
        })
    }

    async SubscribeToTalking(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                const now = new Date()
                let time
                if(context.player.botCallTime - now > 0)
                {
                    time = context.player.botCallTime
                }
                else
                {
                    time = now
                }
                time.setMonth(time.getMonth() + 1)
                time.setDate(time.getDate() + 1)
                time.setHours(0)
                time.setMinutes(0)
                time.setSeconds(0)
                time.setMilliseconds(0)
                const request = "‚Ñπ –° —ç—Ç–æ–π –ø–æ–¥–ø–∏—Å–∫–æ–π –≤–∞–º —Å—Ç–∞–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ –æ–±—â–µ–Ω–∏–µ —Å –±–æ—Ç–æ–º –≤ —á–∞—Ç–∞—Ö –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π, —Ç–∞–∫–∂–µ –æ—Ç–∫—Ä–æ–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ–µ –º–µ–Ω—é –≤ –õ–°, —á–µ—Ä–µ–∑ –∫–æ—Ç–æ—Ä–æ–µ –º–æ–∂–Ω–æ –Ω–∞–ø—Ä—è–º—É—é –æ–±—â–∞—Ç—å—Å—è —Å –±–æ—Ç–æ–º\n\n" +
                    "–°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –º–µ—Å—è—Ü:\n" +
                    "üíé –ê–ª–º–∞–∑—ã: 1\n\n" +
                    "‚Ñπ–ü–æ–¥–ø–∏—Å–∫–∞ –±—É–¥–µ—Ç –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ " + NameLibrary.ParseDateTime(time.toString()) + "\n\n" +
                    "‚Ñπ –í –≤–∞—à–µ–º –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ " + context.player.diamond + " –∞–ª–º–∞–∑–æ–≤\n\n"
                if(context.player.diamond < 1)
                {
                    await context.send(request + "‚ö† –£ –≤–∞—Å –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –∞–ª–º–∞–∑–æ–≤", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                const accept = await InputManager.InputBoolean(context, request + "–û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É?", current_keyboard)
                if(!accept)
                {
                    await context.send("üö´ –û—Ç–º–µ–Ω–µ–Ω–æ", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                context.player.botCallTime = time
                await PlayerStatus.update({botCallTime: time}, {where: {id: context.player.id}})
                await Data.AddPlayerResources(context.player.id, {diamond: -1})
                await context.send("‚úÖ –í—ã –æ—Ñ–æ—Ä–º–∏–ª–∏ –º–µ—Å—è—á–Ω—ã–π –±–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ ChatGPT, –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é –¥–æ–ª–∂–Ω–∞ –ø–æ—è–≤–∏—Ç—å—Å—è –∫–Ω–æ–ø–∫–∞ \"–ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å –±–æ—Ç–æ–º\", –∞ –≤ —á–∞—Ç–∞—Ö —É –≤–∞—Å –±–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –ø–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª—É", {keyboard: keyboard.build(current_keyboard)})
            }
            catch (e)
            {
                await api.SendLogs(context, "BuildersAndControlsScripts/SubscribeToTalking", e)
            }
        })
    }

    async TrainUnit(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                const arrToObj = (arr) =>
                {
                    let obj = {}
                    for(const e of arr)
                    {
                        obj[e[0]] = e[1]
                    }
                    return obj
                }
                const detachments = await Army.findAll({where: {ownerId: context.country.id, ownerType: "country"}})
                if(detachments.length === 0)
                {
                    await context.send("‚ö† –ì–ú-—ã –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –≤–∞–º –æ—Ç—Ä—è–¥—ã", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                let request = [context.country.GetResources() + "\n\n"]
                let page = 0
                const kb = []
                for(const det of detachments)
                {
                    let type = await UnitType.findOne({where: {id: det.dataValues.typeId}})
                    if(!type) continue
                    let unit = await UnitClass.findOne({where: {id: det.dataValues.classId}})
                    if(!unit) continue
                    if(type.dataValues.barracksLVL > context.country.barracksLevel) continue
                    kb.push([det.dataValues.name, "ID" + det.dataValues.id])
                    request[page] += "üü¢ –û—Ç—Ä—è–¥ " + det.dataValues.name + "\n"
                    request[page] += "üíÇ‚Äç‚ôÇ –Æ–Ω–∏—Ç " + unit.dataValues.name + "\n"
                    request[page] += "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: " + det.dataValues.count + "\n"
                    request[page] += "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞ –æ–¥–Ω–æ–≥–æ –≥—Ä–∞–∂–¥–∞–Ω–∏–Ω–∞: " + type.dataValues.citizenPrice + "\n"
                    request[page] += "–¢–∏–ø: " + type.dataValues.name + "\n"
                    request[page] += "–û–ø–∏—Å–∞–Ω–∏–µ: " + unit.dataValues.description + "\n"
                    request[page] += "–ë–æ–µ–≤–æ–π –æ–ø—ã—Ç: " + det.dataValues.explanation + "\n"
                    request[page] += "–î–æ—Å—Ç—É–ø–µ–Ω —Å –∫–∞–∑–∞—Ä–º—ã " + type.dataValues.barracksLVL + " —É—Ä–æ–≤–Ω—è" + "\n"
                    request[page] += "üí∏ –°—Ç–æ–∏–º–æ—Å—Ç—å (–∑–∞ –æ–¥–∏–Ω):\n" + NameLibrary.GetPrice(JSON.parse(type.dataValues.price))
                    request[page] += "üí∏ –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ (–∑–∞ –æ–¥–∏–Ω):\n" + NameLibrary.GetPrice(JSON.parse(type.dataValues.service))
                    request[page] += "\n\n"
                    if(request[page].length > 3500)
                    {
                        page ++
                        request[page] = ""
                    }
                }
                if(kb.length === 0)
                {
                    await context.send(`‚ö† –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —é–Ω–∏—Ç–æ–≤ –¥–ª—è –∫–∞–∑–∞—Ä–º—ã ${context.country.barracksLevel} —É—Ä–æ–≤–Ω—è`, {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                for(const part of request)
                {
                    await context.send(part)
                }
                let types = []
                for(const det of detachments) {if(!types.includes(det.dataValues.typeId)) types.push(det.dataValues.typeId)}
                types = await UnitType.findAll({where: {id: types}})
                types = arrToObj(types.map(key => {return [key.dataValues.id, key.dataValues]}))
                let detachment = await InputManager.KeyboardBuilder(context, "–í—ã–±–µ—Ä–∏—Ç–µ, –∫–∞–∫–æ–π –æ—Ç—Ä—è–¥ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ø–æ–ª–Ω–∏—Ç—å", kb, current_keyboard)
                if(!detachment) return resolve()
                detachment = Data.ParseButtonID(detachment)
                detachment = detachments.filter(u => {return u.dataValues.id === detachment})[0]
                const population = await PlayerStatus.count({where: {citizenship: context.country.id}})
                let usedUnitPos = 0
                for(const det of detachments)
                {
                    if(detachment.dataValues.id === det.dataValues.id) continue
                    usedUnitPos += Math.ceil(det.dataValues.count / types[det.dataValues.typeId].citizenPrice)
                }
                usedUnitPos = (population - usedUnitPos) * types[detachment.dataValues.typeId].citizenPrice
                if(usedUnitPos <= 0)
                {
                    await context.send("‚ö† –£ –≤–∞—Å —Å–ª–∏—à–∫–æ–º –º–∞–ª–æ –≥—Ä–∞–∂–¥–∞–Ω –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –æ—Ç—Ä—è–¥–∞", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                const count = await InputManager.InputInteger(context, "–í–≤–µ–¥–∏—Ç–µ —Å–∫–æ–ª—å–∫–æ —é–Ω–∏—Ç–æ–≤ –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å, –æ—Ç 1 –¥–æ " + (usedUnitPos - detachment.dataValues.count), 1, usedUnitPos - detachment.dataValues.count)
                if(!count) return resolve()
                if(!context.country.CanPay(NameLibrary.PriceMultiply(JSON.parse(types[detachment.dataValues.typeId].price), count)))
                {
                    await context.send("üö´ –í –±—é–¥–∂–µ—Ç–µ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç —Ä–µ—Å—É—Ä—Å–æ–≤ –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ —Ç–∞–∫–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —é–Ω–∏—Ç–æ–≤", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                const accept = await InputManager.InputBoolean(context, `–í—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å ${count} —é–Ω–∏—Ç–æ–≤ –≤ –æ—Ç—Ä—è–¥ "${detachment.dataValues.name}"\n\n–≠—Ç–æ –±—É–¥–µ—Ç —Å—Ç–æ–∏—Ç—å:\n${NameLibrary.GetPrice(NameLibrary.PriceMultiply(JSON.parse(types[detachment.dataValues.typeId].price), count))}\n\n–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?`, current_keyboard)
                if(!accept)
                {
                    await context.send("üö´ –û—Ç–º–µ–Ω–µ–Ω–æ", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                await Data.AddCountryResources(context.country.id, NameLibrary.PriceMultiply(JSON.parse(types[detachment.dataValues.typeId].price), count))
                detachment.set({count: detachment.dataValues.count + count})
                await detachment.save()
                await context.send("‚úÖ –û—Ç—Ä—è–¥—ã –ø–æ–ø–æ–ª–Ω–µ–Ω—ã", {keyboard: keyboard.build(current_keyboard)})
            }
            catch (e)
            {
                await api.SendLogs(context, "BuildersAndControlsScripts/SubscribeToTalking", e)
            }
        })
    }

    async RefuseUnit(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                const detachments = await Army.findAll({where: {ownerId: context.country.id, ownerType: "country"}})
                if(detachments.length === 0)
                {
                    await context.send("‚ö† –ì–ú-—ã –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –≤–∞–º –æ—Ç—Ä—è–¥—ã", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                let request = [context.country.GetResources() + "\n\n"]
                let page = 0
                const kb = []
                for(const det of detachments)
                {
                    let type = await UnitType.findOne({where: {id: det.dataValues.typeId}})
                    if(!type) continue
                    let unit = await UnitClass.findOne({where: {id: det.dataValues.classId}})
                    if(!unit) continue
                    if(det.dataValues.count <= 0) continue
                    kb.push([unit.dataValues.name, "ID" + unit.dataValues.id])
                    request[page] += "üü¢ –û—Ç—Ä—è–¥ " + det.dataValues.name + "\n"
                    request[page] += "üíÇ‚Äç‚ôÇ –Æ–Ω–∏—Ç " + unit.dataValues.name + "\n"
                    request[page] += "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: " + det.dataValues.count + "\n"
                    request[page] += "–¢–∏–ø: " + type.dataValues.name + "\n"
                    request[page] += "–ë–æ–µ–≤–æ–π –æ–ø—ã—Ç: " + det.dataValues.explanation + "\n"
                    request[page] += "üí∏ –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ (–∑–∞ –æ–¥–∏–Ω):\n" + NameLibrary.GetPrice(JSON.parse(type.dataValues.service))
                    request[page] += "üí∏ –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ (–ø–æ–ª–Ω–æ–µ):\n" + NameLibrary.GetPrice(NameLibrary.PriceMultiply(JSON.parse(type.dataValues.service), det.dataValues.count))
                    request[page] += "\n\n"
                    if(request[page].length > 3500)
                    {
                        page ++
                        request[page] = ""
                    }
                }
                if(kb.length === 0)
                {
                    await context.send(`‚ö† –í—Å–µ –æ—Ç—Ä—è–¥—ã –ø—É—Å—Ç—ã`, {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                for(const part of request)
                {
                    await context.send(part)
                }
                let detachment = await InputManager.KeyboardBuilder(context, "–í—ã–±–µ—Ä–∏—Ç–µ, –∫–∞–∫–æ–π –æ—Ç—Ä—è–¥ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–æ–∫—Ä–∞—Ç–∏—Ç—å", kb, current_keyboard)
                if(!detachment) return resolve()
                detachment = Data.ParseButtonID(detachment)
                detachment = detachments.filter(u => {return u.dataValues.id === detachment})[0]

                let count = await InputManager.InputInteger(context, `–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —é–Ω–∏—Ç–æ–≤ (—Å–∫–æ–ª—å–∫–æ –∏—Ö –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –ø–æ—Å–ª–µ —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è)`, current_keyboard, 0, detachment.dataValues.count)
                if(count === null) return resolve()
                const accept = await InputManager.InputBoolean(context, `–í—ã —Ö–æ—Ç–∏—Ç–µ —Å–æ–∫—Ä–∞—Ç–∏—Ç—å ${detachment.dataValues.count - count} —é–Ω–∏—Ç–æ–≤ –æ—Ç—Ä—è–¥–∞ ${detachment.dataValues.name}, –æ—Å—Ç–∞–Ω–µ—Ç—Å—è ${count}\n\n–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?`, current_keyboard)
                if(!accept)
                {
                    await context.send("üö´ –û—Ç–º–µ–Ω–µ–Ω–æ", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                detachment.set({count: count})
                await detachment.save()
                await context.send("‚úÖ –û—Ç—Ä—è–¥ —Å–æ–∫—Ä–∞—â–µ–Ω", {keyboard: keyboard.build(current_keyboard)})
            }
            catch (e)
            {
                await api.SendLogs(context, "BuildersAndControlsScripts/SubscribeToTalking", e)
            }
        })
    }

    async TrainDetachment(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                const arrToObj = (arr) =>
                {
                    let obj = {}
                    for(const e of arr)
                    {
                        obj[e[0]] = e[1]
                    }
                    return obj
                }
                const detachments = await Army.findAll({where: {ownerId: context.country.id, ownerType: "country"}})
                if(detachments.length === 0)
                {
                    await context.send("‚ö† –ì–ú-—ã –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –≤–∞–º –æ—Ç—Ä—è–¥—ã", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                let types = []
                for(const det of detachments) {if(!types.includes(det.dataValues.typeId)) types.push(det.dataValues.typeId)}
                types = await UnitType.findAll({where: {id: types}})
                types = arrToObj(types.map(key => {return [key.dataValues.id, key.dataValues]}))
                let request = [context.country.GetResources() + "\n\n"]
                let page = 0
                const kb = []
                let now = new Date()
                for(const det of detachments)
                {
                    let unit = await UnitClass.findOne({where: {id: det.dataValues.classId}})
                    if(!unit) continue
                    let city = await City.findOne({where: {id: det.dataValues.location}})
                    if(!city) continue
                    if(det.dataValues.count <= 0) continue
                    let trainEnd = new Date(det.dataValues.trainEndTime)
                    request[page] += "üü¢ –û—Ç—Ä—è–¥ " + det.dataValues.name + "\n"
                    request[page] += "üíÇ‚Äç‚ôÇ –Æ–Ω–∏—Ç " + unit.dataValues.name + "\n"
                    request[page] += "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: " + det.dataValues.count + "\n"
                    request[page] += "–¢–∏–ø: " + types[det.dataValues.typeId]?.name + "\n"
                    if(now - trainEnd <= 0)
                    {
                        request[page] += "–î–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ " + NameLibrary.ParseFutureTime(trainEnd)
                        request[page] += "\n\n"
                        continue
                    }
                    if(city.dataValues.countryID !== context.country.id)
                    {
                        request[page] += "‚ö† –û—Ç—Ä—è–¥ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤–Ω–µ —Ñ—Ä–∞–∫—Ü–∏–∏, –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å"
                        request[page] += "\n\n"
                        continue
                    }
                    kb.push([unit.dataValues.name, "ID" + unit.dataValues.id])
                    request[page] += "\n\n"
                    if(request[page].length > 3500)
                    {
                        page ++
                        request[page] = ""
                    }
                }
                if(kb.length === 0)
                {
                    await context.send(`‚ö† –í—Å–µ –æ—Ç—Ä—è–¥—ã –ø—É—Å—Ç—ã –∏–ª–∏ —Ç—Ä–µ–Ω–∏—Ä—É—é—Ç—Å—è –∏–ª–∏ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –∑–∞ –≥—Ä–∞–Ω–∏—Ü–µ–π —Ñ—Ä–∞–∫—Ü–∏–∏`, {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                for(const part of request)
                {
                    await context.send(part)
                }
                let detachment = await InputManager.KeyboardBuilder(context, "–í—ã–±–µ—Ä–∏—Ç–µ, –∫–∞–∫–æ–π –æ—Ç—Ä—è–¥ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è", kb, current_keyboard)
                if(!detachment) return resolve()
                detachment = Data.ParseButtonID(detachment)
                detachment = detachments.filter(u => {return u.dataValues.id === detachment})[0]
                if(!context.country.CanPay(NameLibrary.ReversePrice(NameLibrary.PriceMultiply(JSON.parse(types[detachment.dataValues.typeId].service), detachment.dataValues.count))))
                {
                    await context.send(`‚ö† –í –±—é–¥–∂–µ—Ç–µ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç —Ä–µ—Å—É—Ä—Å–æ–≤ –¥–ª—è –æ–ø–ª–∞—Ç—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏`, {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                const accept = await InputManager.InputBoolean(context, `–í—Ä–µ–º—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –æ—Ç—Ä—è–¥–∞ 1 –Ω–µ–¥–µ–ª—è, –≤–æ –≤—Ä–µ–º—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –æ—Ç—Ä—è–¥—ã –±—É–¥—É—Ç –∑–∞–º–æ—Ä–æ–∂–µ–Ω—ã, —Ü–µ–Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ - –Ω–µ–¥–µ–ª—å–Ω–æ–µ —Å–Ω–∞–±–∂–µ–Ω–∏–µ –æ—Ç—Ä—è–¥–∞, –∞ –∏–º–µ–Ω–Ω–æ:\n${NameLibrary.GetPrice(NameLibrary.PriceMultiply(JSON.parse(types[detachment.dataValues.typeId].service), detachment.dataValues.count))}\n\n–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?`, current_keyboard)
                if(!accept)
                {
                    await context.send("üö´ –û—Ç–º–µ–Ω–µ–Ω–æ", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                now.setDate(now.getDate() + 7)
                detachment.set({trainEndTime: now, experience: detachment.dataValues.experience + 2})
                await detachment.save()
                await Data.AddCountryResources(context.country.id, NameLibrary.ReversePrice(NameLibrary.PriceMultiply(JSON.parse(types[detachment.dataValues.typeId].service), detachment.dataValues.count)))
                await context.send("‚úÖ –û—Ç—Ä—è–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É", {keyboard: keyboard.build(current_keyboard)})
            }
            catch (e)
            {
                await api.SendLogs(context, "BuildersAndControlsScripts/SubscribeToTalking", e)
            }
        })
    }

    async UpgradeBarak(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                if(context.country.barracksLevel >= 4)
                {
                    await context.send("‚úÖ –ö–∞–∑–∞—Ä–º–∞ —É–∂–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —É–ª—É—á—à–µ–Ω–∞", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                await context.send(`2Ô∏è‚É£ –£–ª—É—á—à–µ–Ω–∏–µ –¥–ª—è –∫–∞–∑–∞—Ä–º—ã —Ñ—Ä–∞–∫—Ü–∏–∏ ${context.country.GetName(context.player.platform === "IOS")}:\n ${context.country.barracksLevel} —É—Ä–æ–≤–µ–Ω—å => ${context.country.barracksLevel + 1} —É—Ä–æ–≤–µ–Ω—å\n${NameLibrary.GetPrice(Prices["barracks_lvl" + (context.country.barracksLevel + 1)])}`)
                if(!context.country.CanPay(Prices["barracks_lvl" + (context.country.barracksLevel + 1)]))
                {
                    await context.send("‚ö† –í –±—é–¥–∂–µ—Ç–µ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç —Ä–µ—Å—É—Ä—Å–æ–≤.", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                const accept = await InputManager.InputBoolean(context, "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?", current_keyboard)
                if(!accept)
                {
                    await context.send("üö´ –û—Ç–º–µ–Ω–µ–Ω–æ.", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                await Data.AddCountryResources(context.country.id, Prices["barracks_lvl" + (context.country.barracksLevel + 1)])
                context.country.barracksLevel += 1
                await Country.update({barracksLevel: context.country.barracksLevel}, {where: {id: context.country.id}})
                await context.send(`‚úÖ –ö–∞–∑–∞—Ä–º–∞ —É–ª—É—á—à–µ–Ω–∞ –¥–æ ${context.country.barracksLevel} —É—Ä–æ–≤–Ω—è.`, {keyboard: keyboard.build(current_keyboard)})
            }
            catch (e)
            {
                await api.SendLogs(context, "BuildersAndControlsScripts/SubscribeToTalking", e)
            }
        })
    }

    async UnitsExpenses(context)
    {
        return new Promise(async (resolve) => {
            try
            {
                const army = await Army.findAll({where: {ownerId: context.country.id, ownerType: "country"}})
                let prices = []
                if(army.length === 0)
                {
                    await context.send("‚ö† –ì–ú-—ã –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –≤–∞–º –æ—Ç—Ä—è–¥—ã")
                    return resolve()
                }
                for(const dec of army)
                {
                    let type = await UnitType.findOne({where: {id: dec.dataValues.typeId}})
                    if(!type) continue
                    type = JSON.parse(type.dataValues.service)
                    prices.push(NameLibrary.PriceMultiply(type, dec.dataValues.count))
                }
                await context.send("üí∏ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è –≤ –Ω–µ–¥–µ–ª—é:\n" + NameLibrary.GetPrice(NameLibrary.PriceSum(prices)))
                return resolve()
            }
            catch (e)
            {
                await api.SendLogs(context, "BuildersAndControlsScripts/SubscribeToTalking", e)
            }
        })
    }

    async GetAllUserResources(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                const keys = await Keys.findAll({where: {ownerID: context.player.id}})
                if(keys.length === 0)
                {
                    await context.send("‚ö† –£ –≤–∞—Å –Ω–µ—Ç —Å–≤–æ–∏—Ö –ø–æ—Å—Ç—Ä–æ–µ–∫ –≤ —ç—Ç–æ–º –≥–æ—Ä–æ–¥–µ")
                    return resolve()
                }
                let request = "‚Ñπ –î–æ–±—ã—á–∞ –∏–∑ –≤–∞—à–∏—Ö –ø–æ—Å—Ç—Ä–æ–µ–∫:\n\n"
                let flag = false
                let isVoid = true
                const time = new Date()
                const future = new Date()
                future.setHours(future.getHours() + 4)
                let extraction = {}
                let tax = {}
                let countryIncome = 0
                let extract = 0
                let resource = ""
                let isProperty = false
                for(let i = 0, j = 0; i < Data.buildings[context.player.location]?.length; i++)
                {
                    if(Data.buildings[context.player.location][i].ownerType === "user" && Data.buildings[context.player.location][i].type.match(/wheat|stone|wood|iron|silver/))
                    {
                        isProperty = false
                        for(const key of keys)
                        {
                            if(key.dataValues.houseID === Data.buildings[context.player.location][i].id && !Data.buildings[context.player.location][i]?.isFreezing)
                            {
                                isProperty = true
                                break
                            }
                        }
                        if(!isProperty) continue
                        flag = true
                        j++
                        request += "\n" + (j) + ": " + NameLibrary.GetBuildingType(Data.buildings[context.player.location][i].type) + " \"" + Data.buildings[context.player.location][i].name + "\" "
                        if(Data.buildings[context.player.location][i].lastActivityTime - time <= 0)
                        {
                            isVoid = false
                            resource = Data.buildings[context.player.location][i].type.replace("building_of_", "")
                            extract = Data.buildings[context.player.location][i].GetExtraction()
                            countryIncome = Math.round(extract * (Data.GetCountryForCity(context.player.location).privateBuildingTax / 100))
                            extract -= countryIncome
                            request += ` - –¥–æ–±—ã—Ç–æ ${extract} (–Ω–∞–ª–æ–≥ ${countryIncome})`
                            Data.buildings[context.player.location][i].lastActivityTime = future
                            await Data.buildings[context.player.location][i].SaveWorkTime()
                            extraction[resource] = extraction[resource] ? extraction[resource] + extract : extract
                            tax[resource] = tax[resource] ? tax[resource] + countryIncome : countryIncome
                        }
                        else
                        {
                            request += " - —á–µ—Ä–µ–∑ " + NameLibrary.ParseFutureTime(Data.buildings[context.player.location][i].lastActivityTime)
                        }
                    }
                }
                if(!flag)
                {
                    await context.send("‚ö† –£ –≤–∞—Å –Ω–µ—Ç –ø–æ—Å—Ç—Ä–æ–µ–∫ –¥–ª—è –¥–æ–±—ã—á–∏ —Ä–µ—Å—É—Ä—Å–æ–≤ –≤ —ç—Ç–æ–º –≥–æ—Ä–æ–¥–µ.", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                if(!isVoid)
                {
                    const city = context.player.location
                    if(Data.timeouts["user_timeout_resources_ready_" + context.player.id])
                    {
                        clearTimeout(Data.timeouts["user_timeout_resources_ready_" + context.player.id].timeout)
                        delete Data.timeouts["user_timeout_resources_ready_" + context.player.id]
                    }
                    Data.timeouts["user_timeout_resources_ready_" + context.player.id] = {
                        type: "user_timeout",
                        subtype: "resources_ready",
                        userId: context.player.id,
                        cityID: city,
                        time: future,
                        timeout: setTimeout(async () =>
                        {
                            await context.send(`‚úÖ –í–∞—à–∏ –ø–æ—Å—Ç—Ä–æ–π–∫–∏ –≤ –≥–æ—Ä–æ–¥–µ ${Data.cities[city].name} –∑–∞–≤–µ—Ä—à–∏–ª–∏ –¥–æ–±—ã—á—É —Ä–µ—Å—É—Ä—Å–æ–≤, –∞ —ç—Ç–æ –∑–Ω–∞—á–∏—Ç —á—Ç–æ —Å–Ω–æ–≤–∞ –ø–æ—Ä–∞ —Å–æ–±–∏—Ä–∞—Ç—å —Ä–µ—Å—É—Ä—Å—ã!`)
                            delete Data.timeouts["country_timeout_resources_ready_" + context.player.id]
                        }, 14400000)
                    }
                }
                request += isVoid ? "" : (`\n\n–î–æ–±—ã—Ç–æ –≤—Å–µ–≥–æ (–ø–æ—Å–ª–µ –≤–∑—è—Ç–∏—è –Ω–∞–ª–æ–≥–∞ ${Data.GetCountryForCity(context.player.location).privateBuildingTax}%):\n` + NameLibrary.GetPrice(extraction))
                await Data.AddPlayerResources(context.player.id, extraction)
                await Data.AddCountryResources(context.player.countryID, tax)
                await context.send(request)
            }
            catch (e)
            {
                await api.SendLogs(context, "BuildersAndControlsScripts/GetAllUserResources", e)
            }
        })
    }

    async CountryNotes(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                const kb = [
                    ["‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É", "add_note"],
                    ["üìú –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–º–µ—Ç–∫–∏", "remove_note"]
                ]
                const action = await InputManager.KeyboardBuilder(context, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", kb, current_keyboard)
                if(!action) return resolve()
                action === "add_note" && await this.AddCountryNote(context, current_keyboard)
                action === "remove_note" && await this.ViewCountryNotes(context, current_keyboard)
                return resolve()
            }
            catch (e)
            {
                await api.SendLogs(context, "BuildersAndControlsScripts/ChangeUnitRating", e)
            }
        })
    }

    async ViewCountryNotes(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                let country = await InputManager.KeyboardBuilder(context, "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ—Ä–∞–∫—Ü–∏—é", Data.GetCountryButtons(), current_keyboard)
                if(!country) return resolve()
                country = Data.ParseButtonID(country)
                country = Data.countries[country]
                let request = [""]
                let page = 0
                let messages = await sequelize.query(`SELECT "note", "createdAt" FROM "country-notes" WHERE "countryID"=${country.id} ORDER BY id DESC LIMIT 10`)
                messages = messages[0]
                if(messages.length > 0)
                {
                    for (let i = messages.length - 1; i >= 0; i--)
                    {
                        request[page] += "üî∏ –ó–∞–º–µ—Ç–∫–∞ –æ—Ç " + NameLibrary.ParseDateTime(messages[i].createdAt) + ":\n‚Ñπ " + messages[i].note + "\n\n"
                        if(request[page].length > 3500)
                        {
                            page ++
                            request[page] = ""
                        }
                    }
                }
                else
                {
                    request[page] += "–ù–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ"
                }
                for(const msg of request)
                {
                    await context.send(msg, {keyboard: keyboard.build(current_keyboard)})
                }
                return resolve()
            }
            catch (e)
            {
                await api.SendLogs(context, "BuildersAndControlsScripts/ChangeUnitRating", e)
            }
        })
    }

    async AddCountryNote(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                let country = await InputManager.KeyboardBuilder(context, "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ—Ä–∞–∫—Ü–∏—é", Data.GetCountryButtons(), current_keyboard)
                if(!country) return resolve()
                country = Data.ParseButtonID(country)
                country = Data.countries[country]
                const note = await InputManager.InputString(context, "–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–≤—É—é –∑–∞–º–µ—Ç–∫—É (–¥–æ 4096 —Å–∏–º–≤–æ–ª–æ–≤)", current_keyboard, 2, 4096)
                if(!note) return resolve()
                await CountryNotes.create({
                    countryID: country.id,
                    note: note
                })
                await context.send("‚úÖ –ó–∞–º–µ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞", {keyboard: keyboard.build(current_keyboard)})
                return resolve()
            }
            catch (e)
            {
                await api.SendLogs(context, "BuildersAndControlsScripts/ChangeUnitRating", e)
            }
        })
    }

    async CityNotes(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                const kb = [
                    ["‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É", "add_note"],
                    ["üìú –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–º–µ—Ç–∫–∏", "remove_note"]
                ]
                const action = await InputManager.KeyboardBuilder(context, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", kb, current_keyboard)
                if(!action) return resolve()
                action === "add_note" && await this.AddCityNote(context, current_keyboard)
                action === "remove_note" && await this.ViewCityNotes(context, current_keyboard)
                return resolve()
            }
            catch (e)
            {
                await api.SendLogs(context, "BuildersAndControlsScripts/ChangeUnitRating", e)
            }
        })
    }

    async ViewCityNotes(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                let country = await InputManager.KeyboardBuilder(context, "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ—Ä–∞–∫—Ü–∏—é", Data.GetCountryButtons(), current_keyboard)
                if(!country) return resolve()
                country = Data.ParseButtonID(country)
                country = Data.countries[country]
                let city = await InputManager.KeyboardBuilder(context, "–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥", Data.GetCityForCountryButtons(country.id), current_keyboard)
                if(!city) return resolve()
                city = Data.ParseButtonID(city)
                let request = [""]
                let page = 0
                let messages = await sequelize.query(`SELECT "note", "createdAt" FROM "city-notes" WHERE "cityID"=${city} ORDER BY id DESC LIMIT 10`)
                messages = messages[0]
                if(messages.length > 0)
                {
                    for (let i = messages.length - 1; i >= 0; i--)
                    {
                        request[page] += "üî∏ –ó–∞–º–µ—Ç–∫–∞ –æ—Ç " + NameLibrary.ParseDateTime(messages[i].createdAt) + ":\n‚Ñπ " + messages[i].note + "\n\n"
                        if(request[page].length > 3500)
                        {
                            page ++
                            request[page] = ""
                        }
                    }
                }
                else
                {
                    request[page] += "–ù–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ"
                }
                for(const msg of request)
                {
                    await context.send(msg, {keyboard: keyboard.build(current_keyboard)})
                }
                return resolve()
            }
            catch (e)
            {
                await api.SendLogs(context, "BuildersAndControlsScripts/ChangeUnitRating", e)
            }
        })
    }

    async AddCityNote(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                let country = await InputManager.KeyboardBuilder(context, "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ—Ä–∞–∫—Ü–∏—é", Data.GetCountryButtons(), current_keyboard)
                if(!country) return resolve()
                country = Data.ParseButtonID(country)
                country = Data.countries[country]
                let city = await InputManager.KeyboardBuilder(context, "–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥", Data.GetCityForCountryButtons(country.id), current_keyboard)
                if(!city) return resolve()
                city = Data.ParseButtonID(city)
                const note = await InputManager.InputString(context, "–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–≤—É—é –∑–∞–º–µ—Ç–∫—É (–¥–æ 4096 —Å–∏–º–≤–æ–ª–æ–≤)", current_keyboard, 2, 4096)
                if(!note) return resolve()
                await CityNotes.create({
                    cityID: city,
                    note: note
                })
                await context.send("‚úÖ –ó–∞–º–µ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞", {keyboard: keyboard.build(current_keyboard)})
                return resolve()
            }
            catch (e)
            {
                await api.SendLogs(context, "BuildersAndControlsScripts/ChangeUnitRating", e)
            }
        })
    }

    async PlayerNotes(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                const kb = [
                    ["‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É", "add_note"],
                    ["üìú –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–º–µ—Ç–∫–∏", "remove_note"]
                ]
                const action = await InputManager.KeyboardBuilder(context, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", kb, current_keyboard)
                if(!action) return resolve()
                action === "add_note" && await this.AddPlayerNote(context, current_keyboard)
                action === "remove_note" && await this.ViewPlayerNotes(context, current_keyboard)
                return resolve()
            }
            catch (e)
            {
                await api.SendLogs(context, "BuildersAndControlsScripts/ChangeUnitRating", e)
            }
        })
    }

    async ViewPlayerNotes(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                let player = await InputManager.InputUser(context, "–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä–æ–∫–∞", current_keyboard)
                if(!player) return resolve()
                let request = [""]
                let page = 0
                let messages = await sequelize.query(`SELECT "note", "createdAt" FROM "player-notes" WHERE "playerID"=${player.dataValues.id} ORDER BY id DESC LIMIT 10`)
                messages = messages[0]
                if(messages.length > 0)
                {
                    for (let i = messages.length - 1; i >= 0; i--)
                    {
                        request[page] += "üî∏ –ó–∞–º–µ—Ç–∫–∞ –æ—Ç " + NameLibrary.ParseDateTime(messages[i].createdAt) + ":\n‚Ñπ " + messages[i].note + "\n\n"
                        if(request[page].length > 3500)
                        {
                            page ++
                            request[page] = ""
                        }
                    }
                }
                else
                {
                    request[page] += "–ù–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ"
                }
                for(const msg of request)
                {
                    await context.send(msg, {keyboard: keyboard.build(current_keyboard)})
                }
                return resolve()
            }
            catch (e)
            {
                await api.SendLogs(context, "BuildersAndControlsScripts/ChangeUnitRating", e)
            }
        })
    }

    async AddPlayerNote(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                let player = await InputManager.InputUser(context, "–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä–æ–∫–∞", current_keyboard)
                if(!player) return resolve()
                const note = await InputManager.InputString(context, "–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–≤—É—é –∑–∞–º–µ—Ç–∫—É (–¥–æ 4096 —Å–∏–º–≤–æ–ª–æ–≤)", current_keyboard, 2, 4096)
                if(!note) return resolve()
                await PlayerNotes.create({
                    playerID: player.dataValues.id,
                    note: note
                })
                await context.send("‚úÖ –ó–∞–º–µ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞", {keyboard: keyboard.build(current_keyboard)})
                return resolve()
            }
            catch (e)
            {
                await api.SendLogs(context, "BuildersAndControlsScripts/ChangeUnitRating", e)
            }
        })
    }

    async SetCountryVariable(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                let country = await InputManager.KeyboardBuilder(context, "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ—Ä–∞–∫—Ü–∏—é", Data.GetCountryButtons(), current_keyboard)
                if(!country) return resolve()
                country = Data.ParseButtonID(country)
                country = Data.countries[country]
                let kb = [
                    ["üèÜ –°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å", "stability"],
                    ["üåæ –ö—Ä–µ—Å—Ç—å—è–Ω—Å—Ç–≤–æ", "peasantry"],
                    ["üôè –†–µ–ª–∏–≥–∏—è", "religion"],
                    ["üëë –ê—Ä–∏—Å—Ç–æ–∫—Ä–∞—Ç–∏—è", "aristocracy"],
                    ["‚öî –í–æ–µ–Ω–Ω—ã–µ", "military"],
                    ["üí∞ –ö—É–ø–µ—á–µ—Å—Ç–≤–æ", "merchants"]
                ]
                if(process.env["MINIROUND"])
                {
                    kb = kb.concat([
                        ["ü•ï –û—á–∫–∏ –ë–ª–∞–≥–æ—Å–æ—Å—Ç–æ—è–Ω–∏—è", "blessingScore"],
                        ["üí± –û—á–∫–∏ –≠–∫–æ–Ω–æ–º–∏–∫–∏", "economicScore"],
                        ["üß® –õ–æ—è–ª—å–Ω–æ—Å—Ç—å", "loyalty"],
                        ["üìà –ü–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥", "income"]
                    ])
                }
                const variable = await InputManager.KeyboardBuilder(context, "–í—ã–±–µ—Ä–∏—Ç–µ, –∫–∞–∫—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", kb, current_keyboard)
                if(!variable) return resolve()
                const count = await InputManager.InputInteger(context, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ", current_keyboard)
                if(count === null) return resolve()
                country[variable] = count
                let obj = {}
                obj[variable] = count
                await Country.update(obj, {where: {id: country.id}})
                await context.send("‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞", {keyboard: keyboard.build(current_keyboard)})
                return resolve()
            }
            catch (e)
            {
                await api.SendLogs(context, "BuildersAndControlsScripts/ChangeUnitRating", e)
            }
        })
    }

    async FreezeBuilding(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                let city = await InputManager.KeyboardBuilder(context, "1Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥", Data.GetCityButtons(), current_keyboard)
                if(!city) return resolve()
                city = Data.ParseButtonID(city)
                if(!Data.buildings[city])
                {
                    await context.send("üö´ –í –≥–æ—Ä–æ–¥–µ –Ω–µ—Ç –∑–¥–∞–Ω–∏–π", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                const buttons = []
                for(let i = 0; i < Data.buildings[city].length; i++)
                {
                    buttons.push([Data.buildings[city][i].name, "ID" + i])
                }
                let build = await InputManager.KeyboardBuilder(context, "2Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –∑–¥–∞–Ω–∏–µ", buttons, current_keyboard)
                if(!build) return resolve()
                build = Data.ParseButtonID(build)
                build = Data.buildings[city][build]
                let freeze = await InputManager.InputBoolean(context, `–°–µ–π—á–∞—Å ${build.name} ${build.isFreezing ? "" : "–Ω–µ "}–∑–∞–º–æ—Ä–æ–∂–µ–Ω–æ`, current_keyboard, keyboard.freezeButton, keyboard.unfreezeButton)
                build.isFreezing = freeze
                await Buildings.update({freezing: freeze}, {where: {id: build.id}})
                await context.send(freeze ? "‚úÖ –ü–æ—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–º–æ—Ä–æ–∂–µ–Ω–∞" : "‚úÖ –ü–æ—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞–∑–º–æ—Ä–æ–∂–µ–Ω–∞", {keyboard: keyboard.build(current_keyboard)})
                return resolve()
            }
            catch (e)
            {
                await api.SendLogs(context, "BuildersAndControlsScripts/GetBuildingInfo", e)
            }
        })
    }

    async KillPlayer(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                let player = await InputManager.InputUser(context, "–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä–æ–∫–∞ –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —É–±–∏—Ç—å", current_keyboard)
                if(!player) return resolve()
                if(NameLibrary.RoleEstimator(player.dataValues.role) !== 0)
                {
                    await context.send("üö´ –£–±–∏—Ç—å –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –ø—Ä–æ—Å—Ç–æ–≥–æ –∏–≥—Ä–æ–∫–∞", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                let res = await PlayerResources.findOne({where: {id: player.dataValues.id}})
                let status = await PlayerStatus.findOne({where: {id: player.dataValues.id}})
                let info = await PlayerInfo.findOne({where: {id: player.dataValues.id}})
                let lastWill = await LastWills.findOne({where: {userID: player.dataValues.id}})
                let will = false
                if(lastWill)
                {
                    let user = await Player.findOne({where: {id: lastWill.dataValues.successorID}})
                    will = await InputManager.InputBoolean(context, `–£ –∏–≥—Ä–æ–∫–∞ *id${player.dataValues.id}(${player.dataValues.nick}) –µ—Å—Ç—å –∑–∞–≤–µ—â–∞–Ω–∏–µ:\n\n–ö–æ–º—É: *id${user.dataValues.id}(${user.dataValues.nick})\n–¢–µ–∫—Å—Ç: ${lastWill.dataValues.text}\n\n–í—ã–ø–æ–ª–Ω–∏—Ç—å —É—Å–ª–æ–≤–∏—è –∑–∞–≤–µ—â–∞–Ω–∏—è?`, current_keyboard)
                }
                let access = await InputManager.InputBoolean(context, `–£–±–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∏–≥—Ä–æ–∫–∞ *id${player.dataValues.id}(${player.dataValues.nick})?`, current_keyboard)
                if(!access) return resolve()
                await Country.update({leaderID: null}, {where: {leaderID: player.dataValues.id}})
                if(will)
                {
                    await Data.AddPlayerResources(lastWill.dataValues.successorID, {
                        money: res.dataValues.money,
                        stone: res.dataValues.stone,
                        wood: res.dataValues.wood,
                        wheat: res.dataValues.wheat,
                        iron: res.dataValues.iron,
                        silver: res.dataValues.silver,
                        diamond: res.dataValues.diamond
                    })
                    await Buildings.update({ownerID: lastWill.dataValues.successorID}, {where: {ownerID: player.dataValues.id}})
                    await Keys.update({ownerID: lastWill.dataValues.successorID}, {where: {ownerID: player.dataValues.id}})
                }
                else
                {
                    await Data.AddCountryResources(status.dataValues.countryID, {
                        money: res.dataValues.money,
                        stone: res.dataValues.stone,
                        wood: res.dataValues.wood,
                        wheat: res.dataValues.wheat,
                        iron: res.dataValues.iron,
                        silver: res.dataValues.silver,
                        diamond: res.dataValues.diamond
                    })
                    await Buildings.update({ownerID: 0, ownerType: "country"}, {where: {ownerID: player.dataValues.id}})
                    await Keys.destroy({where: {ownerID: player.dataValues.id}})
                }
                if(info.dataValues?.marriedID)
                {
                    await PlayerInfo.update({marriedID: null}, {where: {id: info.dataValues.marriedID}})
                    if(Data.users[info.dataValues.marriedID])
                    {
                        Data.users[info.dataValues.marriedID].isMarried = false
                        Data.users[info.dataValues.marriedID].marriedID = null
                    }
                    await api.SendMessage(player.dataValues.id, `üïä –í–∞—à${player.dataValues.gender ? " –º—É–∂" : "–∞ –∂–µ–Ω–∞"} –±—ã–ª —É–±–∏—Ç, –≤—ã —Å—Ç–∞–ª–∏ ${player.dataValues.gender ? "–≤–¥–æ–≤–æ–π" : "–≤–¥–æ–≤—Ü–æ–º"}`)
                }
                await Player.destroy({where: {id: player.dataValues.id}})
                await PlayerStatus.destroy({where: {id: player.dataValues.id}})
                await PlayerResources.destroy({where: {id: player.dataValues.id}})
                await PlayerInfo.destroy({where: {id: player.dataValues.id}})
                await api.SendMessage(player.dataValues.id, `üíÄ –í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–∂ –±—ã–ª —É–±–∏—Ç, –≤—Å—ë –≤–∞—à–µ –∏–º—É—â–µ—Å—Ç–≤–æ ${will ? "–ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –ø–æ –∑–∞–≤–µ—â–∞–Ω–∏—é" : "–ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –≤ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–æ–µ –≤–ª–∞–¥–µ–Ω–∏–µ"}`)
                if(Data.users[info.dataValues.marriedID]) delete Data.users[info.dataValues.marriedID]
                await context.send("‚úÖ –ü–µ—Ä—Å–æ–Ω–∞–∂ –∏–≥—Ä–æ–∫–∞ —É–±–∏—Ç")
                return resolve()
            }
            catch (e)
            {
                await api.SendLogs(context, "BuildersAndControlsScripts/KillPlayer", e)
            }
        })
    }

    async ChangeCountryModer(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                let country = await InputManager.KeyboardBuilder(context, "1Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ —Ñ—Ä–∞–∫—Ü–∏—é", Data.GetCountryButtons(), current_keyboard)
                if(!country) return resolve()
                country = Data.ParseButtonID(country)
                country = Data.countries[country]
                if(country.moderID)
                {
                    let kb = [
                        [keyboard.secondaryButton(["–ù–∞–∑–Ω–∞—á–∏—Ç—å", "set"]), keyboard.secondaryButton(["–£–±—Ä–∞—Ç—å", "remove"])]
                    ]
                    let action = await InputManager.ChooseButton(context, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", kb)
                    if(action === "remove")
                    {
                        await api.SendMessage(country.moderID, `‚úÖ –í—ã –±—ã–ª–∏ —Å–Ω—è—Ç—ã —Å –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ —Ñ—Ä–∞–∫—Ü–∏–∏ ${country.GetName()}`)
                        country.moderID = null
                        await Country.update({moderID: null}, {where: {id: country.id}})
                        await context.send("‚úÖ –£ —Ñ—Ä–∞–∫—Ü–∏–∏ –±–æ–ª—å—à–µ –Ω–µ—Ç –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞", {keyboard: keyboard.build(current_keyboard)})
                        return resolve()
                    }
                }
                let player = await InputManager.InputUser(context, "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤–æ–≥–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞", current_keyboard)
                if(!player) return resolve()
                country.moderID = player.dataValues.id
                await Country.update({moderID: player.dataValues.id}, {where: {id: country.id}})
                await api.SendMessage(player.dataValues.id, `‚úÖ –í—ã –±—ã–ª–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º —Ñ—Ä–∞–∫—Ü–∏–∏ ${country.GetName()}`)
                await context.send("‚úÖ –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä –Ω–∞–∑–Ω–∞—á–µ–Ω", {keyboard: keyboard.build(current_keyboard)})
                return resolve()
            }
            catch (e)
            {
                await api.SendLogs(context, "BuildersAndControlsScripts/ChangeCountryModer", e)
            }
        })
    }

    async GetTGCode(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                if(context.player.TGID)
                {
                    await context.send("‚ö† –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç", {keyboard: keyboard.build(current_keyboard(context))})
                    return resolve()
                }
                const code = NameLibrary.GetRandomNumb(10000000, 99999999)
                Data.TGcodes[code] = context.player.id
                await context.send(`‚úÖ –î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –≤–∞–º –ø—Ä–∏–≤—è–∑–∞—Ç—å —Å–≤–æ–π —Ç–µ–ª–µ–≥—Ä–∞–º–º –∞–∫–∫–∞—É–Ω—Ç –∫ –≤–∞—à–µ–º—É –ø—Ä–æ—Ñ–∏–ª—é –≤ –±–æ—Ç–µ, –≤–∞–º –Ω–∞–¥–æ –≤–≤–µ—Å—Ç–∏ –∫–æ–¥ –≤ –õ–° —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç—É.\n\n–í–æ—Ç –≤–∞—à –∫–æ–¥:`)
                await context.send(code)
                await context.send(`–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ –∞–¥—Ä–µ—Å—É ${Data.variables["TGbotLink"]} –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ—Ç—É —Å–≤–æ–π –∫–æ–¥.`, {keyboard: keyboard.build(current_keyboard(context))})

                return resolve()
            }
            catch (e)
            {
                await api.SendLogs(context, "BuildersAndControlsScripts/GetTGCode", e)
            }
        })
    }

    async IntelligenceService(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                if(context.country.gold < 30)
                {
                    await context.send(`üö´ –í –±—é–¥–∂–µ—Ç–µ –≤–∞—à–µ–π —Ñ—Ä–∞–∫—Ü–∏–∏ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –∑–æ–ª–æ—Ç—ã—Ö –º–æ–Ω–µ—Ç, –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Å—Ç–∏ —Ä–∞–∑–≤–µ–¥–∫—É —Ç—Ä–µ–±—É–µ—Ç—Å—è 30 –∑–æ–ª–æ—Ç—ã—Ö.`, {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                let targetCountry = await InputManager.KeyboardBuilder(context, "1Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ —Ñ—Ä–∞–∫—Ü–∏—é, –≤ –∫–æ—Ç–æ—Ä–æ–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–≤–µ—Å—Ç–∏ —Ä–∞–∑–≤–µ–¥–∫—É", Data.GetCountryButtons(context.country.id), current_keyboard)
                if(!targetCountry) return resolve()
                targetCountry = Data.ParseButtonID(targetCountry)
                targetCountry = Data.countries[targetCountry]
                let access = await InputManager.InputBoolean(context, `–°–µ–π—á–∞—Å –≤ –±—é–¥–∂–µ—Ç–µ –≤–∞—à–µ–π —Ñ—Ä–∞–∫—Ü–∏–∏ ${context.country.gold} –∑–æ–ª–æ—Ç—ã—Ö –º–æ–Ω–µ—Ç, –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —Ä–∞–∑–≤–µ–¥–∫–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è 30 –∑–æ–ª–æ—Ç—ã—Ö, –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å?`, current_keyboard)
                if(!access)
                {
                    await context.send(`üö´ –û—Ç–º–µ–Ω–µ–Ω–æ`, {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                await Data.AddCountryGold(context.country.id, -30)
                await LongTimeouts.create({
                    type: "intelligence_service",
                    time: 7,
                    fromCountry: context.country.id,
                    toCountry: targetCountry.id
                })
                await context.send(`‚úÖ –í–∞—à–∞ —à–ø–∏–æ–Ω—Å–∫–∞—è —Å–µ—Ç—å –ø–æ–ª—É—á–∏–ª–∞ –∫–æ–º–∞–Ω–¥—É –≤—ã–≤–µ–¥–∞—Ç—å —Å–µ–∫—Ä–µ—Ç—ã —Ñ—Ä–∞–∫—Ü–∏–∏ ${targetCountry.GetName(context.player.platform === "IOS")}, —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏—Ö —Ä–∞–±–æ—Ç—ã –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —á–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é`, {keyboard: keyboard.build(current_keyboard)})
                return resolve()
            }
            catch (e)
            {
                await api.SendLogs(context, "BuildersAndControlsScripts/IntelligenceService", e)
            }
        })
    }

    async Implementation(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                if(context.country.gold < 10)
                {
                    await context.send(`üö´ –í –±—é–¥–∂–µ—Ç–µ –≤–∞—à–µ–π —Ñ—Ä–∞–∫—Ü–∏–∏ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –∑–æ–ª–æ—Ç—ã—Ö –º–æ–Ω–µ—Ç, –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Å—Ç–∏ –≤–Ω–µ–¥—Ä–µ–Ω–∏–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –º–∏–Ω–∏–º—É–º 10 –∑–æ–ª–æ—Ç—ã—Ö.`, {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                let targetCountry = await InputManager.KeyboardBuilder(context, "1Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ —Ñ—Ä–∞–∫—Ü–∏—é, –≤ –∫–æ—Ç–æ—Ä–æ–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–≤–µ—Å—Ç–∏ –≤–Ω–µ–¥—Ä–µ–Ω–∏–µ", Data.GetCountryButtons(context.country.id), current_keyboard)
                if(!targetCountry) return resolve()
                targetCountry = Data.ParseButtonID(targetCountry)
                targetCountry = Data.countries[targetCountry]
                let maxAgents = Math.min(Math.floor(context.country.gold / 10), 3)
                const agentsCount = await InputManager.InputInteger(context, `–°–∫–æ–ª—å–∫–æ –∞–≥–µ–Ω—Ç–æ–≤ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –≤–Ω–µ–¥—Ä–µ–Ω–∏–µ (–æ—Ç 1 –¥–æ ${maxAgents}), —É—á—Ç–∏—Ç–µ —á—Ç–æ —Å—Ç–æ–∏–º–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–∞–∂–¥–æ–≥–æ –∞–≥–µ–Ω—Ç–∞ —ç—Ç–æ –º–∏–Ω–∏–º—É–º 10 –∑–æ–ª–æ—Ç—ã—Ö –º–æ–Ω–µ—Ç, —á–µ–º –±–æ–ª—å—à–µ –∞–≥–µ–Ω—Ç–æ–≤, —Ç–µ–º –≤—ã—à–µ —à–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏, –µ—Å–ª–∏ –≤–∞—à–∞ —Å–µ—Ç—å –≤—Å–∫—Ä–æ–µ—Ç—Å—è, —Ç–æ –±—É–¥—É—Ç –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã –≤—Å–µ –∞–≥–µ–Ω—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –≤ —ç—Ç–æ—Ç —Ä–∞–∑.`, current_keyboard, 1, maxAgents)
                if(!agentsCount) return resolve()
                const price = await InputManager.InputInteger(context, `–°–µ–π—á–∞—Å –≤ –±—é–¥–∂–µ—Ç–µ –≤–∞—à–µ–π —Ñ—Ä–∞–∫—Ü–∏–∏ ${context.country.gold} –∑–æ–ª–æ—Ç—ã—Ö –º–æ–Ω–µ—Ç.\n\n–í–≤–µ–¥–∏—Ç–µ —Å–∫–æ–ª—å–∫–æ –∑–æ–ª–æ—Ç—ã—Ö –º–æ–Ω–µ—Ç –≤—ã –≥–æ—Ç–æ–≤—ã –∑–∞–ø–ª–∞—Ç–∏—Ç—å –∫–∞–∂–¥–æ–º—É –∞–≥–µ–Ω—Ç—É (${agentsCount === 1 ? "–æ–Ω" : "–∏—Ö"} ${agentsCount}), –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ - 10 –∑–æ–ª–æ—Ç—ã—Ö, –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∞ –±—é–¥–∂–µ—Ç–æ–º —Ñ—Ä–∞–∫—Ü–∏–∏ (${Math.floor(context.country.gold / agentsCount)} –∑–æ–ª–æ—Ç—ã—Ö), —á–µ–º –±–æ–ª—å—à–µ –∑–æ–ª–æ—Ç—ã—Ö –∑–∞–ø–ª–∞—Ç–∏—Ç—å –∑–∞ –≤–Ω–µ–¥—Ä–µ–Ω–∏–µ, —Ç–µ–º –±–æ–ª—å—à–∏–π —É—Ä–æ–Ω –ø–æ–ª—É—á–∏—Ç –≤—ã–±—Ä–∞–Ω–Ω–∞—è —Ñ—Ä–∞–∫—Ü–∏—è`, current_keyboard, 10, Math.floor(context.country.gold / agentsCount))
                if(!price) return resolve()
                await Data.AddCountryGold(context.country.id, -1 * price * agentsCount)
                await LongTimeouts.create({
                    type: "implementation",
                    time: 7,
                    fromCountry: context.country.id,
                    toCountry: targetCountry.id,
                    price: price * agentsCount,
                    parameters: agentsCount
                })
                await context.send(`‚úÖ –ê–≥–µ–Ω—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã, —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏—Ö —Ä–∞–±–æ—Ç—ã –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —á–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é`, {keyboard: keyboard.build(current_keyboard)})
                return resolve()
            }
            catch (e)
            {
                await api.SendLogs(context, "BuildersAndControlsScripts/IntelligenceService", e)
            }
        })
    }

    async BuyEconomicScore(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                const count = await InputManager.InputInteger(context, `–í—ã –º–æ–∂–µ—Ç–µ –æ–±–º–µ–Ω—è—Ç—å –∑–æ–ª–æ—Ç—ã–µ –º–æ–Ω–µ—Ç—ã –Ω–∞ –æ—á–∫–∏ —ç–∫–æ–Ω–æ–º–∏–∫–∏ —Å –∫—É—Ä—Å–æ–º 1 –∫ 1, –Ω–æ –ø–æ–ª—É—á–∏—Ç–µ –≤—ã —ç—Ç–∏ –æ—á–∫–∏ —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é –ø–æ—Å–ª–µ –≤–∫–ª–∞–¥–∞, –∏—Ç–∞–∫, —Å–∫–æ–ª—å–∫–æ –∑–æ–ª–æ—Ç—ã—Ö –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤–ª–æ–∂–∏—Ç—å –≤ —ç–∫–æ–Ω–æ–º–∏–∫—É? (–æ—Ç 1 –¥–æ ${context.country.gold})`, current_keyboard, 1, context.country.gold)
                if(!count) return resolve()
                await LongTimeouts.create({
                    type: "buy_economic_score",
                    time: 7,
                    fromCountry: context.country.id,
                    toCountry: context.country.id,
                    price: count
                })
                await Data.AddCountryGold(context.country.id, -1 * count)
                await context.send("‚úÖ –í–∫–ª–∞–¥ –≤ —ç–∫–æ–Ω–æ–º–∏–∫—É –æ—Å—É—â–µ—Å—Ç–≤–ª–µ–Ω, —á–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –æ—á–∫–∏ —ç–∫–æ–Ω–æ–º–∏–∫–∏", {keyboard: keyboard.build(current_keyboard)})
                return resolve()
            }
            catch (e)
            {
                await api.SendLogs(context, "BuildersAndControlsScripts/IntelligenceService", e)
            }
        })
    }

    async Sabotage(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                if(context.country.gold < 5)
                {
                    await context.send(`üö´ –í –±—é–¥–∂–µ—Ç–µ –≤–∞—à–µ–π —Ñ—Ä–∞–∫—Ü–∏–∏ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –∑–æ–ª–æ—Ç—ã—Ö –º–æ–Ω–µ—Ç, –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Å—Ç–∏ –≤–Ω–µ–¥—Ä–µ–Ω–∏–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –º–∏–Ω–∏–º—É–º 10 –∑–æ–ª–æ—Ç—ã—Ö.`, {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                const count = await InputManager.InputInteger(context, `–í –±—é–¥–∂–µ—Ç–µ –≤–∞—à–µ–π —Ñ—Ä–∞–∫—Ü–∏–∏ ${context.country.gold} –∑–æ–ª–æ—Ç—ã—Ö –º–æ–Ω–µ—Ç\n\n–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–≤–µ—Å—Ç–∏ —Å–∞–±–æ—Ç–∞–∂ –≤ –ª—é–±–æ–π —Ñ—Ä–∞–∫—Ü–∏–∏, –≤–æ –≤—Ä–µ–º—è —Å–∞–±–æ—Ç–∞–∂–∞ –≤–ª–æ–∂–µ–Ω–Ω—ã–µ –≤ —ç–∫–æ–Ω–æ–º–∏–∫—É –∑–æ–ª–æ—Ç—ã–µ –º–æ–Ω–µ—Ç—ã –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–ø–∞–¥—É—Ç –ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –≤–∞—à–µ–º—É –≤–∫–ª–∞–¥—É –≤ —Å–∞–±–æ—Ç–∞–∂.\n\n–í—ã –º–æ–∂–µ—Ç–µ –≤–ª–æ–∂–∏—Ç—å –æ—Ç 5 –º–æ–Ω–µ—Ç –≤ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–µ —Å–∞–±–æ—Ç–∞–∂–∞, –∏ —Å 50% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é –≤—ã –ø–æ–≤–ª–∏—è–µ—Ç–µ –Ω–∞ —ç–∫–æ–Ω–æ–º–∏–∫—É –≤—Ä–∞–≥–∞. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–æ–ª–æ—Ç—ã—Ö, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –≤–ª–æ–∂–∏—Ç–µ –≤ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–µ —Å–∞–±–æ—Ç–∞–∂–∞ –±—É–¥—É—Ç –≤–ª–∏—è—Ç—å –Ω–∞ –ø—Ä–µ—á–∏–Ω–µ–Ω–Ω—ã–π —É—â–µ—Ä–±, 1 –∑–æ–ª–æ—Ç–∞—è = 2% –æ—Ç –≤–∫–ª–∞–¥–∞ –≤ —ç–∫–æ–Ω–æ–º–∏–∫—É.`, current_keyboard, 5, context.country.gold)
                if(!count) return resolve()
                let targetCountry = await InputManager.KeyboardBuilder(context, "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ—Ä–∞–∫—Ü–∏—é, –≤ –∫–æ—Ç–æ—Ä–æ–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–≤–µ—Å—Ç–∏ —Å–∞–±–æ—Ç–∞–∂", Data.GetCountryButtons(context.country.id), current_keyboard)
                if(!targetCountry) return resolve()
                targetCountry = Data.ParseButtonID(targetCountry)
                targetCountry = Data.countries[targetCountry]
                const contribution = await LongTimeouts.findOne({where: {toCountry: targetCountry.id, type: "buy_economic_score"}})
                if(contribution && NameLibrary.GetChance(50))
                {
                    let damage = Math.round(contribution.dataValues.price * (1 - Math.min(1, count * 0.02)))
                    await LongTimeouts.update({price: damage}, {where: {id: contribution.dataValues.id}})
                    await context.send("‚úÖ –°–∞–±–æ—Ç–∞–∂ –ø—Ä–æ–≤–µ–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ", {keyboard: keyboard.build(current_keyboard)})
                    await api.GMMailing(`–§—Ä–∞–∫—Ü–∏—è ${context.country.GetName()} –ø—Ä–æ–≤–µ–ª–∞ —É—Å–ø–µ—à–Ω—ã–π —Å–∞–±–æ—Ç–∞–∂ –≤ —Ñ—Ä–∞–∫—Ü–∏–∏ ${targetCountry.GetName()}, –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ —á–µ–≥–æ –ø–æ—Å–ª–µ–¥–Ω—è—è –Ω–µ –ø–æ–ª—É—á–∏—Ç ${contribution.dataValues.price - damage} —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏—Ö –æ—á–∫–æ–≤ —Å–æ —Å–≤–æ–µ–≥–æ –≤–∫–ª–∞–¥–∞`)
                }
                else
                {
                    await context.send("üö´ –°–∞–±–æ—Ç–∞–∂ –ø—Ä–æ–≤–∞–ª–∏–ª—Å—è, –º–æ–∂–µ—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ", {keyboard: keyboard.build(current_keyboard)})
                }
                await Data.AddCountryGold(context.country.id, -1 * count)
                return resolve()
            }
            catch (e)
            {
                await api.SendLogs(context, "BuildersAndControlsScripts/IntelligenceService", e)
            }
        })
    }

    async Counterintelligence(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                if(context.country.gold < 10)
                {
                    await context.send(`üö´ –í –±—é–¥–∂–µ—Ç–µ –≤–∞—à–µ–π —Ñ—Ä–∞–∫—Ü–∏–∏ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –∑–æ–ª–æ—Ç—ã—Ö –º–æ–Ω–µ—Ç, –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Å—Ç–∏ –∫–æ–Ω—Ç—Ä—Ä–∞–∑–≤–µ–¥–∫—É —Ç—Ä–µ–±—É–µ—Ç—Å—è –º–∏–Ω–∏–º—É–º 10 –∑–æ–ª–æ—Ç—ã—Ö.`, {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                const count = await InputManager.InputInteger(context, `–í –±—é–¥–∂–µ—Ç–µ –≤–∞—à–µ–π —Ñ—Ä–∞–∫—Ü–∏–∏ ${context.country.gold} –∑–æ–ª–æ—Ç—ã—Ö –º–æ–Ω–µ—Ç\n\n–ü—Ä–æ–≤–æ–¥—è –∫–æ–Ω—Ç—Ä—Ä–∞–∑–≤–µ–¥–∫—É –≤—ã –º–æ–∂–µ—Ç–µ —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º —à–∞–Ω—Å–æ–º –ø–æ–º–µ—à–∞—Ç—å –¥–∏–≤–µ—Ä—Å–∏–æ–Ω–Ω–æ–π –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥—Ä—É–≥–∏—Ö —Ñ—Ä–∞–∫—Ü–∏–π, —á–µ–º –±–æ–ª—å—à–µ –º–æ–Ω–µ—Ç –≤—ã –≤–ª–æ–∂–∏—Ç–µ, —Ç–µ–º –º–µ–Ω—å—à–µ —É—â–µ—Ä–±–∞ –±—É–¥–µ—Ç –Ω–∞–Ω–µ—Å–µ–Ω–æ –¥–∏–≤–µ—Ä—Å–∞–Ω—Ç–∞–º–∏.\n\n–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–æ–ª–æ—Ç—ã—Ö –º–æ–Ω–µ—Ç, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å –Ω–∞ –∫–æ–Ω—Ç—Ä—Ä–∞–∑–≤–µ–¥–∫—É. (–æ—Ç 10 –¥–æ ${context.country.gold})`, current_keyboard, 10, context.country.gold)
                if(!count) return resolve()
                const enemyOperations = await LongTimeouts.findAll({where: {toCountry: context.country.id, type: ["implementation", "intelligence_service"]}})
                if(enemyOperations.length > 0)
                {
                    let doCounterFlag = true
                    let findIntelFlag = true
                    for(const intel of enemyOperations)
                    {
                        if(intel.dataValues.type === "intelligence_service")
                        {
                            await LongTimeouts.update({price: count}, {where: {id: intel.dataValues.id}})
                            doCounterFlag= false
                        }
                        if(findIntelFlag && intel.dataValues.type === "implementation")
                        {
                            if(NameLibrary.GetChance(Math.max(count, 50)))
                            {
                                await LongTimeouts.destroy({where: {id: intel.dataValues.id}})
                                await context.send(`‚úÖ –ö–æ–Ω—Ç—Ä—Ä–∞–∑–≤–µ–¥–∫–∞ –≤—ã—è–≤–∏–ª–∞ —à–ø–∏–æ–Ω—Å–∫—É—é —Å–µ—Ç—å —Ñ—Ä–∞–∫—Ü–∏–∏ ${Data.countries[intel.dataValues.fromCountry]?.GetName()}, —à–ø–∏–æ–Ω—ã –ª–∏–∫–≤–∏–¥–∏—Ä–æ–≤–∞–Ω—ã`)
                                if(Data.countries[intel.dataValues.fromCountry])
                                {
                                    await api.SendMessage(Data.countries[intel.dataValues.fromCountry].leaderID, `‚ö† –í–∞—à–∞ —à–ø–∏–æ–Ω—Å–∫–∞—è —Å–µ—Ç—å –≤ —Ñ—Ä–∞–∫—Ü–∏–∏ ${context.country.GetName()} –≤—Å–∫—Ä—ã–ª–∞—Å—å, —à–ø–∏–æ–Ω—ã –ª–∏–∫–≤–∏–¥–∏—Ä–æ–≤–∞–Ω—ã`)
                                }
                                await api.GMMailing(`${context.country.GetName()} –ø—Ä–æ–≤–µ–ª–∞ –∫–æ–Ω—Ç—Ä—Ä–∞–∑–≤–µ–¥–∫—É, –∫–æ—Ç–æ—Ä–∞—è –≤—ã—è–≤–∏–ª–∞ —à–ø–∏–æ–Ω—Å–∫—É—é —Å–µ—Ç—å —Ñ—Ä–∞–∫—Ü–∏–∏ ${Data.countries[intel.dataValues.fromCountry]?.GetName()}, —à–ø–∏–æ–Ω—ã –ª–∏–∫–≤–∏–¥–æ—Ä–æ–≤–∞–Ω—ã`)
                            }
                            findIntelFlag = false
                        }
                        if(doCounterFlag || findIntelFlag)
                        {
                            await context.send("‚úÖ –ö–æ–Ω—Ç—Ä—Ä–∞–∑–≤–µ–¥–∫–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ, –≤—Ä–∞–∂–µ—Å–∫–∞—è —Å–µ—Ç—å –æ—Å–ª–∞–±–ª–µ–Ω–∞", {keyboard: keyboard.build(current_keyboard)})
                        }
                        else
                        {
                            await context.send("‚úÖ –ö–æ–Ω—Ç—Ä—Ä–∞–∑–≤–µ–¥–∫–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∞, –Ω–æ —Å–ª–µ–¥–æ–≤ –≤—Ä–∞–∂–µ—Å–∫–æ–≥–æ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–∞ –≤—ã—è–≤–ª–µ–Ω–æ –Ω–µ –±—ã–ª–æ", {keyboard: keyboard.build(current_keyboard)})
                        }
                    }
                }
                else
                {
                    await context.send("‚úÖ –ö–æ–Ω—Ç—Ä—Ä–∞–∑–≤–µ–¥–∫–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∞, –Ω–æ —Å–ª–µ–¥–æ–≤ –≤—Ä–∞–∂–µ—Å–∫–æ–≥–æ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–∞ –≤—ã—è–≤–ª–µ–Ω–æ –Ω–µ –±—ã–ª–æ", {keyboard: keyboard.build(current_keyboard)})
                }
                await Data.AddCountryGold(context.country.id, -1 * count)
                return resolve()
            }
            catch (e)
            {
                await api.SendLogs(context, "BuildersAndControlsScripts/IntelligenceService", e)
            }
        })
    }

    async NewEmpireRule(context, current_keyboard)
    {
        return new Promise(async (resolve) =>
        {
            try
            {
                if (context.country.gold < 5)
                {
                    await context.send(`üö´ –í –±—é–¥–∂–µ—Ç–µ –≤–∞—à–µ–π —Ñ—Ä–∞–∫—Ü–∏–∏ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –∑–æ–ª–æ—Ç—ã—Ö –º–æ–Ω–µ—Ç, –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∏–º–ø–µ—Ä—Å–∫–æ–≥–æ –∑–∞–∫–æ–Ω–∞ —É —Ç—Ä–µ–±—É–µ—Ç—Å—è –º–∏–Ω–∏–º—É–º 5 –∑–æ–ª–æ—Ç—ã—Ö.`, {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                const count = await InputManager.InputInteger(context, `–í –±—é–¥–∂–µ—Ç–µ –≤–∞—à–µ–π —Ñ—Ä–∞–∫—Ü–∏–∏ ${context.country.gold} –∑–æ–ª–æ—Ç—ã—Ö –º–æ–Ω–µ—Ç\n\n–ü—É–±–ª–∏–∫–∞—Ü–∏—è –∏–º–ø–µ—Ä—Å–∫–æ–≥–æ –∑–∞–∫–æ–Ω–∞ —Å—Ç–æ–∏—Ç –Ω–µ –º–µ–Ω–µ–µ 5 –∑–æ–ª–æ—Ç—ã—Ö –º–æ–Ω–µ—Ç, –¥—Ä—É–≥–∏–µ —Ñ—Ä–∞–∫—Ü–∏–∏ –º–æ–≥—É—Ç –æ—Ç–º–µ–Ω–∏—Ç—å –µ–≥–æ –ø—É–±–ª–∏–∫–∞—Ü–∏—é–∑–∞–ø–ª–∞—Ç–∏–≤ —Ö–æ—Ç—è –±—ã –Ω–∞ 1 –∑–æ–ª–æ—Ç—É—é –º–æ–Ω–µ—Ç—É –±–æ–ª—å—à–µ, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–æ–ª–æ—Ç—ã—Ö –º–æ–Ω–µ—Ç, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤–ª–æ–∂–∏—Ç—å –≤ –ø—É–±–ª–∏–∫–∞—Ü–∏—é –∑–∞–∫–æ–Ω–∞ (–æ—Ç 5 –¥–æ ${context.country.gold})`, current_keyboard, 5, context.country.gold)
                if (!count) return resolve()
                const ruleName = await InputManager.InputString(context, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–∫–æ–Ω–∞", current_keyboard, 1, 255)
                if(!ruleName) return resolve()
                const ruleText = await InputManager.InputString(context, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–∫–æ–Ω–∞ (–¥–æ 3000 —Å–∏–º–≤–æ–ª–æ–≤)", current_keyboard, 1, 3000)
                if(!ruleText) return resolve()
                const access = await InputManager.InputBoolean(context, `–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ:\n\n–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–∫–æ–Ω–∞: ${ruleName}\n\n–¢–µ–∫—Å—Ç –∑–∞–∫–æ–Ω–∞: ${ruleText}\n\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–æ–ª–æ—Ç—ã—Ö –º–æ–Ω–µ—Ç: ${count}\n\n–í–µ—Ä–Ω–æ?`, current_keyboard)
                if(!access)
                {
                    await context.send(`üö´ –û—Ç–º–µ–Ω–µ–Ω–æ.`, {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                const rule = await EmpireRules.create({
                    name: ruleName,
                    text: ruleText,
                    price: count
                })
                await api.GMMailing(`‚úÖ –ü—Ä–∞–≤–∏—Ç–µ–ª—å—Å—Ç–≤–æ —Ñ—Ä–∞–∫—Ü–∏–∏ ${context.country.GetName()} –ø—Ä–µ–¥–ª–æ–∂–∏–ª–æ –Ω–æ–≤—ã–π –∏–º–ø–µ—Ä—Å–∫–∏–π –∑–∞–∫–æ–Ω, –µ–≥–æ —Å—Ç–æ–∏–º–æ—Å—Ç—å —Å–æ—Å—Ç–∞–≤–∏–ª–∞ ${count} –∑–æ–ª–æ—Ç—ã—Ö –º–æ–Ω–µ—Ç, –≤–æ—Ç —Å–∞–º –∑–∞–∫–æ–Ω:\n\n–ù–∞–∑–≤–∞–Ω–∏–µ: ${ruleName}\n\n–¢–µ–∫—Å—Ç –∑–∞–∫–æ–Ω–∞: ${ruleText}\n\n–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –≥–æ–≥–æ—Å–æ–≤–∞–Ω–∏–µ –∑–∞ –ø—É–±–ª–∏–∫–∞—Ü—é?`, [
                    keyboard.positiveCallbackButton({label: "‚úÖ –ü–µ—Ä–µ–¥–∞—Ç—å –Ω–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ", payload: {command: "gm_access_rule", ruleId: rule.dataValues.id}}),
                    keyboard.negativeCallbackButton({label: "üö´ –û—Ç–∫–ª–æ–Ω–∏—Ç—å", payload: {command: "gm_decline_rule", ruleId: rule.dataValues.id, countryId: context.country.id}})
                ])
                await Data.AddCountryGold(context.country.id, -1 * count)
                await context.send("‚úÖ –ò–º–ø–µ—Ä—Å–∫–∏–π –∑–∞–∫–æ–Ω –ø—Ä–∏–Ω—è—Ç –≤ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ –ì–ú-–∞–º, –ø–æ—Å–ª–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è –Ω–∞—á–Ω–µ—Ç—Å—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ", {keyboard: keyboard.build(current_keyboard)})
                return resolve()
            }
            catch (e)
            {
                await api.SendLogs(context, "BuildersAndControlsScripts/IntelligenceService", e)
            }
        })
    }

    async ChangeEmpireBuildings(context, current_keyboard)
    {
        return new Promise(async (resolve) =>
        {
            try
            {
                const buildings = [
                    ["‚õ™ –ê–ª—å—Ç–∏—Å", "altis", Data.variables["altis"]],
                    ["üë®‚Äçüåæ –¢–æ—Ä–≥–æ–≤–∞—è –∂–µ–º—á—É–∂–∏–Ω–∞", "market", Data.variables["market"]],
                    ["üïç –°—Ç—Ä–∞–Ω–∞ –¥–≤–æ—Ä—Ü–æ–≤", "castle", Data.variables["castle"]],
                    ["üß± –í—ã—Å–æ–∫–∏–µ —Å—Ç–µ–Ω—ã", "walls", Data.variables["walls"]],
                    ["üçñ –ê –º–æ–µ–π –∂–µ–Ω–æ–π –Ω–∞–∫–æ—Ä–º–∏–ª–∏ —Ç–æ–ª–ø—É", "tavern", Data.variables["tavern"]]
                ]
                const newBuildings = await InputManager.RadioKeyboardBuilder(context, "–û—Ç–º–µ—Ç—å—Ç–µ –ø–æ—Å—Ç—Ä–æ–π–∫–∏", buildings, current_keyboard)
                if(!newBuildings) return resolve()
                for(const v of newBuildings) Data.variables[v[0]] = v[1]
                await Data.SaveVariables()
                await context.send("‚úÖ –ò–º–ø–µ—Ä—Å–∫–∏–µ –∑–¥–∞–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω—ã", {keyboard: keyboard.build(current_keyboard)})
                return resolve()
            }
            catch (e)
            {
                await api.SendLogs(context, "BuildersAndControlsScripts/IntelligenceService", e)
            }
        })
    }
}

module.exports = new BuildersAndControlsScripts()