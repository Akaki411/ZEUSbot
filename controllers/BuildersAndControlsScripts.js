const InputManager = require("./InputManager");
const Data = require("../models/CacheData");
const keyboard = require("../variables/Keyboards");
const {City, Country, PlayerStatus, Player, Warning, Ban, LastWills, Buildings,
    CountryResources, CityResources, PlayerInfo, CountryRoads, Keys
} = require("../database/Models");
const api = require("../middleware/API");
const ErrorHandler = require("../error/ErrorHandler")
const NameLibrary = require("../variables/NameLibrary")
const Prices = require("../variables/Prices")

class BuildersAndControlsScripts
{
    async NewCountry(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                //–≤–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è —Ñ—Ä–∞–∫—Ü–∏–∏
                let name = await InputManager.InputString(
                    context,
                    "1Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ—Ä–∞–∫—Ü–∏–∏ (–æ—Ç 2 –¥–æ 30 —Å–∏–º–≤–æ–ª–æ–≤):",
                    current_keyboard,
                    2,
                    30)
                if (!name) return resolve()
                while(Data.countries.includes(name))
                {
                    name = await InputManager.InputString(
                        context,
                        "‚ö† –§—Ä–∞–∫—Ü–∏—è —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.",
                        current_keyboard,
                        2,
                        30)
                    if (!name) return resolve()
                }

                //–æ–ø–∏—Å–∞–Ω–∏–µ
                const description = await InputManager.InputString(
                    context,
                    "2Ô∏è‚É£ –°–¥–µ–ª–∞–π—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ñ—Ä–∞–∫—Ü–∏–∏. (–¥–æ 1000 —Å–∏–º–≤–æ–ª–æ–≤)",
                    current_keyboard,
                    0,
                    1000
                )
                if(!description) return resolve()

                //—Ñ–æ—Ç–æ
                const preview = await InputManager.InputPhoto(
                    context,
                    `3Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è –∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏–∏.\n‚ö† –≠—Ç–æ —Ñ–æ—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–∞—Ä—É—Å–µ–ª–∏ —Å —Ñ—Ä–∞–∫—Ü–∏—è–º–∏ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –∏–≥—Ä–æ–∫–æ–≤, —Å–æ–∑–¥–∞—Ç—å —Ñ—Ä–∞–∫—Ü–∏—é –±–µ–∑ —Ñ–æ—Ç–æ - –Ω–µ–ª—å–∑—è.\n‚ö† –¢—Ä–µ–±—É–µ—Ç—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ —Å —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ–º —Å—Ç–æ—Ä–æ–Ω 13/8 (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ 650x400), –∏–Ω–∞—á–µ –±—É–¥—É—Ç –æ—à–∏–±–∫–∏ —Å –∫–∞—Ä—É—Å–µ–ª—å—é, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –≤—ã–ª–µ—Ç—É`,
                    current_keyboard)
                if (!preview) return resolve()

                //–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Ñ–æ—Ç–æ
                const welcomePhoto = await InputManager.InputPhoto(
                    context,
                    `4Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Ñ–æ—Ç–æ\n‚ö† –≠—Ç–æ —Ñ–æ—Ç–æ –±—É–¥–µ—Ç –≤—Å—Ç—Ä–µ—á–∞—Ç—å –Ω–æ–≤—ã—Ö –≥—Ä–∞–∂–¥–∞–Ω. (–§–æ—Ç–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)`,
                    current_keyboard)
                if(!welcomePhoto) return resolve()

                //–≤–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è —Å—Ç–æ–ª–∏—Ü—ã
                let capitalName = await InputManager.InputString(
                    context,
                    "5Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–æ–ª–∏—Ü—ã (–æ—Ç 2 –¥–æ 30 —Å–∏–º–≤–æ–ª–æ–≤):",
                    current_keyboard,
                    2,
                    30)
                if (!capitalName) return resolve()
                while(Data.cities.includes(capitalName))
                {
                    capitalName = await InputManager.InputString(
                        context,
                        "‚ö† –ì–æ—Ä–æ–¥ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.",
                        current_keyboard,
                        2,
                        30)
                    if (!capitalName) return resolve()
                }

                //–≤—ã–±–æ—Ä –ø—Ä–∞–≤–∏—Ç–µ–ª—è
                let leader = await InputManager.SearchUser(context, "6Ô∏è‚É£ –¢–µ–ø–µ—Ä—å –Ω—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –ø—Ä–∞–≤–∏—Ç–µ–ª—è.")
                if(!leader) return resolve()

                while(leader.dataValues.status === "leader")
                {
                    leader = await InputManager.SearchUser(context, `‚ö† *id${leader.dataValues.id}(${leader.dataValues.nick}) —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –ø—Ä–∞–≤–∏—Ç–µ–ª–µ–º.`)
                    if(!leader) return resolve()
                }

                //–≥—Ä—É–ø–ø–∞
                let groupId = await InputManager.InputGroup(
                    context,
                    `7Ô∏è‚É£ –£–∫–∞–∂–∏—Ç–µ –≥—Ä—É–ø–ø—É —ç—Ç–æ–π —Ñ—Ä–∞–∫—Ü–∏–∏.`,
                    current_keyboard)
                if(!groupId) return resolve()

                //–±—é–¥–∂–µ—Ç
                let budget = await InputManager.InputInteger(
                    context,
                    "8Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—ã–π –±—é–¥–∂–µ—Ç —Ñ—Ä–∞–∫—Ü–∏–∏.",
                    current_keyboard
                )
                if (!budget) return resolve()

                //—Ä–µ—Å—É—Ä—Å—ã
                let resources = await InputManager.ChooseButton(
                    context,
                    "9Ô∏è‚É£ –ì–ª–∞–≤–Ω—ã–π —Ä–µ—Å—É—Ä—Å —Ñ—Ä–∞–∫—Ü–∏–∏:",
                    [
                        [keyboard.woodButton, keyboard.stoneButton],
                        [keyboard.ironButton, keyboard.copperButton, keyboard.silverButton]
                    ],
                    current_keyboard
                )
                if(!resources) return resolve()
                let resName = NameLibrary.GetResourceName(resources)

                const wheat = await InputManager.InputInteger(context, "üåæ –í–≤–µ–¥–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—ã–π –∑–∞–ø–∞—Å –∑–µ—Ä–Ω–∞", current_keyboard, 0)
                if(!wheat) return resolve()

                const wood = await InputManager.InputInteger(context, "ü™µ –í–≤–µ–¥–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—ã–π –∑–∞–ø–∞—Å –¥—Ä–µ–≤–µ—Å–∏–Ω—ã", current_keyboard, 0)
                if(!wheat) return resolve()

                const stone = await InputManager.InputInteger(context, "‚õ∞ –í–≤–µ–¥–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—ã–π –∑–∞–ø–∞—Å –∫–∞–º–Ω—è", current_keyboard, 0)
                if(!wheat) return resolve()

                const iron = await InputManager.InputInteger(context, "üåë –í–≤–µ–¥–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—ã–π –∑–∞–ø–∞—Å –∂–µ–ª–µ–∑–∞", current_keyboard, 0)
                if(!wheat) return resolve()

                const copper = await InputManager.InputInteger(context, "ü™ô –í–≤–µ–¥–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—ã–π –∑–∞–ø–∞—Å –º–µ–¥–∏", current_keyboard, 0)
                if(!wheat) return resolve()

                const silver = await InputManager.InputInteger(context, "ü•à –í–≤–µ–¥–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—ã–π –∑–∞–ø–∞—Å —Å–µ—Ä–µ–±—Ä–∞", current_keyboard, 0)
                if(!wheat) return resolve()

                const diamonds = await InputManager.InputInteger(context, "üíé –í–≤–µ–¥–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—ã–π –∑–∞–ø–∞—Å –∞–ª–º–∞–∑–æ–≤", current_keyboard, 0)
                if(!diamonds) return resolve()

                await context.send(`–ò—Ç–∞–∫, –º—ã –∏–º–µ–µ–º —Å–ª–µ–¥—É—é—â–µ–µ:\n–ù–∞–∑–≤–∞–Ω–∏–µ: ${name}\n–°—Ç–æ–ª–∏—Ü–∞: ${capitalName}\n–ì—Ä—É–ø–ø–∞: *public${groupId}(${name})\n–ü—Ä–∞–≤–∏—Ç–µ–ª—å: *id${leader.dataValues.id}(${leader.dataValues.nick})\n–ë—é–¥–∂–µ—Ç: ${budget}\n–†–µ—Å—É—Ä—Å: ${resName}\n–ó–µ—Ä–Ω–æ: ${wheat} –î—Ä–µ–≤–µ—Å–∏–Ω–∞: ${wood} –ö–∞–º–µ–Ω—å: ${stone}\n–ñ–µ–ª–µ–∑–æ: ${iron} –ú–µ–¥—å: ${copper} –°–µ—Ä–µ–±—Ä–æ: ${silver}`)
                let accept = await InputManager.InputBoolean(context, "–í–µ—Ä–Ω–æ?", current_keyboard)
                if(!accept)
                {
                    await context.send('‚õî –í–≤–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω.', {
                        keyboard: keyboard.build(current_keyboard)
                    })
                    return resolve()
                }

                const city = await City.create({
                    leaderID: leader.dataValues.id,
                    name: capitalName,
                    description: `–°—Ç–æ–ª–∏—Ü–∞ —Ñ—Ä–∞–∫—Ü–∏–∏ *public${groupId}(${name})`,
                    photoURL: preview,
                    isCapital: true,
                    maxBuildings: 8
                })
                await CityResources.create({
                    id: city.dataValues.id
                })
                const country = await Country.create({
                    name: name,
                    description: description,
                    photoURL: preview,
                    welcomePhotoURL: welcomePhoto,
                    leaderID: leader.dataValues.id,
                    groupID: groupId,
                    resources: resources,
                    capital: capitalName,
                    capitalID: city.dataValues.id
                })
                await CountryResources.create({
                    id: country.dataValues.id,
                    money: budget,
                    wheat: wheat,
                    stone: stone,
                    wood: wood,
                    iron: iron,
                    copper: copper,
                    silver: silver,
                    diamond: diamonds
                })
                const leaderStatus = await PlayerStatus.findOne({where: {id: leader.dataValues.id}})
                city.set({
                    countryID: country.dataValues.id,
                    capitalID: country.dataValues.id
                })
                leader.set({
                    status: leader.dataValues.status === "worker" ? "worker" : "leader"
                })
                leaderStatus.set({
                    location: city.dataValues.id,
                    citizenship: country.dataValues.id
                })
                await city.save()
                await leader.save()
                await leaderStatus.save()

                if(Data.users[leader.dataValues.id]?.status !== "worker") Data.users[leader.dataValues.id].status = "leader"
                await Data.LoadCountries()
                await Data.LoadCities()
                await api.SendMessage(
                    leader.dataValues.id,
                    `‚úÖ –í—ã –±—ã–ª–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –ø—Ä–∞–≤–∏—Ç–µ–ª–µ–º —Ç–æ–ª—å–∫–æ —á—Ç–æ —Å–æ–∑–¥–∞–Ω–Ω–æ–π —Ñ—Ä–∞–∫—Ü–∏–∏ ${name}\n–í–∞—à —Å—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ "–ü—Ä–∞–≤–∏—Ç–µ–ª—å"`)
                context.send("‚úÖ –§—Ä–∞–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞!\n–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –¥–æ—Ä–æ–≥–∏ —á–µ—Ä–µ–∑ –ì–ú-–º–µ–Ω—é", {keyboard: keyboard.build(current_keyboard)})
                return resolve()
            }
            catch (e)
            {
                await ErrorHandler.SendLogs(context, "–°–æ–∑–¥–∞–Ω–∏–µ —Ñ—Ä–∞–∫—Ü–∏–∏", e)
            }
        })
    }

    async ChangeRole(context, current_keyboard, tools)
    {
        return new Promise(async (resolve) => {
            try
            {
                const user = await InputManager.SearchUser(context, "1Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä–æ–∫–∞.", current_keyboard)
                if (!user) return resolve()
                if(NameLibrary.RoleEstimator(context.player.role) <= NameLibrary.RoleEstimator(user.dataValues.role))
                {
                    context.send(`‚õî –í—ã –Ω–µ –∏–º–µ–µ—Ç–µ –ø—Ä–∞–≤–∞ –∏–∑–º–µ–Ω—è—Ç—å —Ä–æ–ª—å –∏–≥—Ä–æ–∫–∞ *id${user.dataValues.id}(${user.dataValues.nick}).`, {
                        keyboard: keyboard.build(current_keyboard)
                    })
                    return resolve()
                }

                let giveRoleKB = [
                    [keyboard.playerButton, keyboard.moderatorButton, keyboard.GMButton],
                    [],
                    [keyboard.cancelButton]
                ]
                context.player.role.match(/owner|project_head|support/) && giveRoleKB[1].push(keyboard.adminButton)
                context.player.role.match(/owner|project_head/) && giveRoleKB[1].push(keyboard.supportButton)
                context.player.role.match(/owner/) && giveRoleKB[1].push(keyboard.projectHeadButton)

                let role = await InputManager.ChooseButton(
                    context,
                    `‚úÖ –í—ã–±—Ä–∞–Ω –∏–≥—Ä–æ–∫ —Å –Ω–∏–∫–æ–º *id${user.dataValues.id}(${user.dataValues.nick})\n2Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é —Ä–æ–ª—å.`,
                    giveRoleKB,
                    current_keyboard)
                if(role === "cancel")
                {
                    context.send('‚õî –ü–æ–∏—Å–∫ –∏–≥—Ä–æ–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω.', {
                        keyboard: keyboard.build([
                            [keyboard.statsButton, keyboard.controlsButton],
                            [keyboard.giveRoleButton, keyboard.sqlButton],
                            [keyboard.backButton]
                        ])
                    })
                    return resolve()
                }

                user.set({role: role})
                await user.save()
                let newRole = NameLibrary.GetRoleName(role)
                if(Data.users[user.dataValues.id])
                {
                    Data.users[user.dataValues.id].role = role
                    Data.users[user.dataValues.id].state = tools.StayInStartScreen
                }

                await api.SendMessage(
                    user.dataValues.id,
                    `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å *id${context.player.id}(${context.player.nick}) –Ω–∞–∑–Ω–∞—á–∏–ª –≤–∞—Å –Ω–∞ —Ä–æ–ª—å: ${newRole}`,
                    tools.GetStartMenuKeyboard(context))
                await context.send(`–ò–≥—Ä–æ–∫ *id${user.dataValues.id}(${user.dataValues.nick}) –Ω–∞–∑–Ω–∞—á–µ–Ω –Ω–∞ —Ä–æ–ª—å: ${newRole}`, {
                    keyboard: keyboard.build(current_keyboard)
                })
                return resolve()
            }
            catch (e)
            {
                await ErrorHandler.SendLogs(context, "–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–æ–ª–∏", e)
            }
        })
    }

    async AppointLeader(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                // –í—ã–±–æ—Ä –≥–æ—Å-–≤–∞
                const buttons = Data.GetCountryButtons()
                if(buttons.length === 0)
                {
                    await context.send("‚ö† –ù–∏ –æ–¥–Ω–∞ —Ñ—Ä–∞–∫—Ü–∏—è –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞.")
                    return resolve()
                }
                let country = await InputManager.KeyboardBuilder(context, "1Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–æ", buttons, current_keyboard)
                if(!country) return resolve()
                country = Data.ParseButtonID(country)

                //–ü–æ–∏—Å–∫ –∏–≥—Ä–æ–∫–∞
                let newLeader = await InputManager.SearchUser(context, "2Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
                if(!newLeader) return resolve()

                //–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
                if(newLeader.dataValues.status === "leader")
                {
                    await context.send(`‚ö† *id${newLeader.dataValues.id}(${newLeader.dataValues.nick}) —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –ø—Ä–∞–≤–∏—Ç–µ–ª–µ–º!`)
                    return resolve()
                }
                const access = await InputManager.InputBoolean(context, "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?", current_keyboard)
                if(!access) return

                const newLeaderStatus = await PlayerStatus.findOne({where: {id: newLeader.dataValues.id}})
                const newLeaderCountry = await Country.findOne({where: {id: country}})
                const newLeaderCountryCapital = await City.findOne({where: {capitalID: country}})
                const oldLeader = await Player.findOne({where: {id: newLeaderCountry.dataValues.leaderID}})

                oldLeader.set({
                    status: "citizen"
                })
                newLeader.set({
                    status: "leader"
                })
                newLeaderStatus.set({
                    location: newLeaderCountry.dataValues.id,
                    citizenship: newLeaderCountry.dataValues.id
                })
                newLeaderCountry.set({
                    leaderID: newLeader.dataValues.id
                })
                newLeaderCountryCapital.set({
                    leaderID: newLeader.dataValues.id
                })
                await newLeader.save()
                await newLeaderStatus.save()
                await newLeaderCountry.save()
                await newLeaderCountryCapital.save()

                await api.SendMessage(
                    oldLeader.dataValues.id,
                    `‚ö† –í—ã –±—ã–ª–∏ —Å–Ω—è—Ç—ã —Å –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ –ø—Ä–∞–≤–∏—Ç–µ–ª—è —Ñ—Ä–∞–∫—Ü–∏–∏ ${newLeaderCountry.dataValues.name}\nü™™ –í–∞—à —Å—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ "–ì—Ä–∞–∂–¥–∞–Ω–∏–Ω"`)
                await api.SendMessage(
                    newLeader.dataValues.id,
                    `‚úÖ –í—ã –±—ã–ª–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –ø—Ä–∞–≤–∏—Ç–µ–ª–µ–º —Ñ—Ä–∞–∫—Ü–∏–∏ ${newLeaderCountry.dataValues.name}\nüëë –í–∞—à —Å—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ "–ü—Ä–∞–≤–∏—Ç–µ–ª—å"`)

                context.send(`‚úÖ *id${newLeader.dataValues.id}(${newLeader.dataValues.nick}) –Ω–∞–∑–Ω–∞—á–µ–Ω –ø—Ä–∞–≤–∏—Ç–µ–ª–µ–º —Ñ—Ä–∞–∫—Ü–∏–∏ ${newLeaderCountry.dataValues.name}`, {keyboard: keyboard.build(current_keyboard)})
                return resolve()
            }
            catch (e)
            {
                await ErrorHandler.SendLogs(context, "–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–∞–≤–∏—Ç–µ–ª—è", e)
            }
        })
    }

    async ShowListWarnings(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                const user = await InputManager.SearchUser(context, "1Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.", current_keyboard)
                if(!user) return resolve()

                const warnings = await Warning.findAll({where: {id: user.dataValues.id}})
                if(warnings.length === 0)
                {
                    context.send(`‚ö† –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è *id${user.dataValues.id}(${user.dataValues.nick}) –Ω–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π`,
                        {
                            keyboard: keyboard.build(current_keyboard)
                        })
                    return resolve()
                }
                for (const key of warnings)
                {
                    await context.send(`–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ—Ç ${key.dataValues.createdAt}:\n–ù–∏–∫: *id${user.dataValues.id}(${user.dataValues.nick})\n–ü—Ä–∏—á–∏–Ω–∞: ${key.dataValues.reason}\n–ü–æ–¥—Ä–æ–±–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞: ${key.dataValues.explanation}`)
                }
                return resolve()
            }
            catch (e)
            {
                await ErrorHandler.SendLogs(context, "–í—ã–≤–æ–¥ —Å–ø–∏—Å–∫–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π.", e)
            }
        })
    }

    async ShowBan(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                const user = await InputManager.SearchUser(context, "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.", current_keyboard)
                if(!user) return resolve()
                if(!user.dataValues.isBanned)
                {
                    context.send(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å *id${user.dataValues.id}(${user.dataValues.nick}) –Ω–µ –∑–∞–±–∞–Ω–µ–Ω.`,
                        {
                            keyboard: keyboard.build(current_keyboard)
                        })
                    return resolve()
                }

                const ban = await Ban.findOne({where: {id: user.dataValues.id}})
                if(!ban)
                {
                    if (Data.users[user.dataValues.id]) Data.users[user.dataValues.id].isBanned = false
                    user.set({
                        isBanned: false
                    })
                    await user.save()
                    await api.SendMessage(user.dataValues.id, "‚ö† –í—ã –±—ã–ª–∏ —Ä–∞–∑–±–∞–Ω–µ–Ω—ã.")
                    context.send(`–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è *id${user.dataValues.id}(${user.dataValues.nick}) –Ω–µ—Ç –±–∞–Ω–∞. –í–∏–¥–∏–º–æ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, —Å–µ–π—á–∞—Å –≤—Å–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ.`)
                    return resolve()
                }
                await context.send(`–ë–∞–Ω –æ—Ç ${ban.dataValues.createdAt}:\n–ù–∏–∫: *id${user.dataValues.id}(${user.dataValues.nick})\n–ü—Ä–∏—á–∏–Ω–∞: ${ban.dataValues.reason}\n–ü–æ–¥—Ä–æ–±–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞: ${ban.dataValues.explanation}`)
                return resolve()
            }
            catch (e)
            {
                await ErrorHandler.SendLogs(context, "–ë–∞–Ω—ã", e)
            }
        })
    }

    async CreateLastWill(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                const user = await InputManager.SearchUser(context, "1Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É –∑–∞–≤–µ—â–∞–µ—Ç–µ –≤—Å–µ —Å–≤–æ–µ –∏–º—É—â–µ—Å—Ç–≤–æ", current_keyboard)
                if(!user) return resolve()
                if(user.dataValues.id === context.player.id)
                {
                    context.send("‚ö† –£–∫–∞–∑—ã–≤–∞—Ç—å —Å–µ–±—è –≤ –∑–∞–≤–µ—â–∞–Ω–∏–∏ –∑–∞–ø—Ä–µ—â–µ–Ω–æ.")
                    return resolve()
                }

                const lastWillText = await InputManager.InputString(context, "2Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–≤–µ—â–∞–Ω–∏—è. –≠—Ç–æ—Ç —Ç–µ–∫—Å—Ç –±—É–¥–µ—Ç –≤–∏–¥–µ–Ω —Ç–æ–ª—å–∫–æ –≤–∞–º –∏ –Ω–∞—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—é –ø–æ—Å–ª–µ –≤–∞—à–µ–π —Å–º–µ—Ä—Ç–∏. (–¥–æ 1000 —Å–∏–º–≤–æ–ª–æ–≤)", current_keyboard, 0, 1000)
                if (!lastWillText)
                {
                    await context.send("‚õî –û—Ç–º–µ–Ω–∞", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }

                await LastWills.create({
                    userID: context.player.id,
                    text: lastWillText,
                    successorID: user.dataValues.id
                })
                current_keyboard[0][2] = keyboard.deleteLastWillButton
                await context.send("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –∑–∞–≤–µ—â–∞–Ω–∏–µ.", {keyboard: keyboard.build(current_keyboard)})
                await api.SendMessage(user.dataValues.id, `‚úÖ –ò–≥—Ä–æ–∫ ${await NameLibrary.GetPlayerNick(context.player.id)} –¥–æ–±–∞–≤–∏–ª –≤–∞—Å –≤ —Å–≤–æ—ë –∑–∞–≤–µ—â–∞–Ω–∏–µ.`)
            }
            catch (e)
            {
                await ErrorHandler.SendLogs(context, "–ù–∞–ø–∏—Å–∞–Ω–∏–µ –∑–∞–≤–µ—â–∞–Ω–∏—è.", e)
            }
        })
    }

    async DeleteLastWill(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                const lastWill = await LastWills.findOne({where: {userID: context.player.id}})
                if(!lastWill) return resolve()
                await context.send(`*id${context.player.id}(–í–∞—à–µ) –∑–∞–≤–µ—â–∞–Ω–∏–µ:\n–ù–∞—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å: ${await NameLibrary.GetPlayerNick(lastWill.dataValues.successorID)}\n–¢–µ–∫—Å—Ç:${lastWill.dataValues.text}`)
                const success = await InputManager.InputBoolean(context, "–í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–≤–æ–µ –∑–∞–≤–µ—â–∞–Ω–∏–µ?")
                if(!success) return resolve()

                await LastWills.destroy({where: {userID: context.player.id}})
                current_keyboard[0][2] = keyboard.createLastWillButton
                await context.send("‚úÖ –ó–∞–≤–µ—â–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ.", {keyboard: keyboard.build(current_keyboard)})
                await api.SendMessage(lastWill.dataValues.successorID, `‚ö† –ò–≥—Ä–æ–∫ ${await NameLibrary.GetPlayerNick(context.player.id)} —É–¥–∞–ª–∏–ª —Å–≤–æ—ë –∑–∞–≤–µ—â–∞–Ω–∏–µ.`)
            }
            catch (e)
            {
                await ErrorHandler.SendLogs(context, "–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–≤–µ—â–∞–Ω–∏—è.", e)
            }
        })
    }

    async Relax(context, current_keyboard, scenes)
    {
        return new Promise(async (resolve) => {
            try
            {
                const need = (100 - context.player.fatigue) * 3.6
                const time = new Date()
                time.setMinutes(time.getMinutes() + need)
                const now = new Date()
                const minutes = (time - now) / 60000
                Data.users[context.player.id].lastActionTime = time
                if (Data.users[context.player.id].timeout)
                {
                    clearTimeout(Data.users[context.player.id].timeout)
                }
                Data.users[context.player.id].timeout = setTimeout(() => {
                    context.send("‚òï –° –¥–æ–±—Ä—ã–º —É—Ç—Ä–æ–º, —Ç–µ–ø–µ—Ä—å –≤—ã –ø–æ–ª–Ω—ã —Å–∏–ª.", {
                        keyboard: keyboard.build(current_keyboard)
                    })
                    Data.users[context.player.id].fatigue = 100
                    Data.users[context.player.id].isFreezed = false
                    Data.users[context.player.id].state = scenes.Menu
                }, need * 60000)
                Data.users[context.player.id].state = scenes.Relaxing
                Data.users[context.player.id].isFreezed = true
                await context.send(`üí§ –°–ø–æ–∫–æ–π–Ω–æ–π –Ω–æ—á–∏, –¥–æ –ø–æ–ª–Ω–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–∏–ª ${Math.round(minutes)} –º–∏–Ω.`,
                    {
                        keyboard: keyboard.build([[keyboard.wakeupButton]])
                    })
                return resolve()
            }
            catch (e)
            {
                await ErrorHandler.SendLogs(context, "–ù–∞—á–∞–ª–æ –æ—Ç–¥—ã—Ö–∞", e)
            }
        })
    }

    async DeleteBuildingForMayor(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                const buildings = await Buildings.findAll({where: {cityID: context.cityID}})
                let kb = []
                for (let i = 0; i < buildings.length; i++)
                {
                    if(buildings[i].dataValues.ownerID === "country")
                    {
                        kb.push([NameLibrary.GetBuildingType(buildings[i].dataValues.type) + " " + buildings[i].dataValues.name, "ID" + buildings[i].dataValues.id])
                    }
                }
                const buildingID = await InputManager.KeyboardBuilder(context, "–í—ã–±–µ—Ä–∏—Ç–µ –∑–¥–∞–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —Å–Ω–µ—Å—Ç–∏ (–≤—ã –º–æ–∂–µ—Ç–µ —Ä–∞—Å–ø–æ—Ä—è–∂–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –∑–¥–∞–Ω–∏—è–º–∏)", kb, current_keyboard)
                if(!buildingID) return resolve()

                const accept = await InputManager.InputBoolean(context, `–°–Ω–æ—Å –∑–¥–∞–Ω–∏—è —Å—Ç–æ–∏—Ç 200 –º–æ–Ω–µ—Ç. –°–µ–π—á–∞—Å –≤ –±—é–¥–∂–µ—Ç–µ ${Data.cities[context.cityID].resources.money} –º–æ–Ω–µ—Ç.\n–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ–¥–∏—Ç–µ —Å–Ω–µ—Å—Ç–∏ —ç—Ç–æ –∑–¥–∞–Ω–∏–µ?`)
                if (!accept) return resolve()
                if(Data.cities[context.cityID].resources.money < 200)
                {
                    await context.send("–í –±—é–¥–∂–µ—Ç–µ –≥–æ—Ä–æ–¥–∞ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –º–æ–Ω–µ—Ç!")
                }
                await Data.AddCityResources(context.cityID, {money: -200})
                await context.send("–ó–¥–∞–Ω–∏–µ —Å–Ω–µ—Å–µ–Ω–æ.", {keyboard: keyboard.build(current_keyboard)})
            }
            catch (e)
            {
                await ErrorHandler.SendLogs(context, "–ú—ç—Ä —É–¥–∞–ª—è–µ—Ç –∑–¥–∞–Ω–∏–µ", e)
            }
        })
    }

    async CreateBuildingForMayor(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                const buildings = await Buildings.findAll({where: {cityID: context.cityID}})
                let kb = []
                for (let i = 0; i < buildings.length; i++)
                {
                    if(buildings[i].dataValues.ownerID === "country")
                    {
                        kb.push([NameLibrary.GetBuildingType(buildings[i].dataValues.type) + " " + buildings[i].dataValues.name, "ID" + buildings[i].dataValues.id])
                    }
                }
                const buildingID = await InputManager.KeyboardBuilder(context, "–í—ã–±–µ—Ä–∏—Ç–µ –∑–¥–∞–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —Å–Ω–µ—Å—Ç–∏ (–≤—ã –º–æ–∂–µ—Ç–µ —Ä–∞—Å–ø–æ—Ä—è–∂–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –∑–¥–∞–Ω–∏—è–º–∏)", kb, current_keyboard)
                if(!buildingID) return resolve()

                const accept = await InputManager.InputBoolean(context, `–°–Ω–æ—Å –∑–¥–∞–Ω–∏—è —Å—Ç–æ–∏—Ç 200 –º–æ–Ω–µ—Ç.\n–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ–¥–∏—Ç–µ —Å–Ω–µ—Å—Ç–∏ —ç—Ç–æ –∑–¥–∞–Ω–∏–µ?`)
                if (!accept) return resolve()
                if(Data.cities[context.cityID].resources.money < 200)
                {
                    await context.send("–í –±—é–¥–∂–µ—Ç–µ –≥–æ—Ä–æ–¥–∞ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –º–æ–Ω–µ—Ç!")
                }
                await Data.AddCityResources(context.cityID, {money: -200})
                await context.send("–ó–¥–∞–Ω–∏–µ —Å–Ω–µ—Å–µ–Ω–æ.", {keyboard: keyboard.build(current_keyboard)})
            }
            catch (e)
            {
                await ErrorHandler.SendLogs(context, "–ú—ç—Ä —Å–æ–∑–¥–∞–µ—Ç –∑–¥–∞–Ω–∏–µ", e)
            }
        })
    }

    async OfferMarry(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                if(context.player.isMarried)
                {
                    await context.send("‚ö† –í—ã —É–∂–µ –ø–æ–º–æ–ª–≤–ª–µ–Ω—ã", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                const user = await InputManager.SearchUser(context, "–ö–æ–º—É –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ?", current_keyboard)
                if(!user) return resolve()
                const userInfo = await PlayerInfo.findOne({where: {id: user.dataValues.id}})
                if(isNaN(userInfo.dataValues.marriedID))
                {
                    await context.send(`‚ö† ${await NameLibrary.GetPlayerNick(user.dataValues.id)} —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç –≤ –±—Ä–∞–∫–µ!`, {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                if(NameLibrary.GetGender(user.dataValues.gender) === context.player.gender)
                {
                    await context.send("‚úù –ù–µ –Ω–∞–¥–æ —Ç–∞–∫.", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                const text = await InputManager.InputString(context, "–ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.", current_keyboard)
                if (!text) return resolve()

                const accept = await InputManager.InputBoolean(context, `–¢–µ–∫—Å—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è:\n${text}\n–°–¥–µ–ª–∞—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ –±—Ä–∞–∫ –∏–≥—Ä–æ–∫—É *id${user.dataValues.id}(${user.dataValues.nick})?\n‚Ñπ –ï—Å–ª–∏ –∏–≥—Ä–æ–∫ —Å–æ–≥–ª–∞—Å–∏—Ç—Å—è, —Ç–æ —É –≤–∞—Å –±—É–¥–µ—Ç –∑–∞–∫–ª—é—á–µ–Ω –±—Ä–∞–∫.`, current_keyboard)
                if(!accept)
                {
                    await context.send("‚õî –û—Ç–º–µ–Ω–µ–Ω–æ")
                    return resolve()
                }
                await api.api.messages.send({
                    user_id: user.dataValues.id,
                    random_id: Math.round(Math.random() * 100000),
                    message: `üíç –ò–≥—Ä–æ–∫ *id${context.player.id}(${context.player.nick}) –æ—Ç–ø—Ä–∞–≤–∏–ª –≤–∞–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Ä—É–∫–∏ –∏ —Å–µ—Ä–¥—Ü–∞ —Å —Ç–µ–∫—Å—Ç–æ–º:\n${text}`,
                    keyboard: keyboard.build([[keyboard.acceptCallbackButton({command: "merry", item: context.player.id}), keyboard.declineCallbackButton({command: "decline_merry", item: context.player.id})]]).inline().oneTime()
                })
                Data.users[context.player.id].isMarried = true
                await context.send("‚úÖ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ", {keyboard: keyboard.build(current_keyboard)})
                return resolve()
            }
            catch (e)
            {
                await ErrorHandler.SendLogs(context, "–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –±—Ä–∞–∫–∞", e)
            }
        })
    }

    async Divorce(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                if(!context.player.marriedID)
                {
                    await context.send("‚ö† –í—ã –Ω–µ –≤ –±—Ä–∞–∫–µ.", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                const accept = await InputManager.InputBoolean(context, `–í—ã —Ö–æ—Ç–∏—Ç–µ —Ä–∞—Å—Ç–æ—Ä–≥–Ω—É—Ç—å –±—Ä–∞–∫ —Å –∏–≥—Ä–æ–∫–æ–º ${await NameLibrary.GetPlayerNick(context.player.marriedID)}?\n‚Ñπ –ï—Å–ª–∏ –∏–≥—Ä–æ–∫ —Ç–æ–∂–µ —Å–æ–≥–ª–∞—Å–∏—Ç—Å—è –Ω–∞ —ç—Ç–æ, —Ç–æ –≤–∞—à –±—Ä–∞–∫ –±—É–¥–µ—Ç —Ä–∞—Å—Ç–æ—Ä–∂–µ–Ω.`, current_keyboard)
                if(!accept)
                {
                    await context.send("‚õî –û—Ç–º–µ–Ω–µ–Ω–æ")
                    return resolve()
                }
                await api.api.messages.send({
                    user_id: context.player.marriedID,
                    random_id: Math.round(Math.random() * 100000),
                    message: `‚ù§Ô∏è‚Äçü©π –ò–≥—Ä–æ–∫ *id${context.player.id}(${context.player.nick}) –æ—Ç–ø—Ä–∞–≤–∏–ª –≤–∞–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Ä–∞—Å—Ç–æ—Ä–≥–Ω—É—Ç—å –±—Ä–∞–∫`,
                    keyboard: keyboard.build([[keyboard.acceptCallbackButton({command: "divorce", item: context.player.id}), keyboard.declineCallbackButton({command: "decline_divorce", item: context.player.id})]]).inline().oneTime()
                })
                await context.send("‚úÖ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ", {keyboard: keyboard.build(current_keyboard)})
            }
            catch (e)
            {
                await ErrorHandler.SendLogs(context, "–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –±—Ä–∞–∫–∞", e)
            }
        })
    }

    async GetCitizenship(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                if(context.player.status.match(/official|leader/))
                {
                    await context.send("‚ö† –ü—Ä–∞–≤–∏—Ç–µ–ª–∏ –∏ —á–∏–Ω–æ–≤–Ω–∏–∫–∏ –Ω–µ –º–æ–≥—É—Ç –º–µ–Ω—è—Ç—å –≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                if(context.player.status.match(/candidate/))
                {
                    await context.send("‚ö† –í—ã —É–∂–µ –ø–æ–¥–∞–ª–∏ –Ω–∞ –≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                if(context.player.citizenship !== null)
                {
                    const firstAccept = await InputManager.InputBoolean(context, `‚ö† –í—ã—Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç –≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–∞ —Ñ—Ä–∞–∫—Ü–∏–∏ ${Data.GetCountryName(context.player.citizenship)}?\n–ü–æ—Å–ª–µ –æ—Ç–∫–∞–∑–∞ –≤–∞—à —Å—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–∏—Ç—Å—è –Ω–∞ \"–∞–ø–∞—Ç—Ä–∏–¥\".`, current_keyboard)
                    if(!firstAccept) return resolve()
                }
                let country = await InputManager.KeyboardBuilder(context, "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ—Ä–∞–∫—Ü–∏—é, –≥—Ä–∞–∂–¥–∞–Ω–∏–Ω–æ–º –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–∏—Ç–µ —Å—Ç–∞—Ç—å:", Data.GetCountryButtons(), current_keyboard)
                if(!country) return resolve()
                country = Data.ParseButtonID(country)
                if(country === context.player.citizenship)
                {
                    await context.send("‚ö† –í—ã —É–∂–µ —è–≤–ª—è–µ—Ç–µ—Å—å –≥—Ä–∞–∂–¥–∞–Ω–∏–Ω–æ–º —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω—ã.", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                for (const key of Data.delegates[country]) {
                    await api.api.messages.send({
                        user_id: key,
                        random_id: Math.round(Math.random() * 100000),
                        message: `ü™™ –ò–≥—Ä–æ–∫ *id${context.player.id}(${context.player.nick}) –ø–æ–¥–∞–ª –Ω–∞ –≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ –≤ –≤–∞—à—É —Ñ—Ä–∞–∫—Ü–∏—é`,
                        keyboard: keyboard.build([[keyboard.acceptCallbackButton({command: "give_citizenship", item: context.player.id, parameter: country}), keyboard.declineCallbackButton({command: "decline_citizenship", item: context.player.id, parameter: country})]]).inline().oneTime()
                    })
                }
                if(!context.player.status.match(/worker/))
                {
                    Data.users[context.player.id].status = "candidate"
                }
                Data.users[context.player.id].waitingCitizenship = setTimeout(() => {
                    if(!context.player.status.match(/worker/))
                    {
                        Data.users[context.player.id].status = "stateless"
                    }
                }, 86400000)
                await context.send("‚úÖ –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.\n–ü—Ä–∞–≤–∏—Ç–µ–ª—å –∏–ª–∏ –¥–µ–ª–µ–≥–∞—Ç—ã –≤ —Ç–µ—á–µ–Ω–∏–∏ 24 —á–∞—Å–æ–≤ —Ä–∞—Å—Å–º–æ—Ç—Ä—è—Ç –≤–∞—à—É –∫–∞–Ω–¥–∏–¥–∞—Ç—É—Ä—É –∏ –ø—Ä–∏–º—É—Ç —Ä–µ—à–µ–Ω–∏–µ.", {keyboard: keyboard.build(current_keyboard)})
            }
            catch (e)
            {
                await ErrorHandler.SendLogs(context, "–ü–æ–¥–∞—á–∞ –Ω–∞ –≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ", e)
            }
        })
    }

    async RefuseCitizenship(context, current_keyboard, scenes)
    {
        return new Promise(async (resolve) => {
            try
            {
                if(context.player.status.match(/official|leader/))
                {
                    await context.send("‚ö† –ü—Ä–∞–≤–∏—Ç–µ–ª–∏ –∏ —á–∏–Ω–æ–≤–Ω–∏–∫–∏ –Ω–µ –º–æ–≥—É—Ç –æ—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç –≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–∞", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                const firstAccept = await InputManager.InputBoolean(context, `‚ö† –í—ã—Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç –≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–∞ —Ñ—Ä–∞–∫—Ü–∏–∏ ${Data.GetCountryName(context.player.citizenship)}?\n–ü–æ—Å–ª–µ –æ—Ç–∫–∞–∑–∞ –≤–∞—à —Å—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–∏—Ç—Å—è –Ω–∞ \"–∞–ø–∞—Ç—Ä–∏–¥\" –∏ –ø—Ä–æ–ø–∞–¥–µ—Ç –ø—Ä–æ–ø–∏—Å–∫–∞, –≤–∞—à–µ –∏–º—É—â–µ—Å—Ç–≤–æ –æ—Å—Ç–∞–Ω–µ—Ç—Å—è —É –≤–∞—Å.`, current_keyboard)
                if(!firstAccept)
                {
                    await context.send("‚õî –û—Ç–∫–ª–æ–Ω–µ–Ω–æ", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                const secondAccept = await  InputManager.InputBoolean(context, "–í—ã —É–≤–µ—Ä–µ–Ω—ã?", current_keyboard)
                if(!secondAccept)
                {
                    await context.send("‚õî –û—Ç–∫–ª–æ–Ω–µ–Ω–æ", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                const country = await Country.findOne({where: {id: context.player.citizenship}})
                country.set({
                    population: country.population - 1
                })
                await country.save()
                await PlayerStatus.update({
                    citizenship: null
                },{where: {id: context.player.id}})
                await PlayerInfo.update({
                    registration: null
                },{where: {id: context.player.id}})
                if(!context.player.status.match(/worker/))
                {
                    Data.users[context.player.id].status = "stateless"
                    await Player.update({
                        status: "stateless"
                    },{where: {id: context.player.id}})
                }
                context.player.citizenship = null
                context.player.registration = null
                context.send("–¢–µ–ø–µ—Ä—å –≤—ã –∞–ø–∞—Ç—Ä–∏–¥.", {keyboard: keyboard.build(await scenes.keyboard(context))})
            }
            catch (e)
            {
                await ErrorHandler.SendLogs(context, "–û—Ç–∫–∞–∑ –æ—Ç –≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–∞", e)
            }
        })
    }

    async GetRegistration(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                if(context.player.registration === "candidate")
                {
                    await context.send("‚ö† –í—ã —É–∂–µ –ø–æ–¥–∞–ª–∏ –∑–∞—è–≤–∫—É", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                await api.api.messages.send({
                    user_id: Data.cities[context.player.location].leaderID,
                    random_id: Math.round(Math.random() * 100000),
                    message: `ü™™ –ò–≥—Ä–æ–∫ *id${context.player.id}(${context.player.nick}) –ø–æ–¥–∞–ª –∑–∞—è–≤–∫—É –Ω–∞ –ø—Ä–æ–ø–∏—Å–∫—É –≤ –≤–∞—à–µ–º –≥–æ—Ä–æ–¥–µ`,
                    keyboard: keyboard.build([[keyboard.acceptCallbackButton({command: "give_registration", item: context.player.id, parameter: context.player.location}), keyboard.declineCallbackButton({command: "decline_registration", item: context.player.id, parameter: context.player.location})]]).inline().oneTime()
                })
                context.player.registration = "candidate"
                context.player.waitingRegistration = setTimeout(() => {
                    context.player.registration = null
                }, 86400000)
                await context.send("‚úÖ –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.\n–ì–ª–∞–≤–∞ –≥–æ—Ä–æ–¥–∞ –≤ —Ç–µ—á–µ–Ω–∏–∏ 24 —á–∞—Å–æ–≤ —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç –≤–∞—à—É –∫–∞–Ω–¥–∏–¥–∞—Ç—É—Ä—É –∏ –ø—Ä–∏–º–µ—Ç —Ä–µ—à–µ–Ω–∏–µ.", {keyboard: keyboard.build(current_keyboard)})
            }
            catch (e)
            {
                await ErrorHandler.SendLogs(context, "–ü–æ–¥–∞—á–∞ –Ω–∞ –ø—Ä–æ–ø–∏—Å–∫—É", e)
            }
        })
    }

    async RefuseRegistration(context, current_keyboard, scenes)
    {
        return new Promise(async (resolve) => {
            try
            {
                const firstAccept = await InputManager.InputBoolean(context, `‚ö† –í—ã—Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç –ø—Ä–æ–ø–∏—Å–∫–∏ –≤ –≥–æ—Ä–æ–¥–µ ${Data.GetCityName(context.player.registration)}?`, current_keyboard)
                if(!firstAccept)
                {
                    await context.send("–û—Ç–∫–ª–æ–Ω–µ–Ω–æ", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                const secondAccept = await  InputManager.InputBoolean(context, "–í—ã —É–≤–µ—Ä–µ–Ω—ã?", current_keyboard)
                if(!secondAccept)
                {
                    await context.send("–û—Ç–∫–ª–æ–Ω–µ–Ω–æ", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                await PlayerInfo.update({registration: null},{where: {id: context.player.id}})
                context.player.registration = null
                context.send("–¢–µ–ø–µ—Ä—å –≤—ã –±–µ–∑ –ø—Ä–æ–ø–∏—Å–∫–∏.", {keyboard: keyboard.build(await scenes.keyboard(context))})
            }
            catch (e)
            {
                await ErrorHandler.SendLogs(context, "–û—Ç–∫–∞–∑ –æ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏", e)
            }
        })
    }

    async Transaction(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                const user = await InputManager.SearchUser(context, "–ö–æ–º—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ —Ä–µ—Å—É—Ä—Å?", current_keyboard)
                if(!user) return resolve()
                if(user.dataValues.id === context.player.id)
                {
                    context.send("‚õî –ö–∞–∫–æ–π —Å–º—ã—Å–ª –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å —Å–∞–º–æ–º—É —Å–µ–±–µ?", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                context.send(`*id${context.player.id}(–í–∞—à) –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å:\nüíµ –î–µ–Ω—å–≥–∏:  ${context.player.money}\nü™® –ö–∞–º–µ–Ω—å:${context.player.stone}\nüåæ –ó–µ—Ä–Ω–æ:${context.player.wheat}\nü™µ –î–µ—Ä–µ–≤–æ:${context.player.wood}\nüåë –ñ–µ–ª–µ–∑–æ:${context.player.iron}\nü™ô –ú–µ–¥—å:${context.player.copper}\nü•à –°–µ—Ä–µ–±—Ä–æ:${context.player.silver}\nüíé –ê–ª–º–∞–∑—ã:${context.player.diamond}`)
                const resources = [[keyboard.moneyButton, keyboard.diamondButton],
                    [keyboard.wheatButton, keyboard.woodButton, keyboard.stoneButton],
                    [keyboard.ironButton, keyboard.copperButton, keyboard.silverButton],
                    [keyboard.cancelButton]]
                const resource = await InputManager.ChooseButton(context, `–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–∫–æ–π —Ä–µ—Å—É—Ä—Å –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –∏–≥—Ä–æ–∫—É *id${user.dataValues.id}(${user.dataValues.nick}):`, resources, current_keyboard)
                if (!resource) return resolve()
                if(resource.match(/cancel/))
                {
                    context.send("‚õî –ü–µ—Ä–µ–≤–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                if(Data.users[context.player.id][resource] === 0)
                {
                    context.send("‚ö† –£ –≤–∞—Å –Ω–µ—Ç —ç—Ç–æ–≥–æ —Ä–µ—Å—É—Ä—Å–∞.", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                let count
                if(Data.users[context.player.id][resource] > 1)
                {
                    count = await InputManager.InputInteger(context, `–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (–æ—Ç 1 –¥–æ ${Data.users[context.player.id][resource]} —à—Ç)`, current_keyboard, 1, Data.users[context.player.id][resource])
                    if(!count) return resolve()
                }
                else
                {
                    count = 1
                }
                const accept = await InputManager.InputBoolean(context, `–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥:\n–ö–æ–º—É: *id${user.dataValues.id}(${user.dataValues.nick})\n–†–µ—Å—É—Ä—Å: ${NameLibrary.GetResourceName(resource)}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${count} —à—Ç\n\n–í–µ—Ä–Ω–æ?`, current_keyboard)
                if(!accept)
                {
                    context.send("‚õî –ü–µ—Ä–µ–≤–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }

                let objIN = {}
                let objOUT = {}
                objIN[resource] = count * -1
                objOUT[resource] = count

                await Data.AddPlayerResources(user.dataValues.id, objOUT)
                await Data.AddPlayerResources(context.player.id, objIN)
                await api.SendMessage(user.dataValues.id, `–í–∞–º –ø–æ—Å—Ç—É–ø–∏–ª –ø–µ—Ä–µ–≤–æ–¥:\n–û—Ç –∫–æ–≥–æ: *id${context.player.id}(${context.player.nick})\n–†–µ—Å—É—Ä—Å: ${NameLibrary.GetResourceName(resource)}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${count} —à—Ç`)
                await context.send("‚úÖ –£—Å–ø–µ—à–Ω–æ")
                return resolve()
            }
            catch (e)
            {
                await ErrorHandler.SendLogs(context, "–ü–µ—Ä–µ–≤–æ–¥", e)
            }
        })
    }
    async GoToOtherCity(context, current_keyboard, scenes)
    {
        return new Promise(async (resolve) => {
            try
            {
                const cities = await City.findAll({where: {countryID: Data.GetCountryForCity(context.player.location).id}})
                const cityButtons = []
                for(let i = 0; i < cities.length; i++)
                {
                    if(cities[i].dataValues.id !== context.player.location)
                    {
                        cityButtons.push([cities[i].dataValues.name, "ID" + cities[i].dataValues.id])
                    }
                }
                if(cityButtons.length === 0)
                {
                    await context.send("‚Ñπ –í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–º –≥–æ—Ä–æ–¥–µ —Ñ—Ä–∞–∫—Ü–∏–∏ " + Data.GetCountryName(Data.GetCountryForCity(context.player.location).id))
                    return resolve()
                }
                let city = await InputManager.KeyboardBuilder(context, "–í—ã–±–µ—Ä–∏—Ç–µ –≤ –∫–∞–∫–æ–π –≥–æ—Ä–æ–¥ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è", cityButtons, current_keyboard)
                if(!city) return resolve()
                city = Data.ParseButtonID(city)
                const accept = await InputManager.InputBoolean(context, `–ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –≤ –¥—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥ –∑–∞–π–º–µ—Ç ${Data.variables.cityToCityTime / 60} –º–∏–Ω—É—Ç, –Ω–∞ —ç—Ç–æ –≤—Ä–µ–º—è –≤—ã –±—É–¥–µ—Ç–µ –∑–∞–º–æ—Ä–æ–∂–µ–Ω—ã.\n–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?`, current_keyboard)
                if(!accept)
                {
                    await context.send("‚õî –û—Ç–º–µ–Ω–µ–Ω–æ", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                context.player.state = scenes.moving
                if(context.player.status === "worker")
                {
                    await context.send("üèô –í—ã –ø—Ä–∏—à–ª–∏ –≤ –≥–æ—Ä–æ–¥" + Data.GetCityName(city) + "\n" + Data.cities[city].description)
                    context.player.location = city
                    await PlayerStatus.update(
                        {location: city},
                        {where: {id: context.player.id}}
                    )
                    context.player.state = scenes.finish
                }
                else
                {
                    context.player.timeout = setTimeout(async () => {
                        await context.send("üèô –í—ã –ø—Ä–∏—à–ª–∏ –≤ –≥–æ—Ä–æ–¥" + Data.GetCityName(city) + "\n" + Data.cities[city].description)
                        context.player.location = city
                        context.player.state = scenes.finish
                        await PlayerStatus.update(
                            {location: city},
                            {where: {id: context.player.id}}
                        )
                    }, Data.variables.cityToCityTime * 1000)
                }
            }
            catch (e)
            {
                await ErrorHandler.SendLogs(context, "–ü–µ—Ä–µ—Ö–æ–¥ –≤ –¥—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥", e)
            }
        })
    }

    async GoToOtherCountry(context, current_keyboard, scenes)
    {
        return new Promise(async (resolve) => {
            try
            {
                const playerPlace = Data.GetCountryForCity(context.player.location).id
                const roads = await CountryRoads.findAll({where: {fromID: playerPlace}})
                const countryButtons = []
                for(let i = 0; i < roads.length; i++)
                {
                    countryButtons.push([Data.countries[roads[i].dataValues.toID].name, "ID" + roads[i].dataValues.toID])
                }
                if(roads.length === 0)
                {
                    await context.send("‚Ñπ –î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã —É–µ—Ö–∞—Ç—å –∏–∑ —Ñ—Ä–∞–∫—Ü–∏–∏ –Ω—É–∂–Ω–∞ –¥–æ—Ä–æ–≥–∞, –Ω–æ –∏–∑ —Ñ—Ä–∞–∫—Ü–∏–∏, –≤ –∫–æ—Ç–æ—Ä–æ–π –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å, –Ω–µ –≤–µ–¥–µ—Ç –Ω–∏ –æ–¥–Ω–∞ –¥–æ—Ä–æ–≥–∞.\n–í—Å–µ –≤–æ–ø—Ä–æ—Å—ã –æ –¥–æ—Ä–æ–≥–∞—Ö –∫ –ø—Ä–∞–≤–∏—Ç–µ–ª—é —Ñ—Ä–∞–∫—Ü–∏–∏ " + Data.GetCountryName(Data.GetCountryForCity(context.player.location).id) + " –∏–ª–∏ –ì–µ–π–º-–ú–∞—Å—Ç–µ—Ä–∞–º")
                    return resolve()
                }
                let country = await InputManager.KeyboardBuilder(context, "–í—ã–±–µ—Ä–∏—Ç–µ –≤ –∫–∞–∫—É—é —Ñ—Ä–∞–∫—Ü–∏—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è", countryButtons, current_keyboard)
                if(!country) return resolve()
                country = Data.ParseButtonID(country)
                let road = null
                roads.forEach(key => {if(key.dataValues.toID === country) road = key.dataValues})
                if(road.isBlocked)
                {
                    await context.send("–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —ç—Ç–∞ –¥–æ—Ä–æ–≥–∞ –ø–µ—Ä–µ–∫—Ä—ã—Ç–∞ –∏–∑-–∑–∞ –∏–≤–µ–Ω—Ç–∞.", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                let accept
                if (Data.countries[country].entranceFee !== 0)
                {
                    accept = await InputManager.InputBoolean(context, `‚Ñπ –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –≤ ${Data.GetCountryName(country)} –∑–∞–π–º–µ—Ç ${road.time} –º–∏–Ω—É—Ç, –Ω–∞ —ç—Ç–æ –≤—Ä–µ–º—è –≤—ã –±—É–¥–µ—Ç–µ –∑–∞–º–æ—Ä–æ–∂–µ–Ω—ã.\n–£ —Ñ—Ä–∞–∫—Ü–∏–∏ ${Data.GetCountryName(country)} –µ—Å—Ç—å –≤—Ö–æ–¥–Ω–∞—è –ø–æ—à–ª–∏–Ω–∞ –≤ —Ä–∞–∑–º–µ—Ä–µ ${Data.countries[country].entranceFee} –º–æ–Ω–µ—Ç\n–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?`, current_keyboard)
                    if(context.player.money - Data.countries[country].entranceFee < 0)
                    {
                        await context.send("–£ –≤–∞—Å –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –æ–ø–ª–∞—Ç—ã –≤—Ö–æ–¥–Ω–æ–π –ø–æ—à–ª–∏–Ω—ã", {keyboard: keyboard.build(current_keyboard)})
                        return resolve()
                    }
                }
                else
                {
                    accept = await InputManager.InputBoolean(context, `‚Ñπ –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –≤ ${Data.GetCountryName(country)} –∑–∞–π–º–µ—Ç ${road.time} –º–∏–Ω—É—Ç, –Ω–∞ —ç—Ç–æ –≤—Ä–µ–º—è –≤—ã –±—É–¥–µ—Ç–µ –∑–∞–º–æ—Ä–æ–∂–µ–Ω—ã.\n–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?`, current_keyboard)
                }
                if(!accept)
                {
                    await context.send("‚õî –û—Ç–º–µ–Ω–µ–Ω–æ", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                const time = new Date()
                time.setMinutes(time.getMinutes() + road.time)
                context.player.state = scenes.moving
                context.player.lastActionTime = time
                if(context.player.status === "worker")
                {
                    await context.send("üèô –í—ã –ø—Ä–∏—à–ª–∏ –≤ –≥–æ—Ä–æ–¥" + Data.GetCityName(Data.countries[country].capitalID) + "\n" + Data.cities[Data.countries[country].capitalID].description)
                    context.player.location = Data.countries[country].capitalID
                    await PlayerStatus.update(
                        {location: Data.countries[country].capitalID},
                        {where: {id: context.player.id}}
                    )
                    context.player.state = scenes.finish
                }
                else
                {
                    context.player.timeout = setTimeout(async () => {
                        await context.send("üèô –í—ã –ø—Ä–∏—à–ª–∏ –≤ –≥–æ—Ä–æ–¥" + Data.GetCityName(Data.countries[country].capitalID) + "\n" + Data.cities[Data.countries[country].capitalID].description)
                        context.player.location = Data.countries[country].capitalID
                        if (Data.countries[country].entranceFee !== 0)
                        {
                            await Data.AddPlayerResources(context.player.id, {money: -Data.countries[country].entranceFee})
                            await Data.AddCountryResources(country, {money: Data.countries[country].entranceFee})
                        }
                        await PlayerStatus.update(
                            {location: Data.countries[country].capitalID},
                            {where: {id: context.player.id}}
                        )
                    }, road.time * 60000)
                    context.player.state = scenes.finish
                }
            }
            catch (e)
            {
                await ErrorHandler.SendLogs(context, "–ü–µ—Ä–µ—Ö–æ–¥ –≤ –¥—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥", e)
            }
        })
    }

    async GiveKey(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                const keys = await Keys.findAll({where: {ownerID: context.player.id}})
                const keysButton = []
                if(keys.length === 0)
                {
                    await context.send("‚ö† –£ –≤–∞—Å –Ω–µ—Ç –∫–ª—é—á–µ–π", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                for(let i = 0; i < keys.length; i++)
                {
                    keysButton.push([keys[i].dataValues.name, "ID" + keys[i].dataValues.id])
                }
                let key = await InputManager.KeyboardBuilder(context, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª—é—á, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–¥–∞—Ç—å", keysButton, current_keyboard)
                if(!key) return resolve()
                key = Data.ParseButtonID(key)
                const user = await InputManager.SearchUser(context, "–ö–æ–º—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–¥–∞—Ç—å —ç—Ç–æ—Ç –∫–ª—é—á?", current_keyboard)
                if(!user) return resolve()
                await Keys.update({ownerID: user.dataValues.id}, {where: {id: key}})
                await context.send("‚úÖ –ö–ª—é—á –æ—Ç–¥–∞–Ω.", {keyboard: keyboard.build(current_keyboard)})
            }
            catch (e)
            {
                await ErrorHandler.SendLogs(context, "–û—Ç–¥–∞—Ç—å –∫–ª—é—á", e)
            }
        })
    }

    async CopyKey(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                const keys = await Keys.findAll({where: {ownerID: context.player.id}})
                const keysButton = []
                if(keys.length === 0)
                {
                    await context.send("‚ö† –£ –≤–∞—Å –Ω–µ—Ç –∫–ª—é—á–µ–π", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                for(let i = 0; i < keys.length; i++)
                {
                    keysButton.push([keys[i].dataValues.name, "ID" + keys[i].dataValues.id])
                }
                let key = await InputManager.KeyboardBuilder(context, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª—é—á, –¥—É–±–ª–∏–∫–∞—Ç –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å. \n–°—Ç–æ–∏–º–æ—Å—Ç—å:\n" + NameLibrary.GetPrice(Prices["copy_key"]), keysButton, current_keyboard)
                if(!key) return resolve()
                if (!context.player.CanPay(Prices["copy_key"]))
                {
                    await context.send("‚ö† –£ –≤–∞—Å –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç —Ä–µ—Å—É—Ä—Å–æ–≤", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                key = Data.ParseButtonID(key)
                keys.forEach((i) => {if(parseInt(i.dataValues.id)  === parseInt(key)) key = i.dataValues})
                console.log(key)
                await Keys.create({
                    houseID: key.houseID,
                    ownerID: key.ownerID,
                    name: key.name,
                    description: key.description + " –¥—É–±–ª–∏–∫–∞—Ç"
                })
                await context.send("‚úÖ –ö–ª—é—á –ø—Ä–æ–¥—É–±–ª–∏—Ä–æ–≤–∞–Ω.", {keyboard: keyboard.build(current_keyboard)})
            }
            catch (e)
            {
                await ErrorHandler.SendLogs(context, "–°–¥–µ–ª–∞—Ç—å –¥—É–±–ª–∏–∫–∞—Ç –∫–ª—é—á–∞", e)
            }
        })
    }
    async GetAllProperty(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                const buildings = await Buildings.findAll({where: {ownerID: context.player.id}})
                let request = "*id"+ context.player.id +"(–í–∞—à–∏) –ø–æ—Å—Ç—Ä–æ–π–∫–∏:\n"
                for(let i = 0; i < buildings.length; i++)
                {
                    request += (i+1) +
                        ": " +
                        NameLibrary.GetBuildingType(buildings[i].dataValues.type) +
                        " \"" +
                        buildings[i].dataValues.name +
                        "\" " +
                        buildings[i].dataValues.level +
                        " —É—Ä–æ–≤–Ω—è, –≥–æ—Ä–æ–¥: " +
                        Data.GetCityName(buildings[i].dataValues.cityID) +
                        "\n"
                }
                if(buildings.length === 0)
                {
                    request += "‚õ∫ –£ –≤–∞—Å –Ω–µ—Ç –ø–æ—Å—Ç—Ä–æ–µ–∫\n"
                }

                const keys = await Keys.findAll({where: {ownerID: context.player.id}})
                request += "\n*id"+ context.player.id +"(–í–∞—à–∏) –∫–ª—é—á–∏:\n"
                for(let i = 0; i < keys.length; i++)
                {
                    request += (i+1) + ": " + "\"" + keys[i].dataValues.name + "\" " + keys[i].dataValues.description + "\n"
                }
                if(keys.length === 0)
                {
                    request += "üìé –£ –≤–∞—Å –Ω–µ—Ç –∫–ª—é—á–µ–π"
                }

                await context.send(request, {keyboard: keyboard.build(current_keyboard)})
                return resolve()
            }
            catch (e)
            {
                await ErrorHandler.SendLogs(context, "–í—ã–≤–æ–¥ –≤—Å–µ–≥–æ –∏–º—É—â–µ—Å—Ç–≤–∞", e)
            }
        })
    }

    async NewUserBuilding(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                const country = Data.GetCountryForCity(context.player.location)
                if(parseInt(context.player.citizenship) !== country.id)
                {
                    await context.send("‚ö† –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –≥—Ä–∞–∂–¥–∞–Ω–∏–Ω–æ–º —Ñ—Ä–∞–∫—Ü–∏–∏ " + Data.GetCountryName(country.id), {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                const buildingButtons = [
                    ["üè† –ñ–∏–ª–æ–π –¥–æ–º", "house"],
                    ["üè¶ –ë–∞–Ω–∫", "bank"],
                    ["üåæ –°–µ–ª—å—Å–∫–æ–µ —Ö–æ–∑—è–π—Å—Ç–≤–æ", "wheat"]
                ]
                country.resources.match(/stone/) && buildingButtons.push(["ü™® –ö–∞–º–µ–Ω–æ–ª–æ–º–Ω—è", "stone"])
                country.resources.match(/wood/) && buildingButtons.push(["ü™µ –õ–µ—Å–æ–ø–æ–ª–æ—Å–∞", "wood"])
                country.resources.match(/iron/) && buildingButtons.push(["üåë –ñ–µ–ª–µ–∑–Ω—ã–π —Ä—É–¥–Ω–∏–∫", "iron"])
                country.resources.match(/copper/) && buildingButtons.push(["ü™ô –ë—Ä–æ–Ω–∑–æ–≤—ã–π —Ä—É–¥–Ω–∏–∫", "copper"])
                country.resources.match(/silver/) && buildingButtons.push(["ü•à –°–µ—Ä–µ–±—Ä—è–Ω–Ω—ã–π —Ä—É–¥–Ω–∏–∫", "silver"])

                let request = "–¶–µ–Ω—ã –Ω–∞ –ø–æ—Å—Ç—Ä–æ–π–∫–∏:\n\n"
                request += NameLibrary.GetPlayerResources(context) + "\n\n"
                buildingButtons.forEach(key => {
                    request += key[0] + ":\n" + NameLibrary.GetPrice(Prices["new_" + key[1]]) + "\n"
                })
                const building = await InputManager.KeyboardBuilder(context, request + "\n–ö–∞–∫—É—é –ø–æ—Å—Ç—Ä–æ–π–∫—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤–æ–∑–≤–µ—Å—Ç–∏?\n\n‚ö† –ï—Å–ª–∏ –≤—ã –Ω–µ –ø—Ä–æ–ø–∏—Å–∞–Ω—ã –≤ —ç—Ç–æ–º –≥–æ—Ä–æ–¥–µ, —Ç–æ —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–∏–¥–µ—Ç—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ –æ—Ç –≥–ª–∞–≤—ã –≥–æ—Ä–æ–¥–∞.", buildingButtons, current_keyboard)
                if(!building) return resolve()
                if(!context.player.CanPay(Prices["new_" + building]))
                {
                    await context.send("‚ö† –£ –≤–∞—Å –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç —Ä–µ—Å—É—Ä—Å–æ–≤.", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                const name = await InputManager.InputString(context, "–ù–∞–∑–æ–≤–∏—Ç–µ —Å–≤–æ—é –ø–æ—Å—Ç—Ä–æ–π–∫—É. (–æ—Ç 2 –¥–æ 100 —Å–∏–º–≤–æ–ª–æ–≤)", current_keyboard, 2, 100)
                if(!name) return resolve()
                await Data.AddPlayerResources(context.player.id, Prices["new_" + building])
                const build = await Buildings.create({
                    cityID: context.player.location,
                    name: name,
                    type: "building_of_" + building,
                    ownerID: context.player.id,
                    ownerType: "user",
                    level: 1,
                    freezing: parseInt(context.player.location) !== parseInt(context.player.registration)
                })
                if(parseInt(context.player.location) === parseInt(context.player.registration))
                {
                    await Data.LoadBuildings()
                    await Keys.create({
                        houseID: build.dataValues.id,
                        ownerID: context.player.id,
                        name: "üîë " + build.dataValues.name,
                        description: "–ö–ª—é—á –æ—Ç –ø–æ—Å—Ç—Ä–æ–π–∫–∏ - " + NameLibrary.GetBuildingType(build.dataValues.type) + " –≤ –≥–æ—Ä–æ–¥–µ " + Data.GetCityName(context.player.location)
                    })
                    await context.send("‚úÖ –ü–æ—Å—Ç—Ä–æ–π–∫–∞ –≤–æ–∑–≤–µ–¥–µ–Ω–∞. –í–∞–º –≤—ã–¥–∞–Ω –∫–ª—é—á –æ—Ç –Ω–µ–µ.", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                else
                {
                    if(!context.player.waitingAllowBuilding) context.player.waitingAllowBuilding = []
                    context.player.waitingAllowBuilding.push([
                        build.dataValues.id,
                        setTimeout(async () =>
                        {
                            const price = NameLibrary.ReversePrice(Prices["new_" + building])
                            await Data.AddPlayerResources(context.player.id, price)
                            await Buildings.destroy({where: {id: build.dataValues.id}})
                            await context.send(`‚ö† –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ–¥–æ–±—Ä–µ–Ω–∏—è —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞ –ø–æ—Å—Ç—Ä–æ–π–∫–∏ \"${NameLibrary.GetBuildingType(build.dataValues.type)}\" –≤—ã—à–ª–æ, —Ä—Å—É—Ä—Å—ã –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã.`)
                            let count = 0
                            for(let i = 0; i < context.player.waitingAllowBuilding.length; i++)
                            {
                                if (context.player.waitingAllowBuilding[i])
                                {
                                    if(context.player.waitingAllowBuilding[i][1]) count++
                                    else delete context.player.waitingAllowBuilding[i]
                                }
                            }
                            if(count === 0) delete context.player.waitingAllowBuilding
                        }, 86400000)
                    ])
                    await api.api.messages.send({
                        user_id: Data.GetCity(context.player.location).leaderID,
                        random_id: Math.round(Math.random() * 100000),
                        message: `–ò–≥—Ä–æ–∫ *id${context.player.id}(${context.player.nick}) —Ö–æ—á–µ—Ç –ø–æ—Å—Ç—Ä–æ–∏—Ç—å ${NameLibrary.GetBuildingType(build.dataValues.type)}. –†–∞–∑—Ä–µ—à–∏—Ç—å —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ?`,
                        keyboard: keyboard.build([[keyboard.acceptCallbackButton({command: "allow_user_building", item: context.player.id, parameter: build.dataValues.id}), keyboard.declineCallbackButton({command: "decline_user_building", item: context.player.id, parameter: build.dataValues.id})]]).inline().oneTime()
                    })
                    await context.send("‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ –≤–æ–∑–≤–µ–¥–µ–Ω–∏–µ –ø–æ—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∞–Ω–∞, —Ä–µ—Å—É—Ä—Å—ã –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω—ã", {keyboard: keyboard.build(current_keyboard)})
                }
            }
            catch (e)
            {
                await ErrorHandler.SendLogs(context, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—Ç—Ä–æ–∏—Ç –Ω–æ–≤–æ–µ –∑–¥–∞–Ω–∏–µ", e)
            }
        })
    }

    async UpgradeUserBuilding(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                const buildings = await Buildings.findAll({where: {ownerID: context.player.id}})
                if(buildings.length === 0)
                {
                    await context.send("‚ö† –£ –≤–∞—Å –Ω–µ—Ç –ø–æ—Å—Ç—Ä–æ–µ–∫.", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                let request = "üè¢ –í–∞—à–∏ –ø–æ—Å—Ç—Ä–æ–π–∫–∏:\n"
                const buildingButtons = []
                for(let i = 0; i < buildings.length; i++)
                {
                    buildingButtons.push([buildings[i].dataValues.name, "ID" + buildings[i].dataValues.id])
                    request += `${NameLibrary.GetBuildingType(buildings[i].dataValues.type)} \"${buildings[i].dataValues.name}\" ${buildings[i].dataValues.level} —É—Ä–æ–≤–Ω—è\n`
                }
                let building = await InputManager.KeyboardBuilder(context, request, buildingButtons, current_keyboard)
                if(!building) return resolve()

                building = Data.ParseButtonID(building)
                buildings.forEach(key => {if(parseInt(key.dataValues.id) === parseInt(building)) building = key.dataValues})
                if(building.level >= 5)
                {
                    await context.send(`‚ö† ${NameLibrary.GetBuildingType(building.type)} \"${building.name}\" –∏–º–µ–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å —É–ª—É—á—à–µ–Ω–∏—è.`, {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                await context.send(`–£–ª—É—á—à–µ–Ω–∏–µ –¥–ª—è ${NameLibrary.GetBuildingType(building.type)} \"${building.name}\":\n ${building.level} —É—Ä–æ–≤–µ–Ω—å => ${building.level + 1} —É—Ä–æ–≤–µ–Ω—å\n${NameLibrary.GetPrice(Prices[building.type.replace("building_of_", "") + "_lvl" + (building.level + 1)])}`)
                if(!context.player.CanPay(Prices[building.type.replace("building_of_", "") + "_lvl" + (building.level + 1)]))
                {
                    await context.send("‚ö† –£ –≤–∞—Å –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç —Ä–µ—Å—É—Ä—Å–æ–≤.", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                const accept = await InputManager.InputBoolean(context, "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?", current_keyboard)
                if(!accept)
                {
                    await context.send("‚õî –û—Ç–º–µ–Ω–µ–Ω–æ.", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                await Data.AddPlayerResources(context.player.id ,Prices[building.type.replace("building_of_", "") + "_lvl" + (building.level + 1)])
                await Buildings.update({level: building.level + 1}, {where: {id: building.id}})
                for(let i = 0; i < Data.buildings[building.cityID].length; i++)
                {
                    if(Data.buildings[building.cityID][i].id === building.id)
                    {
                        Data.buildings[building.cityID][i].Upgrade(building.level + 1)
                        break
                    }
                }
                await context.send(`‚úÖ –ü–æ—Å—Ç—Ä–æ–π–∫–∞ —É–ª—É—á—à–µ–Ω–∞ –¥–æ ${building.level + 1} —É—Ä–æ–≤–Ω—è.`, {keyboard: keyboard.build(current_keyboard)})
            }
            catch (e)
            {
                await ErrorHandler.SendLogs(context, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–ª—É—á—à–∞–µ—Ç —Å–≤–æ–µ –∑–¥–∞–Ω–∏–µ", e)
            }
        })
    }
}

module.exports = new BuildersAndControlsScripts()