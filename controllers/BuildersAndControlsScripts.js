const InputManager = require("./InputManager");
const Data = require("../models/CacheData");
const keyboard = require("../variables/Keyboards");
const {City, Country, PlayerStatus, Player, Warning, Ban, LastWills, Buildings,
    CountryResources, CityResources
} = require("../database/Models");
const api = require("../middleware/API");
const ErrorHandler = require("../error/ErrorHandler")
const NameLibrary = require("../variables/NameLibrary")
class BuildersAndControlsScripts
{
    async NewCountry(context, current_keyboard)
    {
        return new Promise(async (resolve, reject) => {
            try
            {
                //–≤–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è —Ñ—Ä–∞–∫—Ü–∏–∏
                let name = await InputManager.InputString(
                    context,
                    "1Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ—Ä–∞–∫—Ü–∏–∏ (–æ—Ç 2 –¥–æ 30 —Å–∏–º–≤–æ–ª–æ–≤):",
                    current_keyboard,
                    2,
                    30)
                if (!name) return reject()
                while(Data.countries.includes(name))
                {
                    name = await InputManager.InputString(
                        context,
                        "‚ö† –§—Ä–∞–∫—Ü–∏—è —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.",
                        current_keyboard,
                        2,
                        30)
                    if (!name) return reject()
                }

                //–æ–ø–∏—Å–∞–Ω–∏–µ
                const description = await InputManager.InputString(
                    context,
                    "2Ô∏è‚É£ –°–¥–µ–ª–∞–π—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ñ—Ä–∞–∫—Ü–∏–∏. (–¥–æ 1000 —Å–∏–º–≤–æ–ª–æ–≤)",
                    current_keyboard,
                    0,
                    1000
                )
                if(!description) return reject()

                //—Ñ–æ—Ç–æ
                const preview = await InputManager.InputPhoto(
                    context,
                    `3Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è –∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏–∏.\n‚ö† –≠—Ç–æ —Ñ–æ—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–∞—Ä—É—Å–µ–ª–∏ —Å —Ñ—Ä–∞–∫—Ü–∏—è–º–∏ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –∏–≥—Ä–æ–∫–æ–≤, —Å–æ–∑–¥–∞—Ç—å —Ñ—Ä–∞–∫—Ü–∏—é –±–µ–∑ —Ñ–æ—Ç–æ - –Ω–µ–ª—å–∑—è.\n‚ö† –¢—Ä–µ–±—É–µ—Ç—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ —Å —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ–º —Å—Ç–æ—Ä–æ–Ω 13/8 (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ 650x400), –∏–Ω–∞—á–µ –±—É–¥—É—Ç –æ—à–∏–±–∫–∏ —Å –∫–∞—Ä—É—Å–µ–ª—å—é, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –≤—ã–ª–µ—Ç—É`,
                    current_keyboard)
                if (!preview) return reject()

                //–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Ñ–æ—Ç–æ
                const welcomePhoto = await InputManager.InputPhoto(
                    context,
                    `4Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Ñ–æ—Ç–æ\n‚ö† –≠—Ç–æ —Ñ–æ—Ç–æ –±—É–¥–µ—Ç –≤—Å—Ç—Ä–µ—á–∞—Ç—å –Ω–æ–≤—ã—Ö –≥—Ä–∞–∂–¥–∞–Ω. (–§–æ—Ç–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)`,
                    current_keyboard)
                if(!welcomePhoto) return reject()

                //–≤–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è —Å—Ç–æ–ª–∏—Ü—ã
                let capitalName = await InputManager.InputString(
                    context,
                    "5Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–æ–ª–∏—Ü—ã (–æ—Ç 2 –¥–æ 30 —Å–∏–º–≤–æ–ª–æ–≤):",
                    current_keyboard,
                    2,
                    30)
                if (!capitalName) return reject()
                while(Data.cities.includes(capitalName))
                {
                    capitalName = await InputManager.InputString(
                        context,
                        "‚ö† –ì–æ—Ä–æ–¥ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.",
                        current_keyboard,
                        2,
                        30)
                    if (!capitalName) return reject()
                }

                //–≤—ã–±–æ—Ä –ø—Ä–∞–≤–∏—Ç–µ–ª—è
                let leader = await InputManager.SearchUser(context, "6Ô∏è‚É£ –¢–µ–ø–µ—Ä—å –Ω—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –ø—Ä–∞–≤–∏—Ç–µ–ª—è.")
                if(!leader) return reject()

                while(leader.dataValues.status === "leader")
                {
                    leader = await InputManager.SearchUser(context, `‚ö† *id${leader.dataValues.id}(${leader.dataValues.nick}) —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –ø—Ä–∞–≤–∏—Ç–µ–ª–µ–º.`)
                    if(!leader) return reject()
                }

                //–≥—Ä—É–ø–ø–∞
                let groupId = await InputManager.InputGroup(
                    context,
                    `7Ô∏è‚É£ –£–∫–∞–∂–∏—Ç–µ –≥—Ä—É–ø–ø—É —ç—Ç–æ–π —Ñ—Ä–∞–∫—Ü–∏–∏.`,
                    current_keyboard)
                if(!groupId) return reject()

                //–±—é–¥–∂–µ—Ç
                let budget = await InputManager.InputInteger(
                    context,
                    "8Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—ã–π –±—é–¥–∂–µ—Ç —Ñ—Ä–∞–∫—Ü–∏–∏.",
                    current_keyboard
                )
                if (!budget) return reject()

                //—Ä–µ—Å—É—Ä—Å—ã
                let resources = await InputManager.ChooseButton(
                    context,
                    "9Ô∏è‚É£ –ì–ª–∞–≤–Ω—ã–π —Ä–µ—Å—É—Ä—Å —Ñ—Ä–∞–∫—Ü–∏–∏:",
                    [
                        [keyboard.woodButton, keyboard.stoneButton],
                        [keyboard.ironButton, keyboard.copperButton, keyboard.silverButton]
                    ],
                    current_keyboard
                )
                if(!resources) return reject()
                let resName = NameLibrary.GetResourceName(resources)

                const wheat = await InputManager.InputInteger(context, "üåæ –í–≤–µ–¥–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—ã–π –∑–∞–ø–∞—Å –∑–µ—Ä–Ω–∞", current_keyboard, 0)
                if(!wheat) return reject()

                const wood = await InputManager.InputInteger(context, "ü™µ –í–≤–µ–¥–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—ã–π –∑–∞–ø–∞—Å –¥—Ä–µ–≤–µ—Å–∏–Ω—ã", current_keyboard, 0)
                if(!wheat) return reject()

                const stone = await InputManager.InputInteger(context, "‚õ∞ –í–≤–µ–¥–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—ã–π –∑–∞–ø–∞—Å –∫–∞–º–Ω—è", current_keyboard, 0)
                if(!wheat) return reject()

                const iron = await InputManager.InputInteger(context, "üåë –í–≤–µ–¥–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—ã–π –∑–∞–ø–∞—Å –∂–µ–ª–µ–∑–∞", current_keyboard, 0)
                if(!wheat) return reject()

                const copper = await InputManager.InputInteger(context, "ü™ô –í–≤–µ–¥–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—ã–π –∑–∞–ø–∞—Å –º–µ–¥–∏", current_keyboard, 0)
                if(!wheat) return reject()

                const silver = await InputManager.InputInteger(context, "ü•à –í–≤–µ–¥–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—ã–π –∑–∞–ø–∞—Å —Å–µ—Ä–µ–±—Ä–∞", current_keyboard, 0)
                if(!wheat) return reject()

                const diamonds = await InputManager.InputInteger(context, "üíé –í–≤–µ–¥–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—ã–π –∑–∞–ø–∞—Å –∞–ª–º–∞–∑–æ–≤", current_keyboard, 0)
                if(!diamonds) return reject()

                await context.send(`–ò—Ç–∞–∫, –º—ã –∏–º–µ–µ–º —Å–ª–µ–¥—É—é—â–µ–µ:\n–ù–∞–∑–≤–∞–Ω–∏–µ: ${name}\n–°—Ç–æ–ª–∏—Ü–∞: ${capitalName}\n–ì—Ä—É–ø–ø–∞: *public${groupId}(${name})\n–ü—Ä–∞–≤–∏—Ç–µ–ª—å: *id${leader.dataValues.id}(${leader.dataValues.nick})\n–ë—é–¥–∂–µ—Ç: ${budget}\n–†–µ—Å—É—Ä—Å: ${resName}\n–ó–µ—Ä–Ω–æ: ${wheat} –î—Ä–µ–≤–µ—Å–∏–Ω–∞: ${wood} –ö–∞–º–µ–Ω—å: ${stone}\n–ñ–µ–ª–µ–∑–æ: ${iron} –ú–µ–¥—å: ${copper} –°–µ—Ä–µ–±—Ä–æ: ${silver}`)
                let accept = await InputManager.InputBoolean(context, "–í–µ—Ä–Ω–æ?", current_keyboard)
                if(!accept)
                {
                    await context.send('‚õî –í–≤–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω.', {
                        keyboard: keyboard.build(current_keyboard)
                    })
                    return reject()
                }

                const city = await City.create({
                    leaderID: leader.dataValues.id,
                    name: capitalName,
                    description: `–°—Ç–æ–ª–∏—Ü–∞ —Ñ—Ä–∞–∫—Ü–∏–∏ *public${groupId}(${name})`,
                    photoURL: preview,
                    isCapital: true,
                    maxBuildings: 8
                })
                await CityResources.create({
                    id: city.dataValues.id
                })
                const country = await Country.create({
                    name: name,
                    description: description,
                    photoURL: preview,
                    welcomePhotoURL: welcomePhoto,
                    leaderID: leader.dataValues.id,
                    groupID: groupId,
                    resources: resources,
                    capital: capitalName,
                    capitalID: city.dataValues.id
                })
                await CountryResources.create({
                    id: country.dataValues.id,
                    money: budget,
                    wheat: wheat,
                    stone: stone,
                    wood: wood,
                    iron: iron,
                    copper: copper,
                    silver: silver,
                    diamond: diamonds
                })
                const leaderStatus = await PlayerStatus.findOne({where: {id: leader.dataValues.id}})
                city.set({
                    countryID: country.dataValues.id,
                    capitalID: country.dataValues.id
                })
                leader.set({
                    status: leader.dataValues.status === "worker" ? "worker" : "leader"
                })
                leaderStatus.set({
                    location: city.dataValues.id,
                    citizenship: country.dataValues.id
                })
                await city.save()
                await leader.save()
                await leaderStatus.save()

                if(Data.users[leader.dataValues.id]?.status !== "worker") Data.users[leader.dataValues.id].status = "leader"
                await Data.LoadCountries()
                await Data.LoadCities()
                await api.SendMessage(
                    leader.dataValues.id,
                    `‚úÖ –í—ã –±—ã–ª–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –ø—Ä–∞–≤–∏—Ç–µ–ª–µ–º —Ç–æ–ª—å–∫–æ —á—Ç–æ —Å–æ–∑–¥–∞–Ω–Ω–æ–π —Ñ—Ä–∞–∫—Ü–∏–∏ ${name}\n–í–∞—à —Å—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ "–ü—Ä–∞–≤–∏—Ç–µ–ª—å"`)
                context.send("‚úÖ –§—Ä–∞–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞!\n–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –¥–æ—Ä–æ–≥–∏ —á–µ—Ä–µ–∑ –ì–ú-–º–µ–Ω—é", {keyboard: keyboard.build(current_keyboard)})
                return resolve()
            }
            catch (e)
            {
                await ErrorHandler.SendLogs(context, "–°–æ–∑–¥–∞–Ω–∏–µ —Ñ—Ä–∞–∫—Ü–∏–∏", e)
            }
        })
    }

    async ChangeRole(context, current_keyboard, tools)
    {
        return new Promise(async (resolve, reject) => {
            try
            {
                const user = await InputManager.SearchUser(context, "1Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä–æ–∫–∞.", current_keyboard)
                if (!user) return reject()
                if(NameLibrary.RoleEstimator(context.player.role) <= NameLibrary.RoleEstimator(user.dataValues.role))
                {
                    context.send(`‚õî –í—ã –Ω–µ –∏–º–µ–µ—Ç–µ –ø—Ä–∞–≤–∞ –∏–∑–º–µ–Ω—è—Ç—å —Ä–æ–ª—å –∏–≥—Ä–æ–∫–∞ *id${user.dataValues.id}(${user.dataValues.nick}).`, {
                        keyboard: keyboard.build(current_keyboard)
                    })
                    return reject()
                }

                let giveRoleKB = [
                    [keyboard.playerButton, keyboard.moderatorButton, keyboard.GMButton],
                    [],
                    [keyboard.cancelButton]
                ]
                context.player.role.match(/owner|project_head|support/) && giveRoleKB[1].push(keyboard.adminButton)
                context.player.role.match(/owner|project_head/) && giveRoleKB[1].push(keyboard.supportButton)
                context.player.role.match(/owner/) && giveRoleKB[1].push(keyboard.projectHeadButton)

                let role = await InputManager.ChooseButton(
                    context,
                    `‚úÖ –í—ã–±—Ä–∞–Ω –∏–≥—Ä–æ–∫ —Å –Ω–∏–∫–æ–º *id${user.dataValues.id}(${user.dataValues.nick})\n2Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é —Ä–æ–ª—å.`,
                    giveRoleKB,
                    current_keyboard)
                if(role === "cancel")
                {
                    context.send('‚õî –ü–æ–∏—Å–∫ –∏–≥—Ä–æ–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω.', {
                        keyboard: keyboard.build([
                            [keyboard.statsButton, keyboard.controlsButton],
                            [keyboard.giveRoleButton, keyboard.sqlButton],
                            [keyboard.backButton]
                        ])
                    })
                    return reject()
                }

                user.set({role: role})
                await user.save()
                let newRole = NameLibrary.GetRoleName(role)
                if(Data.users[user.dataValues.id])
                {
                    Data.users[user.dataValues.id].role = role
                    Data.users[user.dataValues.id].state = tools.StayInStartScreen
                }

                await api.SendMessage(
                    user.dataValues.id,
                    `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å *id${context.player.id}(${context.player.nick}) –Ω–∞–∑–Ω–∞—á–∏–ª –≤–∞—Å –Ω–∞ —Ä–æ–ª—å: ${newRole}`,
                    tools.GetStartMenuKeyboard(context))
                await context.send(`–ò–≥—Ä–æ–∫ *id${user.dataValues.id}(${user.dataValues.nick}) –Ω–∞–∑–Ω–∞—á–µ–Ω –Ω–∞ —Ä–æ–ª—å: ${newRole}`, {
                    keyboard: keyboard.build(current_keyboard)
                })
                return resolve()
            }
            catch (e)
            {
                await ErrorHandler.SendLogs(context, "–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–æ–ª–∏", e)
            }
        })
    }

    async AppointLeader(context, current_keyboard)
    {
        return new Promise(async (resolve, reject) => {
            try
            {
                // –í—ã–±–æ—Ä –≥–æ—Å-–≤–∞
                const buttons = Data.GetCountryButtons()
                if(buttons.length === 0)
                {
                    await context.send("‚ö† –ù–∏ –æ–¥–Ω–∞ —Ñ—Ä–∞–∫—Ü–∏—è –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞.")
                    return reject()
                }
                let country = await InputManager.KeyboardBuilder(context, "1Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–æ", buttons, current_keyboard)
                if(!country) return reject()
                country = Data.ParseButtonID(country)

                //–ü–æ–∏—Å–∫ –∏–≥—Ä–æ–∫–∞
                let newLeader = await InputManager.SearchUser(context, "2Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
                if(!newLeader) return reject()

                //–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
                if(newLeader.dataValues.status === "leader")
                {
                    await context.send(`‚ö† *id${newLeader.dataValues.id}(${newLeader.dataValues.nick}) —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –ø—Ä–∞–≤–∏—Ç–µ–ª–µ–º!`)
                    return reject()
                }
                const access = await InputManager.InputBoolean(context, "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?", current_keyboard)
                if(!access) return

                const newLeaderStatus = await PlayerStatus.findOne({where: {id: newLeader.dataValues.id}})
                const newLeaderCountry = await Country.findOne({where: {id: country}})
                const newLeaderCountryCapital = await City.findOne({where: {capitalID: country}})
                const oldLeader = await Player.findOne({where: {id: newLeaderCountry.dataValues.leaderID}})

                oldLeader.set({
                    status: "citizen"
                })
                newLeader.set({
                    status: "leader"
                })
                newLeaderStatus.set({
                    location: newLeaderCountry.dataValues.id,
                    citizenship: newLeaderCountry.dataValues.id
                })
                newLeaderCountry.set({
                    leaderID: newLeader.dataValues.id
                })
                newLeaderCountryCapital.set({
                    leaderID: newLeader.dataValues.id
                })
                await newLeader.save()
                await newLeaderStatus.save()
                await newLeaderCountry.save()
                await newLeaderCountryCapital.save()

                await api.SendMessage(
                    oldLeader.dataValues.id,
                    `‚ö† –í—ã –±—ã–ª–∏ —Å–Ω—è—Ç—ã —Å –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ –ø—Ä–∞–≤–∏—Ç–µ–ª—è —Ñ—Ä–∞–∫—Ü–∏–∏ ${newLeaderCountry.dataValues.name}\nü™™ –í–∞—à —Å—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ "–ì—Ä–∞–∂–¥–∞–Ω–∏–Ω"`)
                await api.SendMessage(
                    newLeader.dataValues.id,
                    `‚úÖ –í—ã –±—ã–ª–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –ø—Ä–∞–≤–∏—Ç–µ–ª–µ–º —Ñ—Ä–∞–∫—Ü–∏–∏ ${newLeaderCountry.dataValues.name}\nüëë –í–∞—à —Å—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ "–ü—Ä–∞–≤–∏—Ç–µ–ª—å"`)

                context.send(`‚úÖ *id${newLeader.dataValues.id}(${newLeader.dataValues.nick}) –Ω–∞–∑–Ω–∞—á–µ–Ω –ø—Ä–∞–≤–∏—Ç–µ–ª–µ–º —Ñ—Ä–∞–∫—Ü–∏–∏ ${newLeaderCountry.dataValues.name}`, {keyboard: keyboard.build(current_keyboard)})
                return resolve()
            }
            catch (e)
            {
                await ErrorHandler.SendLogs(context, "–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–∞–≤–∏—Ç–µ–ª—è", e)
            }
        })
    }

    async ShowListWarnings(context, current_keyboard)
    {
        return new Promise(async (resolve, reject) => {
            try
            {
                const user = await InputManager.SearchUser(context, "1Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.", current_keyboard)
                if(!user) return reject()

                const warnings = await Warning.findAll({where: {id: user.dataValues.id}})
                if(warnings.length === 0)
                {
                    context.send(`‚ö† –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è *id${user.dataValues.id}(${user.dataValues.nick}) –Ω–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π`,
                        {
                            keyboard: keyboard.build(current_keyboard)
                        })
                    return reject()
                }
                for (const key of warnings)
                {
                    await context.send(`–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ—Ç ${key.dataValues.createdAt}:\n–ù–∏–∫: *id${user.dataValues.id}(${user.dataValues.nick})\n–ü—Ä–∏—á–∏–Ω–∞: ${key.dataValues.reason}\n–ü–æ–¥—Ä–æ–±–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞: ${key.dataValues.explanation}`)
                }
                return resolve()
            }
            catch (e)
            {
                await ErrorHandler.SendLogs(context, "–í—ã–≤–æ–¥ —Å–ø–∏—Å–∫–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π.", e)
            }
        })
    }

    async ShowBan(context, current_keyboard)
    {
        return new Promise(async (resolve, reject) => {
            try
            {
                const user = await InputManager.SearchUser(context, "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.", current_keyboard)
                if(!user) return reject()
                if(!user.dataValues.isBanned)
                {
                    context.send(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å *id${user.dataValues.id}(${user.dataValues.nick}) –Ω–µ –∑–∞–±–∞–Ω–µ–Ω.`,
                        {
                            keyboard: keyboard.build(current_keyboard)
                        })
                    return reject()
                }

                const ban = await Ban.findOne({where: {id: user.dataValues.id}})
                if(!ban)
                {
                    if (Data.users[user.dataValues.id]) Data.users[user.dataValues.id].isBanned = false
                    user.set({
                        isBanned: false
                    })
                    await user.save()
                    await api.SendMessage(user.dataValues.id, "‚ö† –í—ã –±—ã–ª–∏ —Ä–∞–∑–±–∞–Ω–µ–Ω—ã.")
                    context.send(`–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è *id${user.dataValues.id}(${user.dataValues.nick}) –Ω–µ—Ç –±–∞–Ω–∞. –í–∏–¥–∏–º–æ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, —Å–µ–π—á–∞—Å –≤—Å–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ.`)
                    return reject()
                }
                await context.send(`–ë–∞–Ω –æ—Ç ${ban.dataValues.createdAt}:\n–ù–∏–∫: *id${user.dataValues.id}(${user.dataValues.nick})\n–ü—Ä–∏—á–∏–Ω–∞: ${ban.dataValues.reason}\n–ü–æ–¥—Ä–æ–±–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞: ${ban.dataValues.explanation}`)
                return resolve()
            }
            catch (e)
            {
                await ErrorHandler.SendLogs(context, "–ë–∞–Ω—ã", e)
            }
        })
    }

    async CreateLastWill(context, current_keyboard)
    {
        return new Promise(async (resolve, reject) => {
            try
            {
                const user = await InputManager.SearchUser(context, "1Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É –∑–∞–≤–µ—â–∞–µ—Ç–µ –≤—Å–µ —Å–≤–æ–µ –∏–º—É—â–µ—Å—Ç–≤–æ", current_keyboard)
                if(!user) return reject()
                if(user.dataValues.id === context.player.id)
                {
                    context.send("‚ö† –£–∫–∞–∑—ã–≤–∞—Ç—å —Å–µ–±—è –≤ –∑–∞–≤–µ—â–∞–Ω–∏–∏ –∑–∞–ø—Ä–µ—â–µ–Ω–æ.")
                    return reject()
                }

                const lastWillText = await InputManager.InputString(context, "2Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–≤–µ—â–∞–Ω–∏—è. –≠—Ç–æ—Ç —Ç–µ–∫—Å—Ç –±—É–¥–µ—Ç –≤–∏–¥–µ–Ω —Ç–æ–ª—å–∫–æ –≤–∞–º –∏ –Ω–∞—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—é –ø–æ—Å–ª–µ –≤–∞—à–µ–π —Å–º–µ—Ä—Ç–∏. (–¥–æ 1000 —Å–∏–º–≤–æ–ª–æ–≤)", current_keyboard, 0, 1000)
                if (!lastWillText)
                {
                    await context.send("‚õî –û—Ç–º–µ–Ω–∞", {keyboard: keyboard.build(current_keyboard)})
                    return reject()
                }

                await LastWills.create({
                    userID: context.player.id,
                    text: lastWillText,
                    successorID: user.dataValues.id
                })
                current_keyboard[0][2] = keyboard.deleteLastWillButton
                await context.send("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –∑–∞–≤–µ—â–∞–Ω–∏–µ.", {keyboard: keyboard.build(current_keyboard)})
                await api.SendMessage(user.dataValues.id, `‚úÖ –ò–≥—Ä–æ–∫ ${await NameLibrary.GetPlayerNick(context.player.id)} –¥–æ–±–∞–≤–∏–ª –≤–∞—Å –≤ —Å–≤–æ—ë –∑–∞–≤–µ—â–∞–Ω–∏–µ.`)
            }
            catch (e)
            {
                await ErrorHandler.SendLogs(context, "–ù–∞–ø–∏—Å–∞–Ω–∏–µ –∑–∞–≤–µ—â–∞–Ω–∏—è.", e)
            }
        })
    }

    async DeleteLastWill(context, current_keyboard)
    {
        return new Promise(async (resolve, reject) => {
            try
            {
                const lastWill = await LastWills.findOne({where: {userID: context.player.id}})
                if(!lastWill) return reject()
                await context.send(`*id${context.player.id}(–í–∞—à–µ) –∑–∞–≤–µ—â–∞–Ω–∏–µ:\n–ù–∞—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å: ${await NameLibrary.GetPlayerNick(lastWill.dataValues.successorID)}\n–¢–µ–∫—Å—Ç:${lastWill.dataValues.text}`)
                const success = await InputManager.InputBoolean(context, "–í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–≤–æ–µ –∑–∞–≤–µ—â–∞–Ω–∏–µ?")
                if(!success) return reject()

                await LastWills.destroy({where: {userID: context.player.id}})
                current_keyboard[0][2] = keyboard.createLastWillButton
                await context.send("‚úÖ –ó–∞–≤–µ—â–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ.", {keyboard: keyboard.build(current_keyboard)})
                await api.SendMessage(lastWill.dataValues.successorID, `‚ö† –ò–≥—Ä–æ–∫ ${await NameLibrary.GetPlayerNick(context.player.id)} —É–¥–∞–ª–∏–ª —Å–≤–æ—ë –∑–∞–≤–µ—â–∞–Ω–∏–µ.`)
            }
            catch (e)
            {
                await ErrorHandler.SendLogs(context, "–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–≤–µ—â–∞–Ω–∏—è.", e)
            }
        })
    }

    async Relax(context, current_keyboard, scenes)
    {
        return new Promise(async (resolve) => {
            try
            {
                const need = (100 - context.player.fatigue) * 3.6
                const time = new Date()
                time.setMinutes(time.getMinutes() + need)
                const now = new Date()
                const minutes = (time - now) / 60000
                Data.users[context.player.id].lastActionTime = time
                if (Data.users[context.player.id].timeout)
                {
                    clearTimeout(Data.users[context.player.id].timeout)
                }
                Data.users[context.player.id].timeout = setTimeout(() => {
                    context.send("‚òï –° –¥–æ–±—Ä—ã–º —É—Ç—Ä–æ–º, —Ç–µ–ø–µ—Ä—å –≤—ã –ø–æ–ª–Ω—ã —Å–∏–ª.", {
                        keyboard: keyboard.build(current_keyboard)
                    })
                    Data.users[context.player.id].fatigue = 100
                    Data.users[context.player.id].state = scenes.Menu
                }, need * 60000)
                Data.users[context.player.id].state = scenes.Relaxing
                await context.send(`üí§ –°–ø–æ–∫–æ–π–Ω–æ–π –Ω–æ—á–∏, –¥–æ –ø–æ–ª–Ω–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–∏–ª ${Math.round(minutes)} –º–∏–Ω.`,
                    {
                        keyboard: keyboard.build([[keyboard.wakeupButton]])
                    })
                return resolve()
            }
            catch (e)
            {
                await ErrorHandler.SendLogs(context, "–ù–∞—á–∞–ª–æ –æ—Ç–¥—ã—Ö–∞", e)
            }
        })
    }

    // async GoTo(context, current_keyboard)
    // {
    //     return new Promise(async (resolve, reject) => {
    //         try
    //         {
    //             const location = await City.findOne({where: {id: context.player.location}})
    //             const localCities = await City.findAll({where: {countryID: location.dataValues.countryID}})
    //             const cities = []
    //             localCities.forEach(key => {
    //                 if(key.dataValues.id !== location.dataValues.id)
    //                 {
    //                     cities.push([key.dataValues.name, "ID" + key.dataValues.id])
    //                 }
    //             })
    //             cities.push(["–í –¥—Ä—É–≥—É—é —Ñ—Ä–∞–∫—Ü–∏—é", "other"])
    //
    //             context.send("–ö—É–¥–∞ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è?",
    //                 {
    //                     attachment: "photo565472458_457240344"
    //                 })
    //             let place = await InputManager.KeyboardBuilder(context, "–î–æ—Å—Ç—É–ø–Ω—ã–µ –≥–æ—Ä–æ–¥–∞ (–ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –¥–ª–∏—Ç—Å—è 36 –º–∏–Ω—É—Ç)", cities, current_keyboard)
    //             if(!place) return reject()
    //             if(place === "other")
    //             {
    //                 context.send("–ó–¥–µ—Å—å –±—É–¥–µ—Ç –≤—ã–±–æ—Ä –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–∞")
    //             }
    //             else
    //             {
    //                 place = Data.ParseButtonID(place)
    //                 Data.users[context.player.id].state = SceneController.WaitingWalkMenu
    //                 if(context.player.role.match(/owner|project_head|support|admin/))
    //                 {
    //                     context.send(`‚úÖ –í—ã –ø—Ä–∏—à–ª–∏ –≤ –≥–æ—Ä–æ–¥ ${Data.cities[place].name}`)
    //                     Data.users[context.player.id].location = place
    //                     Data.users[context.player.id].state = SceneController.StayInStartScreen
    //                 }
    //                 else
    //                 {
    //                     Data.users[context.player.id].timeout = setTimeout(() => {
    //                         context.send(`‚úÖ –í—ã –ø—Ä–∏—à–ª–∏ –≤ –≥–æ—Ä–æ–¥ ${Data.cities[place].name}`)
    //                         Data.users[context.player.id].location = place
    //                         Data.users[context.player.id].state = SceneController.StayInStartScreen
    //                     },  Data.variables["cityToCityTime"])
    //                 }
    //             }
    //         }
    //         catch (e)
    //         {
    //             await ErrorHandler.SendLogs(context, "–í—ã–±–æ—Ä –∫—É–¥–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è", e)
    //         }
    //     })
    // }

    async DeleteBuildingForMayor(context, current_keyboard)
    {
        return new Promise(async (resolve, reject) => {
            try
            {
                const buildings = await Buildings.findAll({where: {cityID: context.cityID}})
                let kb = []
                for (let i = 0; i < buildings.length; i++)
                {
                    if(buildings[i].dataValues.ownerID === "country")
                    {
                        kb.push([NameLibrary.GetBuildingName(buildings[i].dataValues.type) + " " + buildings[i].dataValues.name, "ID" + buildings[i].dataValues.id])
                    }
                }
                const buildingID = await InputManager.KeyboardBuilder(context, "–í—ã–±–µ—Ä–∏—Ç–µ –∑–¥–∞–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —Å–Ω–µ—Å—Ç–∏ (–≤—ã –º–æ–∂–µ—Ç–µ —Ä–∞—Å–ø–æ—Ä—è–∂–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –∑–¥–∞–Ω–∏—è–º–∏)", kb, current_keyboard)
                if(!buildingID) return reject()

                const accept = await InputManager.InputBoolean(context, `–°–Ω–æ—Å –∑–¥–∞–Ω–∏—è —Å—Ç–æ–∏—Ç 200 –º–æ–Ω–µ—Ç. –°–µ–π—á–∞—Å –≤ –±—é–¥–∂–µ—Ç–µ ${Data.cities[context.cityID].resources.money} –º–æ–Ω–µ—Ç.\n–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ–¥–∏—Ç–µ —Å–Ω–µ—Å—Ç–∏ —ç—Ç–æ –∑–¥–∞–Ω–∏–µ?`)
                if (!accept) return reject()
                if(Data.cities[context.cityID].resources.money < 200)
                {
                    await context.send("–í –±—é–¥–∂–µ—Ç–µ –≥–æ—Ä–æ–¥–∞ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –º–æ–Ω–µ—Ç!")
                }
                await Data.AddCityResources(context.cityID, {money: -200})
                await context.send("–ó–¥–∞–Ω–∏–µ —Å–Ω–µ—Å–µ–Ω–æ.", {keyboard: keyboard.build(current_keyboard)})
            }
            catch (e)
            {
                await ErrorHandler.SendLogs(context, "–ú—ç—Ä —É–¥–∞–ª—è–µ—Ç –∑–¥–∞–Ω–∏–µ", e)
            }
        })
    }

    async CreateBuildingForMayor(context, current_keyboard)
    {
        return new Promise(async (resolve, reject) => {
            try
            {
                const buildings = await Buildings.findAll({where: {cityID: context.cityID}})
                let kb = []
                for (let i = 0; i < buildings.length; i++)
                {
                    if(buildings[i].dataValues.ownerID === "country")
                    {
                        kb.push([NameLibrary.GetBuildingName(buildings[i].dataValues.type) + " " + buildings[i].dataValues.name, "ID" + buildings[i].dataValues.id])
                    }
                }
                const buildingID = await InputManager.KeyboardBuilder(context, "–í—ã–±–µ—Ä–∏—Ç–µ –∑–¥–∞–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —Å–Ω–µ—Å—Ç–∏ (–≤—ã –º–æ–∂–µ—Ç–µ —Ä–∞—Å–ø–æ—Ä—è–∂–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –∑–¥–∞–Ω–∏—è–º–∏)", kb, current_keyboard)
                if(!buildingID) return reject()

                const accept = await InputManager.InputBoolean(context, `–°–Ω–æ—Å –∑–¥–∞–Ω–∏—è —Å—Ç–æ–∏—Ç 200 –º–æ–Ω–µ—Ç.\n–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ–¥–∏—Ç–µ —Å–Ω–µ—Å—Ç–∏ —ç—Ç–æ –∑–¥–∞–Ω–∏–µ?`)
                if (!accept) return reject()
                if(Data.cities[context.cityID].resources.money < 200)
                {
                    await context.send("–í –±—é–¥–∂–µ—Ç–µ –≥–æ—Ä–æ–¥–∞ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –º–æ–Ω–µ—Ç!")
                }
                await Data.AddCityResources(context.cityID, {money: -200})
                await context.send("–ó–¥–∞–Ω–∏–µ —Å–Ω–µ—Å–µ–Ω–æ.", {keyboard: keyboard.build(current_keyboard)})
            }
            catch (e)
            {
                await ErrorHandler.SendLogs(context, "–ú—ç—Ä —Å–æ–∑–¥–∞–µ—Ç –∑–¥–∞–Ω–∏–µ", e)
            }
        })
    }

    async OfferMarry(context, current_keyboard)
    {
        return new Promise(async (resolve, reject) => {
            try
            {

            }
            catch (e)
            {
                await ErrorHandler.SendLogs(context, "–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å–≤–∞–¥—å–±—ã", e)
            }
        })
    }
}

module.exports = new BuildersAndControlsScripts()