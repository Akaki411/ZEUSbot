const InputManager = require("./InputManager");
const OutputManager = require("./OutputManager")
const Data = require("../models/CacheData");
const keyboard = require("../variables/Keyboards");
const {City, Country, PlayerStatus, Player, Ban, LastWills, Buildings,
    CountryResources, CityResources, PlayerInfo, CountryRoads, Keys, OfficialInfo, PlayerResources, Messages
} = require("../database/Models");
const api = require("../middleware/API");
const ErrorHandler = require("../error/ErrorHandler")
const NameLibrary = require("../variables/NameLibrary")
const Prices = require("../variables/Prices")
const Nations = require("../variables/Nations")
const sequelize = require("../database/DataBase")
const upload = require("../middleware/Upload")
const fs = require('fs')
const path = require("path")

class BuildersAndControlsScripts
{
    async Registration(context, current_keyboard, scenes)
    {
        return new Promise(async (resolve) => {
            try
            {
                const peerInfo = await api.GetUserData(context.peerId)

                let name = await InputManager.InputString(context, `‚úçüèæ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–∞–Ω—Ü–µ–ª—è—Ä–∏—é.\n\n*id${context.peerId} (${peerInfo.first_name}), –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ –ø—Ä–æ–µ–∫—Ç–µ *public218388422 (¬´ZEUS - –í—Å–µ–ª–µ–Ω–Ω–∞—è –∏–≥—Ä–æ–∫–æ–≤¬ª).\n\n1Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫–Ω–µ–π–º, –∫–æ—Ç–æ—Ä—ã–º –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤ –±—É–¥—É—â–µ–º. –£—á—Ç–∏—Ç–µ, —á—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–Ω—Ç–∏—á–Ω–æ–µ –∏–º—è, —Ä–µ–∞–ª—å–Ω–æ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–≤—à–µ–µ –≤ –∏—Å—Ç–æ—Ä–∏–∏. –°–æ —Å–ø–∏—Å–∫–æ–º —Ç–∞–∫–∏—Ö –≤—ã –º–æ–∂–µ—Ç–µ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è –Ω–∏–∂–µ.\nüëâüèæ –ì—Ä–µ—á–µ—Å–∫–∏–µ –∏–º–µ–Ω–∞: https://ru.m.wikipedia.org/wiki/–°–ø–∏—Å–æ–∫_–∏–º—ë–Ω_–≥—Ä–µ—á–µ—Å–∫–æ–≥–æ_–ø—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏—è\nüëâüèæ –†–∏–º—Å–∫–∏–µ –∏–º–µ–Ω–∞: https://ru.m.wikipedia.org/wiki/–†–∏–º—Å–∫–∏–µ_–∏–º–µ–Ω–∞\nüëâüèæ –ü–µ—Ä—Å–∏–¥—Å–∫–∏–µ –∏–º–µ–Ω–∞: https://ru.m.wikipedia.org/wiki/–ü–µ—Ä—Å–∏–¥—Å–∫–∏–µ_–∏–º–µ–Ω–∞`, current_keyboard,2, 20)
                if(!name) return resolve()
                let temp = await Player.findOne({where: {nick: name}})
                while(temp)
                {
                    name = await InputManager.InputString(context, `‚ö† –≠—Ç–æ—Ç –Ω–∏–∫ –∑–∞–Ω—è—Ç`, current_keyboard, 2, 20)
                    if(!name) return resolve()
                    temp = await Player.findOne({where: {nick: name}})
                }

                const age = await InputManager.InputInteger(context, `2Ô∏è‚É£ –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç –≤–∞—à–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞.\n‚ö† –í–æ–∑—Ä–∞—Å—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã–±—Ä–∞–Ω –æ—Ç 16 –¥–æ 100 –ª–µ—Ç.`, current_keyboard, 16, 100)
                if(age === null) return resolve()

                const gender = await InputManager.InputBoolean(context, `3Ô∏è‚É£ –£–∫–∞–∂–∏—Ç–µ –ø–æ–ª –≤–∞—à–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞.`, current_keyboard, keyboard.manButton, keyboard.womanButton)
                if(gender === null) return resolve()

                const description = await InputManager.InputString(context, `4Ô∏è‚É£ –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–≤–æ—ë–º –ø–µ—Ä—Å–æ–Ω–∞–∂–µ! –û—Ç–∫—É–¥–∞ –æ–Ω —Ä–æ–¥–æ–º, —á–µ–º –∑–∞–Ω–∏–º–∞–µ—Ç—Å—è. –í–æ–∑–º–æ–∂–Ω–æ –µ—Å—Ç—å –ª–∏ —É –Ω–µ–≥–æ —Å–µ–º—å—è, –¥–µ—Ç–∏. –° –∫–∞–∫–æ–π —Ü–µ–ª—å—é –æ–Ω –ø—Ä–∏—à—ë–ª –≤ —Ç–æ –º–µ—Å—Ç–æ, –≥–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —Å–µ–π—á–∞—Å.\n‚ö† –î–ª–∏–Ω–∞ –¥–æ 1000 —Å–∏–º–≤–æ–ª–æ–≤.`, current_keyboard, 0, 1000)
                if(!description) return resolve()

                const nationKeyboard = []
                Object.keys(Nations).forEach(key => {
                    nationKeyboard.push([Nations[key].name, key])
                })
                let nation = await InputManager.KeyboardBuilder(context, "5Ô∏è‚É£ –ö–∞–∫–æ–≤–∞ –Ω–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –≤–∞—à–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞?", nationKeyboard, current_keyboard)
                await context.send(Nations[nation].description)
                nation = Nations[nation].name

                let location = await InputManager.KeyboardBuilder(context, "6Ô∏è‚É£ –ü–æ—á—Ç–∏ –≥–æ—Ç–æ–≤–æ, —Ç–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –≤ –∫–∞–∫–æ–π —Ñ—Ä–∞–∫—Ü–∏–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ—è–≤–∏—Ç—å—Å—è –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.", Data.GetCountryButtons(), current_keyboard)
                if(!location) return resolve()
                location = Data.ParseButtonID(location)

                await context.send(`‚Ñπ –í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ —Å—Ç–æ–ª–∏—Ü–µ —Ñ—Ä–∞–∫—Ü–∏–∏ ${Data.countries[location].GetName()} - –≥–æ—Ä–æ–¥–µ ${Data.cities[Data.countries[location].capitalID].name}\n\n${Data.countries[location].description}`, {attachment: Data.countries[location].welcomePhotoURL})
                const user = await Player.create({
                    id: context.peerId,
                    nick: name,
                    gender: gender
                })
                const status = await PlayerStatus.create({
                    id: context.peerId,
                    location: Data.countries[location].capitalID,
                    countryID: Data.countries[location].id
                })
                const info = await PlayerInfo.create({
                    id: context.peerId,
                    description: description,
                    nationality: nation,
                    age: age
                })
                const resources = await PlayerResources.create({id: context.peerId})
                Data.users[context.peerId] = new scenes.User(user, status, info, resources)
                Data.users[context.peerId].state = scenes.StartMenu
                context.player = Data.users[context.peerId]

                let kb = scenes.StartMenuKeyboard(context)

                await context.send(`üèÅ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞, *id${context.peerId}(${name}). –†–∞–¥—É–π—Ç–µ—Å—å –∫–∞–∂–¥–æ–º—É –¥–Ω—é, –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω–æ–º—É –≤ —ç—Ç–æ–º –º–∏—Ä–µ. –ü—É—Å—Ç—å –ë–æ–≥–∏ –æ–±–µ—Ä–µ–≥–∞—é—Ç –≤–∞—à –ø—É—Ç—å...\n\n‚Ñπ –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –±–ª–∏–∂–µ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –∫–æ–º–∞–Ω–¥–∞–º–∏ –∏ –ø—Ä–æ–µ–∫—Ç–æ–º, —Ç–æ –∏–∑—É—á–∏—Ç–µ –Ω–∞—à—É –≥—Ä—É–ø–ø—É. –î–ª—è –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω–∏—è —Å –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–∞–º–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª \"–õ–æ–∫–∞—Ü–∏—è\", –¥–ª—è –≥–ª—É–±–∏–Ω–Ω–æ–≥–æ –∏–∑—É—á–µ–Ω–∏—è –º–æ–∂–µ—Ç–µ –ø–æ—Å–µ—Ç–∏—Ç—å —Å–æ–æ–±—â–µ—Å—Ç–≤–∞. –í—ã–±–∏—Ä–∞–π—Ç–µ —Å —É–º–æ–º!`, {
                    keyboard: keyboard.build(kb)
                })
                await OutputManager.SendCountryCarousel(context)
            }
            catch (e)
            {
                context.player = {
                    id: context.peerId,
                    nick: "–ù–µ–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
                }
                await ErrorHandler.SendLogs(context, "Registration", e)
            }
        })
    }

    async NewCountry(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                let name = await InputManager.InputString(context, "1Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ—Ä–∞–∫—Ü–∏–∏ (–æ—Ç 2 –¥–æ 30 —Å–∏–º–≤–æ–ª–æ–≤):", current_keyboard, 2, 30)
                if (!name) return resolve()
                let country = await Country.count({where: {name: name}})
                while(country > 0)
                {
                    name = await InputManager.InputString(context, "‚ö† –§—Ä–∞–∫—Ü–∏—è —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.", current_keyboard, 2,30)
                    if (!name) return resolve()
                    country = await Country.count({where: {name: name}})
                }

                const description = await InputManager.InputString(context,"2Ô∏è‚É£ –°–¥–µ–ª–∞–π—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ñ—Ä–∞–∫—Ü–∏–∏. (–¥–æ 1000 —Å–∏–º–≤–æ–ª–æ–≤)",current_keyboard,0,1000)
                if(!description) return resolve()

                const preview = await InputManager.InputPhoto(context,`3Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è –∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏–∏.\n‚ö† –≠—Ç–æ —Ñ–æ—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–∞—Ä—É—Å–µ–ª–∏ —Å —Ñ—Ä–∞–∫—Ü–∏—è–º–∏ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –∏–≥—Ä–æ–∫–æ–≤, —Å–æ–∑–¥–∞—Ç—å —Ñ—Ä–∞–∫—Ü–∏—é –±–µ–∑ —Ñ–æ—Ç–æ - –Ω–µ–ª—å–∑—è.\n\n‚ö†‚ö†‚ö† –¢—Ä–µ–±—É–µ—Ç—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ —Å —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ–º —Å—Ç–æ—Ä–æ–Ω 13/8 (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ 650x400), –∏–Ω–∞—á–µ –±—É–¥—É—Ç –æ—à–∏–±–∫–∏ —Å –∫–∞—Ä—É—Å–µ–ª—å—é, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –≤—ã–ª–µ—Ç—É\n\n–ë—ã—Å—Ç—Ä–æ –∏–∑–º–µ–Ω–∏—Ç—å —Ä–∞–∑–º–µ—Ä —Ñ–æ—Ç–æ –º–æ–∂–Ω–æ –∑–¥–µ—Å—å: https://www.visualwatermark.com/ru/image-resizer/`, current_keyboard)
                if (!preview) return resolve()

                const welcomePhoto = await InputManager.InputPhoto(context,`4Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Ñ–æ—Ç–æ\n‚ö† –≠—Ç–æ —Ñ–æ—Ç–æ –±—É–¥–µ—Ç –≤—Å—Ç—Ä–µ—á–∞—Ç—å –Ω–æ–≤—ã—Ö –≥—Ä–∞–∂–¥–∞–Ω. (–§–æ—Ç–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)`, current_keyboard)
                if(!welcomePhoto) return resolve()

                let capitalName = await InputManager.InputString(context, "5Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–æ–ª–∏—Ü—ã (–æ—Ç 2 –¥–æ 30 —Å–∏–º–≤–æ–ª–æ–≤):", current_keyboard, 2,30)
                if (!capitalName) return resolve()

                let capital = await City.count({where: {name: capitalName}})
                while(capital > 0)
                {
                    capitalName = await InputManager.InputString(context, "‚ö† –ì–æ—Ä–æ–¥ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.", current_keyboard, 2, 30)
                    if (!capitalName) return resolve()
                    capital = await City.count({where: {name: capitalName}})
                }

                let leader = await InputManager.InputUser(context, "6Ô∏è‚É£ –¢–µ–ø–µ—Ä—å –Ω—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –ø—Ä–∞–≤–∏—Ç–µ–ª—è.")
                if(!leader) return resolve()
                while(leader.dataValues.status === "leader")
                {
                    leader = await InputManager.InputUser(context, `‚ö† *id${leader.dataValues.id}(${leader.dataValues.nick}) —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –ø—Ä–∞–≤–∏—Ç–µ–ª–µ–º. –ó–∞–±–µ—Ä–∏—Ç–µ —É –Ω–µ–≥–æ —Å—Ç–∞—Ç—É—Å –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–≥–æ –∏–≥—Ä–æ–∫–∞.`)
                    if(!leader) return resolve()
                }
                let groupId = await InputManager.InputGroup(context, `7Ô∏è‚É£ –£–∫–∞–∂–∏—Ç–µ –≥—Ä—É–ø–ø—É —ç—Ç–æ–π —Ñ—Ä–∞–∫—Ü–∏–∏.`, current_keyboard)
                if(!groupId) return resolve()

                let resourcesKeyboard = [
                    ["üåæ –ó–µ—Ä–Ω–æ", "wheat", false],
                    ["ü™µ –î—Ä–µ–≤–µ—Å–∏–Ω–∞", "wood", false],
                    ["ü™® –ö–∞–º–µ–Ω—å", "stone", false],
                    ["üåë –ñ–µ–ª–µ–∑–æ", "iron", false],
                    ["ü•â –ë—Ä–æ–Ω–∑–∞", "copper", false],
                    ["ü•à –°–µ—Ä–µ–±—Ä–æ", "silver", false]
                ]
                let resources = await InputManager.RadioKeyboardBuilder(context, "8Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ—Å—É—Ä—Å—ã —Ñ—Ä–∞–∫—Ü–∏–∏:", resourcesKeyboard, current_keyboard)
                if(!resources) return resolve()
                resources = resources.filter(key => {
                    return key[1]
                }).map(key => {
                    return key[0]
                })
                let resName = ""
                 resources.forEach(key => {
                     resName += NameLibrary.GetResourceName(key) + "\n"
                })
                resources = resources.join(".")

                let budget = {}
                budget.money = await InputManager.InputInteger(context, "üí∞ –í–≤–µ–¥–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—ã–π –∑–∞–ø–∞—Å –º–æ–Ω–µ—Ç", current_keyboard)
                if (budget.money === null) return resolve()
                budget.wheat = await InputManager.InputInteger(context, "üåæ –í–≤–µ–¥–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—ã–π –∑–∞–ø–∞—Å –∑–µ—Ä–Ω–∞", current_keyboard, 0)
                if(budget.wheat === null) return resolve()
                budget.wood = await InputManager.InputInteger(context, "ü™µ –í–≤–µ–¥–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—ã–π –∑–∞–ø–∞—Å –¥—Ä–µ–≤–µ—Å–∏–Ω—ã", current_keyboard, 0)
                if(budget.wood === null) return resolve()
                budget.stone = await InputManager.InputInteger(context, "ü™® –í–≤–µ–¥–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—ã–π –∑–∞–ø–∞—Å –∫–∞–º–Ω—è", current_keyboard, 0)
                if(budget.stone === null) return resolve()
                budget.iron = await InputManager.InputInteger(context, "üåë –í–≤–µ–¥–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—ã–π –∑–∞–ø–∞—Å –∂–µ–ª–µ–∑–∞", current_keyboard, 0)
                if(budget.iron === null) return resolve()
                budget.copper = await InputManager.InputInteger(context, "ü™ô –í–≤–µ–¥–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—ã–π –∑–∞–ø–∞—Å –º–µ–¥–∏", current_keyboard, 0)
                if(budget.copper === null) return resolve()
                budget.silver = await InputManager.InputInteger(context, "ü•à –í–≤–µ–¥–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—ã–π –∑–∞–ø–∞—Å —Å–µ—Ä–µ–±—Ä–∞", current_keyboard, 0)
                if(budget.silver === null) return resolve()
                budget.diamond = await InputManager.InputInteger(context, "üíé –í–≤–µ–¥–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—ã–π –∑–∞–ø–∞—Å –∞–ª–º–∞–∑–æ–≤", current_keyboard, 0)
                if(budget.diamond === null) return resolve()

                let accept = await InputManager.InputBoolean(context, `–ò—Ç–∞–∫, –º—ã –∏–º–µ–µ–º —Å–ª–µ–¥—É—é—â–µ–µ:\n\nüìå –ù–∞–∑–≤–∞–Ω–∏–µ: *public${groupId}(${name})\nüèô –°—Ç–æ–ª–∏—Ü–∞: ${capitalName}\nüëë –ü—Ä–∞–≤–∏—Ç–µ–ª—å: *id${leader.dataValues.id}(${leader.dataValues.nick})\n\n‚õè –†–µ—Å—É—Ä—Å—ã –¥–ª—è –¥–æ–±—ã—á–∏:\n ${resName}\n\n–ù–∞—á–∞–ª—å–Ω—ã–π –±—é–¥–∂–µ—Ç:\n${NameLibrary.GetPrice(budget)}\n\n–í–µ—Ä–Ω–æ?`, current_keyboard)
                if(!accept)
                {
                    await context.send('‚õî –í–≤–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω.', {
                        keyboard: keyboard.build(current_keyboard)
                    })
                    return resolve()
                }

                const city = await City.create({
                    leaderID: leader.dataValues.id,
                    name: capitalName,
                    description: `–°—Ç–æ–ª–∏—Ü–∞ —Ñ—Ä–∞–∫—Ü–∏–∏ *public${groupId}(${name})`,
                    photoURL: preview,
                    isCapital: true,
                    maxBuildings: 8
                })
                await CityResources.create({
                    id: city.dataValues.id
                })
                country = await Country.create({
                    name: name,
                    description: description,
                    photoURL: preview,
                    welcomePhotoURL: welcomePhoto,
                    leaderID: leader.dataValues.id,
                    groupID: groupId,
                    resources: resources,
                    capital: capitalName,
                    capitalID: city.dataValues.id
                })
                await CountryResources.create({
                    id: country.dataValues.id,
                    money: budget.money,
                    wheat: budget.wheat,
                    stone: budget.stone,
                    wood: budget.wood,
                    iron: budget.iron,
                    copper: budget.copper,
                    silver: budget.silver,
                    diamond: budget.diamond
                })
                await PlayerStatus.update({
                    location: city.dataValues.id,
                    countryID: country.dataValues.id,
                    citizenship: country.dataValues.id
                }, {where: {id: leader.dataValues.id}})
                city.set({
                    countryID: country.dataValues.id,
                    capitalID: country.dataValues.id
                })
                leader.set({
                    status: leader.dataValues.status === "worker" ? "worker" : "leader"
                })
                await city.save()
                await leader.save()

                if(Data.users[leader.dataValues.id]?.status !== "worker") Data.users[leader.dataValues.id].status = "leader"
                await Data.LoadCountries()
                await Data.LoadCities()
                await Data.LoadOfficials()
                await api.SendMessage(leader.dataValues.id,`üëë –í—ã –±—ã–ª–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –ø—Ä–∞–≤–∏—Ç–µ–ª–µ–º —Ç–æ–ª—å–∫–æ —á—Ç–æ —Å–æ–∑–¥–∞–Ω–Ω–æ–π —Ñ—Ä–∞–∫—Ü–∏–∏ ${name}\n–í–∞—à —Å—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ "üëë –ü—Ä–∞–≤–∏—Ç–µ–ª—å"`)
                context.send("‚úÖ –§—Ä–∞–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞!\n–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –¥–æ—Ä–æ–≥–∏ —á–µ—Ä–µ–∑ –ì–ú-–º–µ–Ω—é", {keyboard: keyboard.build(current_keyboard)})
                return resolve()
            }
            catch (e)
            {
                await ErrorHandler.SendLogs(context, "NewCountry", e)
            }
        })
    }

    async ChangeRole(context, current_keyboard, tools)
    {
        return new Promise(async (resolve) => {
            try
            {
                const user = await InputManager.InputUser(context, "1Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä–æ–∫–∞.", current_keyboard)
                if (!user) return resolve()
                if(NameLibrary.RoleEstimator(context.player.role) <= NameLibrary.RoleEstimator(user.dataValues.role))
                {
                    context.send(`‚õî –í—ã –Ω–µ –∏–º–µ–µ—Ç–µ –ø—Ä–∞–≤–∞ –∏–∑–º–µ–Ω—è—Ç—å —Ä–æ–ª—å –∏–≥—Ä–æ–∫–∞ *id${user.dataValues.id}(${user.dataValues.nick}).`, {
                        keyboard: keyboard.build(current_keyboard)
                    })
                    return resolve()
                }

                let giveRoleKB = [
                    ["üë∂ –ò–≥—Ä–æ–∫", "player"],
                    ["üßí –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä", "moder"],
                    ["üßë –ì–µ–π–º-–º–∞—Å—Ç–µ—Ä", "GM"]
                ]
                context.player.role.match(/owner|project_head|support/) && giveRoleKB.push(["üë®‚Äçü¶≥ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä", "admin"])
                context.player.role.match(/owner|project_head|support/) && giveRoleKB.push(["üîß –¢–µ—Ö-–ø–æ–¥–¥–µ—Ä–∂–∫–∞", "support"])
                context.player.role.match(/owner/) && giveRoleKB.push(["ü§¥ –ì–ª–∞–≤–∞ –ø—Ä–æ–µ–∫—Ç–∞", "project_head"])

                let role = await InputManager.KeyboardBuilder(context, `‚úÖ –í—ã–±—Ä–∞–Ω –∏–≥—Ä–æ–∫ *id${user.dataValues.id}(${user.dataValues.nick})\n2Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é —Ä–æ–ª—å.`, giveRoleKB, current_keyboard)
                if(!role) return resolve()
                const status = role === "player" ? await Data.GetUserStatus(user.dataValues.id) : "worker"
                user.set({role: role, status: status})
                await user.save()
                if(Data.users[user.dataValues.id])
                {
                    Data.users[user.dataValues.id].status = status
                    Data.users[user.dataValues.id].role = role
                    Data.users[user.dataValues.id].state = tools.StayInStartScreen
                }
                role = NameLibrary.GetRoleName(role)
                await api.SendMessageWithKeyboard(user.dataValues.id, `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å *id${context.player.id}(${context.player.nick}) –Ω–∞–∑–Ω–∞—á–∏–ª –≤–∞—Å –Ω–∞ —Ä–æ–ª—å: ${role}`, tools.GetStartMenuKeyboard(context))
                await context.send(`–ò–≥—Ä–æ–∫ *id${user.dataValues.id}(${user.dataValues.nick}) –Ω–∞–∑–Ω–∞—á–µ–Ω –Ω–∞ —Ä–æ–ª—å: ${role}`, {keyboard: keyboard.build(current_keyboard)})
                await Data.LoadWorkers()
                return resolve()
            }
            catch (e)
            {
                await ErrorHandler.SendLogs(context, "ChangeRole", e)
            }
        })
    }

    async AppointLeader(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                const buttons = Data.GetCountryButtons()
                if(buttons.length === 0)
                {
                    await context.send("‚ö† –§—Ä–∞–∫—Ü–∏–∏ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã.")
                    return resolve()
                }
                let country = await InputManager.KeyboardBuilder(context, "1Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–æ", buttons, current_keyboard)
                if(!country) return resolve()
                country = Data.ParseButtonID(country)
                country = Data.countries[country]

                let user = await InputManager.InputUser(context, "2Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", current_keyboard)
                if(!user) return resolve()
                let oldCountry = null
                for(let i = 0; i < Data.countries?.length; i++)
                {
                    if(Data.countries[i]?.leaderID === user.dataValues.id)
                    {
                        oldCountry = await Country.findOne({where: {id: Data.countries[i].id}})
                        await context.send(`‚ö† *id${user.dataValues.id}(${user.dataValues.nick}) —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –ø—Ä–∞–≤–∏—Ç–µ–ª–µ–º!`)
                    }
                }
                const access = await InputManager.InputBoolean(context, `–ù–∞–∑–Ω–∞—á–∏—Ç—å –∏–≥—Ä–æ–∫–∞ *id${user.dataValues.id}(${user.dataValues.nick}) –ø–∞—Ä–≤–∏—Ç–µ–ª–µ–º —Ñ—Ä–∞–∫—Ü–∏–∏ ${country.GetName()}?`, current_keyboard)
                if(!access)
                {
                    context.send("–û—Ç–º–µ–Ω–µ–Ω–æ", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                if(oldCountry)
                {
                    oldCountry.set({leaderID: null})
                    await oldCountry.save()
                    Data.countries[oldCountry.dataValues.id].leaderID = null
                    await context.send(`‚ö† –§—Ä–∞–∫—Ü–∏—è ${Data.countries[oldCountry.dataValues.id].GetName()} –æ—Å—Ç–∞–ª–∞—Å—å –±–µ–∑ –ø—Ä–∞–≤–∏—Ç–µ–ª—è.`)
                }
                await Country.update({leaderID: user.dataValues.id}, {where: {id: country.id}})
                await PlayerStatus.update({citizenship: country.id},{where: {id: user.dataValues.id}})
                if(user.dataValues.status !== "worker")
                {
                    await Player.update({status: "official"}, {where: {id: country.leaderID}})
                    if(Data.users[country.leaderID]) Data.users[country.leaderID].status = "official"
                }
                if(country.leaderID)
                {
                    await api.SendMessage(country.leaderID, `‚ö† –í—ã –±—ã–ª–∏ —Å–Ω—è—Ç—ã —Å –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ –ø—Ä–∞–≤–∏—Ç–µ–ª—è —Ñ—Ä–∞–∫—Ü–∏–∏ ${country.name}\n\nü™™ –í–∞—à —Å—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ "–ß–∏–Ω–æ–≤–Ω–∏–∫"`)
                }
                if(user.dataValues.status !== "worker")
                {
                    user.set({status: "leader"})
                    await user.save()
                    if(Data.users[user.dataValues.id]) Data.users[user.dataValues.id].status = "leader"
                }
                await api.SendMessage(user.dataValues.id,`‚úÖ –í—ã –±—ã–ª–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –ø—Ä–∞–≤–∏—Ç–µ–ª–µ–º —Ñ—Ä–∞–∫—Ü–∏–∏ ${country.name}\n\nüëë –í–∞—à —Å—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ "–ü—Ä–∞–≤–∏—Ç–µ–ª—å"`)
                await context.send(`‚úÖ *id${user.dataValues.id}(${user.dataValues.nick}) –Ω–∞–∑–Ω–∞—á–µ–Ω –ø—Ä–∞–≤–∏—Ç–µ–ª–µ–º —Ñ—Ä–∞–∫—Ü–∏–∏ ${country.name}`, {keyboard: keyboard.build(current_keyboard)})
                return resolve()
            }
            catch (e)
            {
                await ErrorHandler.SendLogs(context, "AppointLeader", e)
            }
        })
    }

    async ShowListWarnings(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                const user = await InputManager.InputUser(context, "1Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.", current_keyboard)
                if(!user) return resolve()
                await OutputManager.GetUserWarnings(context, user.dataValues.id, current_keyboard)
            }
            catch (e)
            {
                await ErrorHandler.SendLogs(context, "ShowListWarnings", e)
            }
        })
    }

    async ShowBan(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                const user = await InputManager.InputUser(context, "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.", current_keyboard)
                if(!user) return resolve()
                if(!user.dataValues.isBanned)
                {
                    context.send(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å *id${user.dataValues.id}(${user.dataValues.nick}) –Ω–µ –∑–∞–±–∞–Ω–µ–Ω.`, {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                const ban = await Ban.findOne({where: {id: user.dataValues.id}})
                if(!ban)
                {
                    if (Data.users[user.dataValues.id]) Data.users[user.dataValues.id].isBanned = false
                    user.set({isBanned: false})
                    await user.save()
                    await api.SendMessage(user.dataValues.id, "‚úÖ –í—ã –±—ã–ª–∏ —Ä–∞–∑–±–∞–Ω–µ–Ω—ã.")
                    await context.send(`‚úÖ –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è *id${user.dataValues.id}(${user.dataValues.nick}) –Ω–µ—Ç –±–∞–Ω–∞. –í–∏–¥–∏–º–æ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, —Å–µ–π—á–∞—Å –≤—Å–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ.`)
                    return resolve()
                }
                await context.send(`–ë–∞–Ω –æ—Ç ${NameLibrary.ParseDateTime(ban.dataValues.createdAt)}:\n–ù–∏–∫: *id${user.dataValues.id}(${user.dataValues.nick})\n–ü—Ä–∏—á–∏–Ω–∞: ${ban.dataValues.reason}\n–ü–æ–¥—Ä–æ–±–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞: ${ban.dataValues.explanation}\n\n‚Ñπ –ï—Å–ª–∏ –≤—ã –æ–±–∂–∞–ª—É–µ—Ç–µ –±–∞–Ω, —Ç–æ –≤–º–µ—Å—Ç–µ —Å –±–∞–Ω–æ–º —É–¥–∞–ª—è—Ç—Å—è –∏ –≤—Å–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è`, {keyboard: keyboard.build([[keyboard.appealCallbackButton({command: "appeal_ban", item: ban.dataValues.id}), keyboard.hideCallbackButton()]]).inline()})
                return resolve()
            }
            catch (e)
            {
                await ErrorHandler.SendLogs(context, "ShowBan", e)
            }
        })
    }

    async CheatingUserResources(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                const user = await InputManager.InputUser(context, "–ö–æ–º—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞–∫—Ä—É—Ç–∏—Ç—å —Ä–µ—Å—É—Ä—Å?", current_keyboard)
                if(!user) return resolve()
                const resources = [[keyboard.moneyButton, keyboard.diamondButton],
                    [keyboard.wheatButton, keyboard.woodButton, keyboard.stoneButton],
                    [keyboard.ironButton, keyboard.copperButton, keyboard.silverButton],
                    [keyboard.cancelButton]]
                const resource = await InputManager.ChooseButton(context, `–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–∫–æ–π —Ä–µ—Å—É—Ä—Å –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞–∫—Ä—É—Ç–∏—Ç—å –∏–≥—Ä–æ–∫—É *id${user.dataValues.id}(${user.dataValues.nick}):`, resources, current_keyboard)
                if (!resource) return resolve()
                if(resource.match(/cancel/))
                {
                    context.send("‚õî –ü–µ—Ä–µ–≤–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                let count = await InputManager.InputInteger(context, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ", current_keyboard)
                if(count === null) return resolve()

                const accept = await InputManager.InputBoolean(context, `–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥:\n–ö–æ–º—É: *id${user.dataValues.id}(${user.dataValues.nick})\n–†–µ—Å—É—Ä—Å: ${NameLibrary.GetResourceName(resource)}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${count} —à—Ç\n\n–í–µ—Ä–Ω–æ?`, current_keyboard)
                if(!accept)
                {
                    context.send("‚õî –ü–µ—Ä–µ–≤–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }

                let objIN = {}
                objIN[resource] = count
                await Data.AddPlayerResources(user.dataValues.id, objIN)
                await api.SendMessage(user.dataValues.id, `–í–∞–º –ø–æ—Å—Ç—É–ø–∏–ª –ø–µ—Ä–µ–≤–æ–¥:\n${NameLibrary.GetResourceName(resource)}: ${count}`)
                await context.send("‚úÖ –£—Å–ø–µ—à–Ω–æ", {keyboard: keyboard.build(current_keyboard)})
                return resolve()
            }
            catch (e)
            {
                await ErrorHandler.SendLogs(context, "CheatingUserResources", e)
            }
        })
    }

    async CheatingCityResources(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                let cityID = await InputManager.KeyboardBuilder(context, "–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥, –∫–æ—Ç–æ—Ä–æ–º—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –Ω–∞–∫—Ä—É—Ç–∏—Ç—å —Ä–µ—Å—É—Ä—Å—ã:", Data.GetCityButtons(), current_keyboard)
                if(!cityID) return resolve()
                cityID = Data.ParseButtonID(cityID)
                const resources = [[keyboard.moneyButton, keyboard.diamondButton],
                    [keyboard.wheatButton, keyboard.woodButton, keyboard.stoneButton],
                    [keyboard.ironButton, keyboard.copperButton, keyboard.silverButton],
                    [keyboard.cancelButton]]
                const resource = await InputManager.ChooseButton(context, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–∫–æ–π —Ä–µ—Å—É—Ä—Å –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞–∫—Ä—É—Ç–∏—Ç—å", resources, current_keyboard)
                if (resource === "cancel")
                {
                    context.send("‚õî –ü–µ—Ä–µ–≤–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                let count = await InputManager.InputInteger(context, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ", current_keyboard)
                if(count === null) return resolve()

                const accept = await InputManager.InputBoolean(context, `–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥:\n–ö–æ–º—É: ${Data.GetCityName(cityID)}\n–†–µ—Å—É—Ä—Å: ${NameLibrary.GetResourceName(resource)}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${count} —à—Ç\n\n–í–µ—Ä–Ω–æ?`, current_keyboard)
                if(!accept)
                {
                    context.send("‚õî –ü–µ—Ä–µ–≤–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }

                let objIN = {}
                objIN[resource] = count
                await Data.AddCityResources(cityID, objIN)
                await api.SendMessage(Data.cities[cityID].leaderID, `‚úÖ –ü–æ—Å—Ç—É–ø–∏–ª –ø–µ—Ä–µ–≤–æ–¥ –≤ –±—é–¥–∂–µ—Ç –≥–æ—Ä–æ–¥–∞ ${Data.cities[cityID].name} –≤ —Ä–∞–∑–º–µ—Ä–µ:\n${NameLibrary.GetResourceName(resource)}: ${count}`)
                await context.send("‚úÖ –£—Å–ø–µ—à–Ω–æ", {keyboard: keyboard.build(current_keyboard)})
                return resolve()
            }
            catch (e)
            {
                await ErrorHandler.SendLogs(context, "CheatingCityResources", e)
            }
        })
    }

    async CheatingCountryResources(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                let country = await InputManager.KeyboardBuilder(context, "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ—Ä–∞–∫—Ü–∏—é", Data.GetCountryButtons(), current_keyboard)
                if(!country) return resolve()
                country = Data.ParseButtonID(country)
                country = Data.countries[country]
                const resources = [[keyboard.moneyButton, keyboard.diamondButton],
                    [keyboard.wheatButton, keyboard.woodButton, keyboard.stoneButton],
                    [keyboard.ironButton, keyboard.copperButton, keyboard.silverButton],
                    [keyboard.cancelButton]]
                const resource = await InputManager.ChooseButton(context, `${country.GetResources()}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–∫–æ–π —Ä–µ—Å—É—Ä—Å –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –≤ –±—é–¥–∂–µ—Ç —Ñ—Ä–∞–∫—Ü–∏–∏ ${country.GetName()}?`, resources, current_keyboard)
                if (resource === "cancel")
                {
                    context.send("‚õî –ü–µ—Ä–µ–≤–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }

                let count = await InputManager.InputInteger(context, `–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ`, current_keyboard)
                if(count === null) return resolve()

                const accept = await InputManager.InputBoolean(context, `–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥:\n–ö–æ–º—É: –§—Ä–∞–∫—Ü–∏—è ${country.GetName()}\n–†–µ—Å—É—Ä—Å: ${NameLibrary.GetResourceName(resource)}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${count} —à—Ç\n\n–í–µ—Ä–Ω–æ?`, current_keyboard)
                if(!accept)
                {
                    context.send("‚õî –ü–µ—Ä–µ–≤–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }

                let objIN = {}
                objIN[resource] = count
                await Data.AddCountryResources(country, objIN)
                await api.SendMessage(Data.GetCountryForCity(context.cityID).leaderID, `–ü–æ—Å—Ç—É–ø–∏–ª –ø–µ—Ä–µ–≤–æ–¥ –≤ –±—é–¥–∂–µ—Ç —Ñ—Ä–∞–∫—Ü–∏–∏ ${Data.GetCountryName(country)} –≤ —Ä–∞–∑–º–µ—Ä–µ:\n${NameLibrary.GetResourceName(resource)}: ${count}`)
                await context.send("‚úÖ –£—Å–ø–µ—à–Ω–æ", {keyboard: keyboard.build(current_keyboard)})
            }
            catch (e)
            {
                await ErrorHandler.SendLogs(context, "CheatingCountryResources", e)
            }
        })
    }

    async CreateLastWill(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                const user = await InputManager.InputUser(context, "1Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É –∑–∞–≤–µ—â–∞–µ—Ç–µ –≤—Å–µ —Å–≤–æ–µ –∏–º—É—â–µ—Å—Ç–≤–æ", current_keyboard)
                if(!user) return resolve()
                if(user.dataValues.id === context.player.id)
                {
                    context.send("‚ö† –£–∫–∞–∑—ã–≤–∞—Ç—å —Å–µ–±—è –≤ –∑–∞–≤–µ—â–∞–Ω–∏–∏ –∑–∞–ø—Ä–µ—â–µ–Ω–æ.")
                    return resolve()
                }

                const lastWillText = await InputManager.InputString(context, "2Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–≤–µ—â–∞–Ω–∏—è. –≠—Ç–æ—Ç —Ç–µ–∫—Å—Ç –±—É–¥–µ—Ç –≤–∏–¥–µ–Ω —Ç–æ–ª—å–∫–æ –≤–∞–º –∏ –Ω–∞—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—é –ø–æ—Å–ª–µ –≤–∞—à–µ–π —Å–º–µ—Ä—Ç–∏. (–¥–æ 1000 —Å–∏–º–≤–æ–ª–æ–≤)", current_keyboard, 0, 1000)
                if (!lastWillText)
                {
                    await context.send("‚õî –û—Ç–º–µ–Ω–∞", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }

                await LastWills.create({
                    userID: context.player.id,
                    text: lastWillText,
                    successorID: user.dataValues.id
                })
                current_keyboard[0][2] = keyboard.deleteLastWillButton
                await context.send("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –∑–∞–≤–µ—â–∞–Ω–∏–µ.", {keyboard: keyboard.build(current_keyboard)})
                await api.SendMessage(user.dataValues.id, `‚úÖ –ò–≥—Ä–æ–∫ ${await NameLibrary.GetPlayerNick(context.player.id)} –¥–æ–±–∞–≤–∏–ª –≤–∞—Å –≤ —Å–≤–æ—ë –∑–∞–≤–µ—â–∞–Ω–∏–µ.`)
            }
            catch (e)
            {
                await ErrorHandler.SendLogs(context, "CreateLastWill", e)
            }
        })
    }

    async DeleteLastWill(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                const lastWill = await LastWills.findOne({where: {userID: context.player.id}})
                if(!lastWill) return resolve()
                await context.send(`*id${context.player.id}(–í–∞—à–µ) –∑–∞–≤–µ—â–∞–Ω–∏–µ:\n–ù–∞—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å: ${await NameLibrary.GetPlayerNick(lastWill.dataValues.successorID)}\n–¢–µ–∫—Å—Ç:${lastWill.dataValues.text}`)
                const success = await InputManager.InputBoolean(context, "–í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–≤–æ–µ –∑–∞–≤–µ—â–∞–Ω–∏–µ?")
                if(!success) return resolve()

                await LastWills.destroy({where: {userID: context.player.id}})
                current_keyboard[0][2] = keyboard.createLastWillButton
                await context.send("‚úÖ –ó–∞–≤–µ—â–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ.", {keyboard: keyboard.build(current_keyboard)})
                await api.SendMessage(lastWill.dataValues.successorID, `‚ö† –ò–≥—Ä–æ–∫ ${context.player.GetName()} —É–¥–∞–ª–∏–ª —Å–≤–æ—ë –∑–∞–≤–µ—â–∞–Ω–∏–µ.`)
            }
            catch (e)
            {
                await ErrorHandler.SendLogs(context, "DeleteLastWill", e)
            }
        })
    }

    async Relax(context, current_keyboard, scenes)
    {
        return new Promise(async (resolve) => {
            try
            {
                const need = (100 - context.player.fatigue) * 3.6
                const time = new Date()
                time.setMinutes(time.getMinutes() + need)
                Data.users[context.player.id].lastActionTime = time
                if (Data.users[context.player.id].timeout)
                {
                    clearTimeout(Data.users[context.player.id].timeout)
                }
                Data.users[context.player.id].timeout = setTimeout(() => {
                    context.send("‚òï –° –¥–æ–±—Ä—ã–º —É—Ç—Ä–æ–º, —Ç–µ–ø–µ—Ä—å –≤—ã –ø–æ–ª–Ω—ã —Å–∏–ª.", {
                        keyboard: keyboard.build(current_keyboard)
                    })
                    Data.users[context.player.id].fatigue = 100
                    Data.users[context.player.id].isFreezed = false
                    Data.users[context.player.id].state = scenes.Menu
                }, need * 60000)
                Data.users[context.player.id].state = scenes.Relaxing
                Data.users[context.player.id].isFreezed = true
                await context.send(`üí§ –°–ø–æ–∫–æ–π–Ω–æ–π –Ω–æ—á–∏, –¥–æ –ø–æ–ª–Ω–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–∏–ª ${NameLibrary.ParseFutureTime(time)}`,
                    {
                        keyboard: keyboard.build([[keyboard.checkTimeButton], [keyboard.wakeupButton]])
                    })
                return resolve()
            }
            catch (e)
            {
                await ErrorHandler.SendLogs(context, "Relax", e)
            }
        })
    }

    async ChangeCityName(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                let name = await InputManager.InputString(context, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ (–æ—Ç 2 –¥–æ 100 –±—É–∫–≤)", current_keyboard, 2, 100)
                if(!name) return resolve()
                let city = await City.findOne({where: {name: name}})
                while(city)
                {
                    name = await InputManager.InputString(context, "‚ö† –ì–æ—Ä–æ–¥ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –µ—â–µ —Ä–∞–∑ (–æ—Ç 2 –¥–æ 100 –±—É–∫–≤)", current_keyboard, 2, 100)
                    if(!name) return resolve()
                    city = await City.findOne({where: {name: name}})
                }
                const accept = await InputManager.InputBoolean(context, `–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å –≥–æ—Ä–æ–¥ \"${Data.cities[context.cityID].name}\" –≤ "${name}"?`, current_keyboard)
                if(!accept)
                {
                    await context.send("‚õî –û—Ç–º–µ–Ω–∞", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                await City.update({name: name}, {where: {id: context.cityID}})
                Data.cities[context.cityID].name = name
                await context.send("‚úÖ –ì–æ—Ä–æ–¥ –ø–µ—Ä–µ–∏–Ω–µ–Ω–æ–≤–∞–Ω.", {keyboard: keyboard.build(current_keyboard)})
            }
            catch (e)
            {
                await ErrorHandler.SendLogs(context, "ChangeCityName", e)
            }
        })
    }

    async ChangeCityDescription(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                let description = await InputManager.InputString(context, `–°—Ç–∞—Ä–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ: ${Data.cities[context.cityID].description}\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ (–æ—Ç 1 –¥–æ 1000 —Å–∏–º–≤–æ–ª–æ–≤)`, current_keyboard, 2, 100)
                if(!description) return resolve()
                const accept = await InputManager.InputBoolean(context, "–ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞?", current_keyboard)
                if(!accept)
                {
                    await context.send("‚õî –û—Ç–º–µ–Ω–∞", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                await City.update({description: description}, {where: {id: context.cityID}})
                Data.cities[context.cityID].description = description
                await context.send("‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –∏–∑–º–µ–Ω–µ–Ω–æ.", {keyboard: keyboard.build(current_keyboard)})
            }
            catch (e)
            {
                await ErrorHandler.SendLogs(context, "ChangeCityDescription", e)
            }
        })
    }

    async ChangeCityPhoto(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                if(Data.cities[context.cityID].photoURL)
                {
                    await context.send("–í–æ—Ç —Å—Ç–∞—Ä–æ–µ —Ñ–æ—Ç–æ", {attachment: Data.cities[context.cityID].photoURL})
                }
                else
                {
                    await context.send("–£ –≥–æ—Ä–æ–¥–∞ –Ω–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏.")
                }
                let photo = await InputManager.InputPhoto(context, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ. (–û–Ω–æ –±—É–¥–µ—Ç –≤—Å—Ç—Ä–µ—á–∞—Ç—å –ª—é–¥–µ–π, –∫–æ–≥–¥–∞ –æ–Ω–∏ –±—É–¥—É—Ç –∑–∞—Ö–æ–¥–∏—Ç—å –≤ –≥–æ—Ä–æ–¥)", current_keyboard)
                if(!photo) return resolve()
                const accept = await InputManager.InputBoolean(context, "–ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ –≥–æ—Ä–æ–¥–∞?", current_keyboard)
                if(!accept)
                {
                    await context.send("‚õî –û—Ç–º–µ–Ω–∞", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                await City.update({photoURL: photo}, {where: {id: context.cityID}})
                Data.cities[context.cityID].photoURL = photo
                await context.send("‚úÖ –§–æ—Ç–æ –≥–æ—Ä–æ–¥–∞ –∏–∑–º–µ–Ω–µ–Ω–æ.", {keyboard: keyboard.build(current_keyboard)})
            }
            catch (e)
            {
                await ErrorHandler.SendLogs(context, "ChangeCityPhoto", e)
            }
        })
    }

    async CityToCountryTransaction(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                const resources = [[keyboard.moneyButton, keyboard.diamondButton],
                    [keyboard.wheatButton, keyboard.woodButton, keyboard.stoneButton],
                    [keyboard.ironButton, keyboard.copperButton, keyboard.silverButton],
                    [keyboard.cancelButton]]
                const resource = await InputManager.ChooseButton(context, `${Data.cities[context.cityID].GetResources()}\n\n–ü–µ—Ä–µ–≤–æ–¥–∏—Ç—å —Ä–µ—Å—É—Ä—Å—ã –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –≤ –±—é–¥–∂–µ—Ç —Ñ—Ä–∞–∫—Ü–∏–∏.\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–∫–æ–π —Ä–µ—Å—É—Ä—Å –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –≤ –±—é–¥–∂–µ—Ç —Ñ—Ä–∞–∫—Ü–∏–∏ ${Data.GetCountryName(Data.GetCountryForCity(context.cityID).id)}?`, resources, current_keyboard)
                if (resource === "cancel")
                {
                    context.send("‚õî –ü–µ—Ä–µ–≤–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                if(Data.cities[context.cityID][resource] <= 0)
                {
                    context.send("‚ö† –£ –≤–∞—Å –Ω–µ—Ç —ç—Ç–æ–≥–æ —Ä–µ—Å—É—Ä—Å–∞.", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                let count
                if(Data.cities[context.cityID][resource] > 1)
                {
                    count = await InputManager.InputInteger(context, `–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (–æ—Ç 1 –¥–æ ${Data.users[context.player.id][resource]} —à—Ç)`, current_keyboard, 1, Data.cities[context.cityID][resource])
                    if(count === null) return resolve()
                }
                else
                {
                    count = 1
                }
                const accept = await InputManager.InputBoolean(context, `–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥:\n–ö–æ–º—É: ${Data.GetCountryName(Data.GetCountryForCity(context.cityID).id)}\n–†–µ—Å—É—Ä—Å: ${NameLibrary.GetResourceName(resource)}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${count} —à—Ç\n\n–í–µ—Ä–Ω–æ?`, current_keyboard)
                if(!accept)
                {
                    context.send("‚õî –ü–µ—Ä–µ–≤–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }

                let objIN = {}
                let objOUT = {}
                objIN[resource] = count * -1
                objOUT[resource] = count

                await Data.AddCityResources(context.cityID, objIN)
                await Data.AddCountryResources(Data.GetCountryForCity(context.cityID).id, objOUT)
                await api.SendMessage(Data.GetCountryForCity(context.cityID).leaderID, `–ò–∑ –≥–æ—Ä–æ–¥–∞ ${Data.cities[context.cityID].name} –ø–æ—Å—Ç—É–ø–∏–ª –ø–µ—Ä–µ–≤–æ–¥ –≤ –±—é–¥–∂–µ—Ç —Ñ—Ä–∞–∫—Ü–∏–∏ ${Data.GetCountryName(Data.GetCountryForCity(context.cityID).id)} –≤ —Ä–∞–∑–º–µ—Ä–µ:\n${NameLibrary.GetPrice(objOUT)}`)
                await context.send("‚úÖ –£—Å–ø–µ—à–Ω–æ", {keyboard: keyboard.build(current_keyboard)})
            }
            catch (e)
            {
                await ErrorHandler.SendLogs(context, "CityToCountryTransaction", e)
            }
        })
    }

    async DeleteCityBuilding(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                let request = "–ü–æ—Å—Ç—Ä–æ–π–∫–∏ –≤ –≥–æ—Ä–æ–¥–µ:\n\n"
                const buildingButtons = []
                if(!Data.buildings[context.cityID])
                {
                    await context.send("‚õ∫ –í –≥–æ—Ä–æ–¥–µ –Ω–µ—Ç –ø–æ—Å—Ç—Ä–æ–µ–∫", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                for(let i = 0; i < Data.buildings[context.cityID].length; i++)
                {
                    request += (i+1) + ": " + NameLibrary.GetBuildingType(Data.buildings[context.cityID][i].type) + " \"" + Data.buildings[context.cityID][i].name + "\" " + Data.buildings[context.cityID][i].level + " —É—Ä\n"
                    if(Data.buildings[context.player.location][i].type !== "building_of_house")
                    {
                        buildingButtons.push([NameLibrary.GetBuildingEmoji(Data.buildings[context.cityID][i].type) + Data.buildings[context.cityID][i].name, "ID" + Data.buildings[context.cityID][i].id])
                    }
                }
                if(buildingButtons.length === 0)
                {
                    await context.send(request + "\nüèò –í –≥–æ—Ä–æ–¥–µ –Ω–µ—Ç –ø–æ—Å—Ç—Ä–æ–µ–∫, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –º–æ–∂–µ—Ç–µ —Å–Ω–µ—Å—Ç–∏.", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                let buildingID = await InputManager.KeyboardBuilder(context, request + "\n–í—ã–±–µ—Ä–∏—Ç–µ –∑–¥–∞–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —Å–Ω–µ—Å—Ç–∏.\n‚ö† –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Ä–∞—Å–ø–æ—Ä—è–∂–∞—Ç—å—Å—è –¥–æ–º–∞–º–∏ –∏–≥—Ä–æ–∫–æ–≤.", buildingButtons, current_keyboard)
                if(!buildingID) return resolve()
                buildingID = Data.ParseButtonID(buildingID)

                const accept = await InputManager.InputBoolean(context, `–°—Ç–æ–∏–º–æ—Å—Ç—å —Å–Ω–æ—Å–∞ –∑–¥–∞–Ω–∏—è:\n${NameLibrary.GetPrice(Prices["delete_building"])}\n–°–µ–π—á–∞—Å –≤ –±—é–¥–∂–µ—Ç–µ ${Data.cities[context.cityID].GetResources()} –º–æ–Ω–µ—Ç.\n\n‚ö† –í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ–¥–∏—Ç–µ —Å–Ω–µ—Å—Ç–∏ —ç—Ç–æ –∑–¥–∞–Ω–∏–µ?`)
                if (!accept) return resolve()
                if(!Data.cities[context.cityID].CanPay(Prices["delete_building"]))
                {
                    await context.send("‚ö† –í –±—é–¥–∂–µ—Ç–µ –≥–æ—Ä–æ–¥–∞ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç —Ä–µ—Å—É—Ä—Å–æ–≤!")
                    return resolve()
                }
                await Data.AddCityResources(context.cityID, Prices["delete_building"])
                await Buildings.destroy({where: {id: buildingID}})
                Data.cities[context.cityID].buildingsScore = Math.max(0, Data.cities[context.cityID].buildingsScore - 1)
                await City.update({buildingsScore: Data.cities[context.cityID].buildingsScore}, {where: {id: context.cityID}})
                for(let i = 0; i < Data.buildings[context.cityID].length; i++)
                {
                    if(Data.buildings[context.cityID][i]?.ownerType === "user" && Data.buildings[context.cityID][i]?.id === buildingID)
                    {
                        await api.SendMessage(Data.buildings[context.cityID][i].ownerID, `‚ö† –ì–ª–∞–≤–∞ –≥–æ—Ä–æ–¥–∞ ${Data.cities[context.cityID].name} —Ä–∞—Å–ø–æ—Ä—è–¥–∏–ª—Å—è —Å–Ω–µ—Å—Ç–∏ –≤–∞—à—É –ø–æ—Å—Ç—Ä–æ–π–∫—É ${NameLibrary.GetBuildingType(Data.buildings[context.cityID][i].type)} \"${Data.buildings[context.cityID][i].name}\"`)
                        break
                    }
                }
                await Data.LoadBuildings()
                await context.send("‚úÖ –ó–¥–∞–Ω–∏–µ —Å–Ω–µ—Å–µ–Ω–æ.", {keyboard: keyboard.build(current_keyboard)})
            }
            catch (e)
            {
                await ErrorHandler.SendLogs(context, "DeleteCityBuilding", e)
            }
        })
    }

    async CreateCityBuilding(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                if(Data.cities[context.cityID].buildingsScore >= Data.cities[context.cityID].maxBuildings)
                {
                    await context.send("‚ö† –õ–∏–º–∏—Ç –Ω–∞ –ø–æ—Å—Ç—Ä–æ–π–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω " + Data.cities[context.cityID].buildingsScore + "/" + Data.cities[context.cityID].maxBuildings + "\n\n–ß—Ç–æ–±—ã –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–æ–µ –∑–¥–∞–Ω–∏–µ, —Ç—Ä–µ–±—É–µ—Ç—Å—è —Ä–∞—Å—à–∏—Ä–∏—Ç—å –≥–æ—Ä–æ–¥ –∏–ª–∏ —Å–Ω–µ—Å—Ç–∏ –∫–∞–∫–æ–µ-—Ç–æ –∏–∑ –Ω–∞—Ö–æ–¥—è—â–∏—Ö—Å—è –≤ –≥–æ—Ä–æ–¥–µ.", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                const country = Data.GetCountryForCity(context.cityID)
                const buildingButtons = [
                    ["‚öî –ö–∞–∑–∞—Ä–º–∞", "barracks"],
                    ["üõü –ü–æ—Ä—Ç", "port"],
                    ["ü™ô –ú–æ–Ω–µ—Ç–Ω—ã–π –¥–≤–æ—Ä", "mint"],
                    ["‚úù –•—Ä–∞–º", "church"],
                    ["üè¶ –ë–∞–Ω–∫", "bank"]
                ]
                country.resources.match(/wheat/) && buildingButtons.push(["üåæ –°–µ–ª—å—Å–∫–æ–µ —Ö–æ–∑—è–π—Å—Ç–≤–æ", "wheat"])
                country.resources.match(/stone/) && buildingButtons.push(["ü™® –ö–∞–º–µ–Ω–æ–ª–æ–º–Ω—è", "stone"])
                country.resources.match(/wood/) && buildingButtons.push(["ü™µ –õ–µ—Å–æ–∑–∞–≥–æ—Ç–æ–≤–∫–∏", "wood"])
                country.resources.match(/iron/) && buildingButtons.push(["üåë –ñ–µ–ª–µ–∑–Ω—ã–π —Ä—É–¥–Ω–∏–∫", "iron"])
                country.resources.match(/silver/) && buildingButtons.push(["ü•à –°–µ—Ä–µ–±—Ä—è–Ω–Ω—ã–π —Ä—É–¥–Ω–∏–∫", "silver"])

                let request = "–¶–µ–Ω—ã –Ω–∞ –ø–æ—Å—Ç—Ä–æ–π–∫–∏:\n\n"
                request += Data.cities[context.cityID].GetResources() + "\n\n"
                buildingButtons.forEach(key => {
                    request += key[0] + ":\n" + NameLibrary.GetPrice(Prices["new_" + key[1]]) + "\n"
                })
                const building = await InputManager.KeyboardBuilder(context, request + "\n–ö–∞–∫—É—é –ø–æ—Å—Ç—Ä–æ–π–∫—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤–æ–∑–≤–µ—Å—Ç–∏?\n–°–µ–π—á–∞—Å –≤ –≥–æ—Ä–æ–¥–µ " + Data.cities[context.cityID].buildingsScore + "/" + Data.cities[context.cityID].maxBuildings + " –ø–æ—Å—Ç—Ä–æ–µ–∫", buildingButtons, current_keyboard)
                if(!building) return resolve()
                if(!Data.cities[context.cityID].CanPay(Prices["new_" + building]))
                {
                    await context.send("‚ö† –í –±—é–¥–∂–µ—Ç–µ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç —Ä–µ—Å—É—Ä—Å–æ–≤.", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                if(building.match(/port|barracks/))
                {
                    for(let i = 0; i < Data.cities.length; i++)
                    {
                        if(Data.cities[i])
                        {
                            if(Data.cities[i].countryID === Data.cities[context.cityID].countryID)
                            {
                                for(let j = 0; j < Data.buildings[Data.cities[i].id].length; j++)
                                {
                                    if(Data.buildings[Data.cities[i].id][j])
                                    {
                                        if(Data.buildings[Data.cities[i].id][j].type === "building_of_" + building)
                                        {
                                            const country = Data.GetCountryForCity(context.cityID)
                                            await context.send(`‚ö† –í —Ñ—Ä–∞–∫—Ü–∏–∏ *public${country.groupID}(${country.name}) —É–∂–µ –∏–º–µ–µ—Ç—Å—è ${NameLibrary.GetBuildingType("building_of_" + building)}`, {keyboard: keyboard.build(current_keyboard)})
                                            return resolve()
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                const name = await InputManager.InputString(context, "–ù–∞–∑–æ–≤–∏—Ç–µ –ø–æ—Å—Ç—Ä–æ–π–∫—É. (–æ—Ç 2 –¥–æ 100 —Å–∏–º–≤–æ–ª–æ–≤)", current_keyboard, 2, 100)
                if(!name) return resolve()
                await Data.AddCityResources(context.cityID, Prices["new_" + building])
                await Buildings.create({
                    cityID: context.cityID,
                    name: name,
                    type: "building_of_" + building,
                    ownerID: 0,
                    ownerType: "city",
                    level: 1,
                    freezing: false
                })
                await Data.LoadBuildings()
                Data.cities[context.cityID].buildingsScore++
                await City.update({buildingsScore: Data.cities[context.cityID].buildingsScore}, {where: {id: context.cityID}})
                await context.send("‚úÖ –ü–æ—Å—Ç—Ä–æ–π–∫–∞ –≤–æ–∑–≤–µ–¥–µ–Ω–∞.", {keyboard: keyboard.build(current_keyboard)})
            }
            catch (e)
            {
                await ErrorHandler.SendLogs(context, "CreateCityBuilding", e)
            }
        })
    }

    async UpgradeCityBuilding(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                if(!Data.buildings[context.cityID])
                {
                    await context.send("‚õ∫ –í –≥–æ—Ä–æ–¥–µ –Ω–µ—Ç –ø–æ—Å—Ç—Ä–æ–µ–∫", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                let request = "üè¢ –ì–æ—Ä–æ–¥—Å–∫–∏–µ –ø–æ—Å—Ç—Ä–æ–π–∫–∏:\n"
                const buildingButtons = []
                for(let i = 0; i < Data.buildings[context.cityID].length; i++)
                {
                    if(Data.buildings[context.cityID][i].ownerType === "city")
                    {
                        buildingButtons.push([NameLibrary.GetBuildingEmoji(Data.buildings[context.cityID][i].type) + Data.buildings[context.cityID][i].name, "ID" + Data.buildings[context.cityID][i].id])
                        request += `${NameLibrary.GetBuildingType(Data.buildings[context.cityID][i].type)} \"${Data.buildings[context.cityID][i].name}\" ${Data.buildings[context.cityID][i].level} —É—Ä\n`
                    }
                }
                if(buildingButtons.length === 0)
                {
                    await context.send("‚õ∫ –í –≥–æ—Ä–æ–¥–µ –Ω–µ—Ç –≥–æ—Ä–æ–¥—Å–∫–∏—Ö –ø–æ—Å—Ç—Ä–æ–µ–∫", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                let building = await InputManager.KeyboardBuilder(context, request, buildingButtons, current_keyboard)
                if(!building) return resolve()
                building = Data.ParseButtonID(building)
                for(let i = 0; i < Data.buildings[context.cityID].length; i++)
                {
                    if(Data.buildings[context.cityID][i].id === building)
                    {
                        building = Data.buildings[context.cityID][i]
                        break
                    }
                }
                if(building.level >= 4)
                {
                    await context.send(`‚ö† ${NameLibrary.GetBuildingType(building.type)} \"${building.name}\" –∏–º–µ–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å —É–ª—É—á—à–µ–Ω–∏—è.`, {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                if(building.type.match(/church|mint/))
                {
                    await context.send(NameLibrary.GetBuildingType(building.type) + " –Ω–µ –Ω—É–∂–¥–∞–µ—Ç—Å—è –≤ —É–ª—É—á—à–µ–Ω–∏–∏", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                await context.send(`–£–ª—É—á—à–µ–Ω–∏–µ –¥–ª—è ${NameLibrary.GetBuildingType(building.type)} \"${building.name}\":\n ${building.level} —É—Ä–æ–≤–µ–Ω—å => ${building.level + 1} —É—Ä–æ–≤–µ–Ω—å\n${NameLibrary.GetPrice(Prices[building.type.replace("building_of_", "") + "_lvl" + (building.level + 1)])}`)
                if(!Data.cities[context.cityID].CanPay(Prices[building.type.replace("building_of_", "") + "_lvl" + (building.level + 1)]))
                {
                    await context.send("‚ö† –í –±—é–¥–∂–µ—Ç–µ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç —Ä–µ—Å—É—Ä—Å–æ–≤.", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                const accept = await InputManager.InputBoolean(context, "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?", current_keyboard)
                if(!accept)
                {
                    await context.send("‚õî –û—Ç–º–µ–Ω–µ–Ω–æ.", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                await Data.AddCityResources(Data.cities[context.cityID].id ,Prices[building.type.replace("building_of_", "") + "_lvl" + (building.level + 1)])
                await Buildings.update({level: building.level + 1}, {where: {id: building.id}})
                building.Upgrade(building.level + 1)
                await context.send(`‚úÖ –ü–æ—Å—Ç—Ä–æ–π–∫–∞ —É–ª—É—á—à–µ–Ω–∞ –¥–æ ${building.level} —É—Ä–æ–≤–Ω—è.`, {keyboard: keyboard.build(current_keyboard)})
            }
            catch (e)
            {
                await ErrorHandler.SendLogs(context, "UpgradeCityBuilding", e)
            }
        })
    }

    async ExpandCity(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                const isCapital = Data.cities[context.cityID].isCapital
                const maxBuildings = Data.cities[context.cityID].maxBuildings
                if((isCapital && maxBuildings >= 16) || (!isCapital && maxBuildings >= 12))
                {
                    await context.send("üèò –ì–æ—Ä–æ–¥ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Ä–∞—Å—à–∏—Ä–µ–Ω.", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                const accept = await InputManager.InputBoolean(context, `–†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ ${maxBuildings} => ${maxBuildings + 2} –º–µ—Å—Ç –¥–ª—è —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞.\n\n${Data.cities[context.cityID].GetResources()}\n\n–°—Ç–æ–∏–º–æ—Å—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è:\n${NameLibrary.GetPrice(Prices['expand_city'])}\n\n–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?`, current_keyboard)
                if(!accept)
                {
                    await context.send("‚õî –û—Ç–º–µ–Ω–µ–Ω–æ.", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                if(!Data.cities[context.cityID].CanPay(Prices['expand_city']))
                {
                    await context.send("‚ö† –í –±—é–¥–∂–µ—Ç–µ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç —Ä–µ—Å—É—Ä—Å–æ–≤.", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                await Data.AddCityResources(context.cityID, Prices['expand_city'])
                await Data.cities[context.cityID].Expand()
                await context.send(`‚úÖ –ì–æ—Ä–æ–¥ —Ä–∞—Å—à–∏—Ä–µ–Ω –¥–æ ${Data.cities[context.cityID].maxBuildings} –º–µ—Å—Ç.`, {keyboard: keyboard.build(current_keyboard)})
            }
            catch (e)
            {
                await ErrorHandler.SendLogs(context, "ExpandCity", e)
            }
        })
    }

    async GetAllCityResources(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                let extraction = {}
                let extract = 0
                let request = "–î–æ–±—ã—á–∞ –∏–∑ –ø–æ—Å—Ç—Ä–æ–µ–∫:\n\n"
                const time = new Date()
                const future = new Date()
                future.setHours(future.getHours() + 6)
                let resource = ""
                let flag = false
                let isVoid = true
                for(let i = 0, j = 0; i < Data.buildings[context.cityID]?.length; i++)
                {
                    if(Data.buildings[context.cityID][i].ownerType === "city" && Data.buildings[context.cityID][i].type.match(/wheat|stone|wood|iron|silver/))
                    {
                        flag = true
                        j++
                        request += (j) + ": " + NameLibrary.GetBuildingType(Data.buildings[context.cityID][i].type) + " \"" + Data.buildings[context.cityID][i].name + "\" "
                        if(Data.buildings[context.cityID][i].lastActivityTime - time <= 0)
                        {
                            isVoid = false
                            resource = Data.buildings[context.cityID][i].type.replace("building_of_", "")
                            extract = Math.round(NameLibrary.GetFarmRandom(resource + "_lvl" + Data.buildings[context.cityID][i].level) * 0.9)
                            request += " - –¥–æ–±—ã—Ç–æ\n"
                            Data.buildings[context.cityID][i].lastActivityTime = future
                            if(extraction[resource])
                            {
                                extraction[resource] += -extract
                            }
                            else
                            {
                                extraction[resource] = -extract
                            }
                        }
                        else
                        {
                            request += " - —á–µ—Ä–µ–∑ " + NameLibrary.ParseFutureTime(Data.buildings[context.cityID][i].lastActivityTime) + "\n"
                        }
                    }
                }
                if(!flag)
                {
                    await context.send("‚ö† –í –≥–æ—Ä–æ–¥–µ –Ω–µ—Ç –ø–æ—Å—Ç—Ä–æ–µ–∫ –¥–ª—è –¥–æ–±—ã—á–∏ —Ä–µ—Å—É—Ä—Å–æ–≤ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—â–∏—Ö –≥–æ—Ä–æ–¥—É.", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                request += isVoid ? "" : ("\n\n–î–æ–±—ã—Ç–æ –≤—Å–µ–≥–æ:\n" + NameLibrary.GetPrice(extraction))
                extraction = NameLibrary.ReversePrice(extraction)
                await Data.AddCityResources(context.cityID, extraction)
                await context.send(request)
            }
            catch (e)
            {
                await ErrorHandler.SendLogs(context, "GetAllCityResources", e)
            }
        })
    }

    async GetCountryCities(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                let request = "–°–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤ –≤ —Ñ—Ä–∞–∫—Ü–∏–∏ " + context.country.GetName() + ":\n\n"
                for(let i = 0, j = 0; i < Data.cities.length; i++)
                {
                    if(Data.cities[i]?.countryID === context.country.id)
                    {
                        j++
                        request += `${j}: üåá –ì–æ—Ä–æ–¥ ${Data.cities[i].name} ${Data.cities[i].isCapital ? "(–°—Ç–æ–ª–∏—Ü–∞) " : ""}- *id${Data.cities[i].leaderID}(–≥–ª–∞–≤–∞)\n`
                    }
                }
                await context.send(request, {keyboard: keyboard.build(current_keyboard)})
                return resolve()
            }
            catch (e)
            {
                await ErrorHandler.SendLogs(context, "GetCountryCities", e)
            }
        })
    }

    async ChangeCountryName(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                let name = await InputManager.InputString(context, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ—Ä–∞–∫—Ü–∏–∏ (–æ—Ç 2 –¥–æ 100 –±—É–∫–≤)", current_keyboard, 2, 100)
                if(!name) return resolve()
                let country = await Country.findOne({where: {name: name}})
                while(country)
                {
                    name = await InputManager.InputString(context, "‚ö† –§—Ä–∞–∫—Ü–∏—è —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ—Ä–∞–∫—Ü–∏–∏ –µ—â–µ —Ä–∞–∑ (–æ—Ç 2 –¥–æ 100 –±—É–∫–≤)", current_keyboard, 2, 100)
                    if(!name) return resolve()
                    country = await Country.findOne({where: {name: name}})
                }
                const accept = await InputManager.InputBoolean(context, `–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å —Ñ—Ä–∞–∫—Ü–∏—é ${context.country.GetName()} –≤ "${"*public" + context.country.groupID + "(" + name + ")"}"?`, current_keyboard)
                if(!accept)
                {
                    await context.send("‚õî –û—Ç–º–µ–Ω–∞", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                await Country.update({name: name}, {where: {id: context.country.id}})
                context.country.name = name
                await context.send("‚úÖ –§—Ä–∞–∫—Ü–∏—è –ø–µ—Ä–µ–∏–Ω–µ–Ω–æ–≤–∞–Ω–∞.", {keyboard: keyboard.build(current_keyboard)})
            }
            catch (e)
            {
                await ErrorHandler.SendLogs(context, "ChangeCountryName", e)
            }
        })
    }

    async ChangeCountryDescription(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                let description = await InputManager.InputString(context, `–°—Ç–∞—Ä–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ: ${context.country.description}\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ (–æ—Ç 1 –¥–æ 1000 —Å–∏–º–≤–æ–ª–æ–≤)`, current_keyboard, 2, 100)
                if(!description) return resolve()
                const accept = await InputManager.InputBoolean(context, "–ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ —Ñ—Ä–∞–∫—Ü–∏–∏?", current_keyboard)
                if(!accept)
                {
                    await context.send("‚õî –û—Ç–º–µ–Ω–∞", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                await Country.update({description: description}, {where: {id: context.country.id}})
                context.country.description = description
                await context.send("‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ —Ñ—Ä–∞–∫—Ü–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–æ.", {keyboard: keyboard.build(current_keyboard)})
            }
            catch (e)
            {
                await ErrorHandler.SendLogs(context, "ChangeCountryDescription", e)
            }
        })
    }

    async ChangeCountryPhoto(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                if(context.country.photoURL)
                {
                    await context.send("–í–æ—Ç —Å—Ç–∞—Ä–æ–µ —Ñ–æ—Ç–æ", {attachment: context.country.photoURL})
                }
                else
                {
                    await context.send("–£ —Ñ—Ä–∞–∫—Ü–∏–∏ –Ω–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏.")
                }
                let photo = await InputManager.InputPhoto(context, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ.\n‚ö† –≠—Ç–æ —Ñ–æ—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–∞—Ä—É—Å–µ–ª–∏.\n\n‚ö†‚ö†‚ö† –¢—Ä–µ–±—É–µ—Ç—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ —Å —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ–º —Å—Ç–æ—Ä–æ–Ω 13/8 (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ 650x400), –∏–Ω–∞—á–µ –±—É–¥—É—Ç –æ—à–∏–±–∫–∏ —Å –∫–∞—Ä—É—Å–µ–ª—å—é, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –≤—ã–ª–µ—Ç—É\n\n–ë—ã—Å—Ç—Ä–æ –∏–∑–º–µ–Ω–∏—Ç—å —Ä–∞–∑–º–µ—Ä —Ñ–æ—Ç–æ –º–æ–∂–Ω–æ –∑–¥–µ—Å—å: https://www.visualwatermark.com/ru/image-resizer/", current_keyboard)
                if(!photo) return resolve()
                const accept = await InputManager.InputBoolean(context, "–ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ —Ñ—Ä–∞–∫—Ü–∏–∏?", current_keyboard)
                if(!accept)
                {
                    await context.send("‚õî –û—Ç–º–µ–Ω–∞", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                await Country.update({photoURL: photo}, {where: {id: context.country.id}})
                context.country.photoURL = photo
                await context.send("‚úÖ –§–æ—Ç–æ –§—Ä–∞–∫—Ü–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–æ.", {keyboard: keyboard.build(current_keyboard)})
            }
            catch (e)
            {
                await ErrorHandler.SendLogs(context, "ChangeCountryPhoto", e)
            }
        })
    }

    async ChangeCountryWelcomePhoto(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                if(context.country.welcomePhotoURL)
                {
                    await context.send("–í–æ—Ç —Å—Ç–∞—Ä–æ–µ —Ñ–æ—Ç–æ", {attachment: context.country.welcomePhotoURL})
                }
                else
                {
                    await context.send("–£ —Ñ—Ä–∞–∫—Ü–∏–∏ –Ω–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏.")
                }
                let photo = await InputManager.InputPhoto(context, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ. (–û–Ω–æ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –ø—Ä–∏ –∑–∞–µ–∑–¥–µ –≤ —Ñ—Ä–∞–∫—Ü–∏—é)", current_keyboard)
                if(!photo) return resolve()
                const accept = await InputManager.InputBoolean(context, "–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Ñ–æ—Ç–æ —Ñ—Ä–∞–∫—Ü–∏–∏?", current_keyboard)
                if(!accept)
                {
                    await context.send("‚õî –û—Ç–º–µ–Ω–∞", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                await Country.update({welcomePhotoURL: photo}, {where: {id: context.country.id}})
                context.country.welcomePhotoURL = photo
                await context.send("‚úÖ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Ñ–æ—Ç–æ —Ñ—Ä–∞–∫—Ü–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–æ.", {keyboard: keyboard.build(current_keyboard)})
            }
            catch (e)
            {
                await ErrorHandler.SendLogs(context, "ChangeCountryWelcomePhoto", e)
            }
        })
    }

    async ChangeCountryGroup(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                let group = await InputManager.InputGroup(context, `*public${context.country.groupID}(–°—Å—ã–ª–∫–∞ –Ω–∞ –≥—Ä—É–ø–ø—É —Ñ—Ä–∞–∫—Ü–∏–∏)\n\n–ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å:`, current_keyboard)
                if(!group) return resolve()
                const accept = await InputManager.InputBoolean(context, `–ò–∑–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É –Ω–∞ *public${group}(–Ω–æ–≤—É—é)?`, current_keyboard)
                if(!accept)
                {
                    await context.send("‚õî –û—Ç–º–µ–Ω–∞", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                await Country.update({groupID: group}, {where: {id: context.country.id}})
                context.country.groupID = group
                await context.send("‚úÖ –ì—Ä—É–ø–ø–∞ —Ñ—Ä–∞–∫—Ü–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∞.", {keyboard: keyboard.build(current_keyboard)})
            }
            catch (e)
            {
                await ErrorHandler.SendLogs(context, "ChangeCountryGroup", e)
            }
        })
    }

    async GetAllCountryResources(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                let extraction = {}
                let extract = 0
                let request = "–î–æ–±—ã—á–∞ –∏–∑ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø–æ—Å—Ç—Ä–æ–µ–∫:\n\n"
                const time = new Date()
                const future = new Date()
                future.setHours(future.getHours() + 6)
                let resource = ""
                let flag = false
                let isVoid = true
                for(let k = 0; k < Data.cities.length; k++)
                {
                    if(Data.cities[k]?.countryID === context.country.id)
                    {
                        request += "üåá –ì–æ—Ä–æ–¥ " + Data.cities[k].name + ":"
                        for(let i = 0, j = 0; i < Data.buildings[Data.cities[k].id]?.length; i++)
                        {
                            if(Data.buildings[Data.cities[k].id][i].ownerType === "country" && Data.buildings[Data.cities[k].id][i].type.match(/wheat|stone|wood|iron|silver/))
                            {
                                flag = true
                                j++
                                request += "\n" + (j) + ": " + NameLibrary.GetBuildingType(Data.buildings[Data.cities[k].id][i].type) + " \"" + Data.buildings[Data.cities[k].id][i].name + "\" "
                                if(Data.buildings[Data.cities[k].id][i].lastActivityTime - time <= 0)
                                {
                                    isVoid = false
                                    resource = Data.buildings[Data.cities[k].id][i].type.replace("building_of_", "")
                                    extract = Math.round(NameLibrary.GetFarmRandom(resource + "_lvl" + Data.buildings[Data.cities[k].id][i].level) * 0.8)
                                    request += ` - –¥–æ–±—ã—Ç–æ ${extract}`
                                    Data.buildings[Data.cities[k].id][i].lastActivityTime = future
                                    if(extraction[resource])
                                    {
                                        extraction[resource] += -extract
                                    }
                                    else
                                    {
                                        extraction[resource] = -extract
                                    }
                                }
                                else
                                {
                                    request += " - —á–µ—Ä–µ–∑ " + Math.round((Data.buildings[Data.cities[k].id][i].lastActivityTime - time) / 60000) + " –º–∏–Ω\n"
                                }
                            }
                        }
                        if(!Data.buildings[Data.cities[k].id])
                        {
                            request += " - –Ω–µ—Ç –ø–æ—Å—Ç—Ä–æ–µ–∫"
                        }
                        request += "\n\n"
                    }
                }
                if(!flag)
                {
                    await context.send("‚ö† –í —Ñ—Ä–∞–∫—Ü–∏–∏ –Ω–µ—Ç –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø–æ—Å—Ç—Ä–æ–µ–∫ –¥–ª—è –¥–æ–±—ã—á–∏ —Ä–µ—Å—É—Ä—Å–æ–≤ –ø—Ä–µ–Ω–∞–¥–ª–µ–∂–∞—â–∏—Ö –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤—É.", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                request += isVoid ? "" : ("\n\n–î–æ–±—ã—Ç–æ –≤—Å–µ–≥–æ:\n" + NameLibrary.GetPrice(extraction))
                extraction = NameLibrary.ReversePrice(extraction)
                await Data.AddCountryResources(context.country.id, extraction)
                await context.send(request)
            }
            catch (e)
            {
                await ErrorHandler.SendLogs(context, "GetAllCountryResources", e)
            }
        })
    }

    async CountryToCityTransaction(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                let cityID = await InputManager.KeyboardBuilder(context, "–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥, –≤ –±—é–¥–∂–µ—Ç –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ —Ä–µ—Å—É—Ä—Å—ã:", Data.GetCityForCountryButtons(context.country.id), current_keyboard)
                if(!cityID) return resolve()
                cityID = Data.ParseButtonID(cityID)
                const resources = [[keyboard.moneyButton, keyboard.diamondButton],
                    [keyboard.wheatButton, keyboard.woodButton, keyboard.stoneButton],
                    [keyboard.ironButton, keyboard.copperButton, keyboard.silverButton],
                    [keyboard.cancelButton]]
                const resource = await InputManager.ChooseButton(context, `${context.country.GetResources()}\n\n–ü–µ—Ä–µ–≤–æ–¥–∏—Ç—å —Ä–µ—Å—É—Ä—Å—ã –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –≤ –±—é–¥–∂–µ—Ç –≥–æ—Ä–æ–¥–∞ —Ñ—Ä–∞–∫—Ü–∏–∏.\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–∫–æ–π —Ä–µ—Å—É—Ä—Å –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –≤ –±—é–¥–∂–µ—Ç –≥–æ—Ä–æ–¥–∞ ${Data.GetCityName(cityID)}?`, resources, current_keyboard)
                if (resource === "cancel")
                {
                    context.send("‚õî –ü–µ—Ä–µ–≤–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                if(context.country[resource] <= 0)
                {
                    context.send("‚ö† –í –±—é–¥–∂–µ—Ç–µ –Ω–µ—Ç —ç—Ç–æ–≥–æ —Ä–µ—Å—É—Ä—Å–∞.", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                let count
                if(context.country[resource] > 1)
                {
                    count = await InputManager.InputInteger(context, `–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (–æ—Ç 1 –¥–æ ${context.country[resource]} —à—Ç)`, current_keyboard, 1, context.country[resource])
                    if(count === null) return resolve()
                }
                else
                {
                    count = 1
                }
                const accept = await InputManager.InputBoolean(context, `–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥:\n–ö–æ–º—É: ${Data.GetCityName(cityID)}\n–†–µ—Å—É—Ä—Å: ${NameLibrary.GetResourceName(resource)}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${count} —à—Ç\n\n–í–µ—Ä–Ω–æ?`, current_keyboard)
                if(!accept)
                {
                    context.send("‚õî –ü–µ—Ä–µ–≤–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }

                let objIN = {}
                let objOUT = {}
                objIN[resource] = count * -1
                objOUT[resource] = count

                await Data.AddCountryResources(context.country.id, objIN)
                await Data.AddCityResources(cityID, objOUT)
                await api.SendMessage(Data.cities[cityID].leaderID, `‚úÖ –ò–∑ –±—é–¥–∂–µ—Ç–∞ —Ñ—Ä–∞–∫—Ü–∏–∏ ${context.country.GetName()} –ø–æ—Å—Ç—É–ø–∏–ª –ø–µ—Ä–µ–≤–æ–¥ –≤ –±—é–¥–∂–µ—Ç –≥–æ—Ä–æ–¥–∞ ${Data.cities[cityID].name} –≤ —Ä–∞–∑–º–µ—Ä–µ:\n${NameLibrary.GetPrice(objOUT)}`)
                await context.send("‚úÖ –£—Å–ø–µ—à–Ω–æ", {keyboard: keyboard.build(current_keyboard)})
            }
            catch (e)
            {
                await ErrorHandler.SendLogs(context, "CountryToCityTransaction", e)
            }
        })
    }

    async GetCountryTax(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                let time = new Date()
                if(context.country.lastTaxTime - time > 0)
                {
                    context.send("‚ú° –í—ã —É–∂–µ —Å–æ–±–∏—Ä–∞–ª–∏ –Ω–∞–ª–æ–≥–∏, —Å–ª–µ–¥—É—é—â–∏–π —Å–±–æ—Ä –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ " + NameLibrary.ParseFutureTime(context.country.lastTaxTime), {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                let taxIncome = {}
                Object.keys(Prices["void_tax_price"]).forEach(key => {taxIncome[key] = Prices["void_tax_price"][key]})
                let totalIncome = {}
                Object.keys(Prices["void_tax_price"]).forEach(key => {totalIncome[key] = Prices["void_tax_price"][key]})
                let tax = context.country.tax / 100
                let count = 0
                for(let i = 0; i < Data.cities.length; i++)
                {
                    if(Data.cities[i]?.countryID === context.country.id)
                    {
                        Object.keys(taxIncome).forEach(key => {
                            taxIncome[key] = Math.round(parseInt(Data.cities[i][key]) * tax)
                            totalIncome[key] += taxIncome[key]
                        })
                        count++
                        taxIncome = NameLibrary.ReversePrice(taxIncome)
                        await Data.AddCityResources(Data.cities[i].id, taxIncome)
                        await api.SendMessage(Data.cities[i].leaderID, `–ü—Ä–∞–≤–∏—Ç–µ–ª—å —Ñ—Ä–∞–∫—Ü–∏–∏ ${context.country.GetName()} —Å–æ–±—Ä–∞–ª —Å –≥–æ—Ä–æ–¥–æ–≤ —Ñ—Ä–∞–∫—Ü–∏–∏ –Ω–∞–ª–æ–≥–∏ –≤ —Ä–∞–∑–º–µ—Ä–µ ${context.country.tax}%, –∏–∑ –±—é–¥–∂–µ—Ç–∞ –≥–æ—Ä–æ–¥–∞ \"${Data.cities[i].name}\" —Å–æ–±—Ä–∞–Ω–æ:\n${NameLibrary.GetPrice(taxIncome)}`)
                    }
                }
                await Data.AddCountryResources(context.country.id, totalIncome)
                time.setHours(time.getHours() + 168)
                context.country.lastTaxTime = time
                await context.send(`–° ${count} –≥–æ—Ä–æ–¥–æ–≤ —Å–æ–±—Ä–∞–Ω–æ:\n${NameLibrary.GetPrice(totalIncome)}`, {keyboard: keyboard.build(current_keyboard)})
                return resolve()
            }
            catch (e)
            {
                await ErrorHandler.SendLogs(context, "GetCountryTax", e)
            }
        })
    }

    async SetMayor(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                let cityButtons
                if(NameLibrary.RoleEstimator(context.player.role) > 2)
                {
                    cityButtons = Data.GetCityButtons()
                }
                else
                {
                    cityButtons = Data.GetCityForCountryButtons()
                }
                let city = await InputManager.KeyboardBuilder(context, "–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥", cityButtons, current_keyboard)
                if(!city) return resolve()
                city = Data.ParseButtonID(city)
                city = Data.cities[city]
                const user = await InputManager.InputUser(context, `–í—ã–±–µ—Ä–∏—Ç–µ, –∫–æ–≥–æ –Ω–∞–∑–Ω–∞—á–∏—Ç—å –≥–ª–∞–≤–æ–π –≥–æ—Ä–æ–¥–∞ ${city.name}`, current_keyboard)
                if(!user) return resolve()
                const accept = await InputManager.InputBoolean(context, `–ù–∞–∑–Ω–∞—á–∏—Ç—å *id${user.dataValues.id}(${user.dataValues.nick}) –≥–ª–∞–≤–æ–π –≥–æ—Ä–æ–¥–∞ ${city.name}?`, current_keyboard)
                if(!accept)
                {
                    await context.send("‚õî –û—Ç–º–µ–Ω–µ–Ω–æ", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                if(Data.users[user.dataValues.id]) Data.users[user.dataValues.id].status = "official"
                if(city.leaderID) await api.SendMessage(city.leaderID, `–í—ã –±—ã–ª–∏ —Å–Ω—è—Ç—ã —Å –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ –≥–ª–∞–≤—ã –≥–æ—Ä–æ–¥–∞ ${city.name}`)
                await Player.update({status: "official"}, {where: {id: user.dataValues.id}})
                if(user.dataValues.id !== Data.countries[city.countryID].leaderID)
                {
                    await OfficialInfo.findOrCreate({
                        where: {id: user.dataValues.id},
                        defaults: {id: user.dataValues.id, nick: user.dataValues.nick, countryID: city.countryID}
                    })
                }
                await City.update({leaderID: user.dataValues.id}, {where: {id: city.id}})
                city.leaderID = user.dataValues.id
                await api.SendMessage(user.dataValues.id, `–í—ã –±—ã–ª–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –≥–ª–∞–≤–æ–π –≥–æ—Ä–æ–¥–∞ ${city.name}`)
                await context.send(`‚úÖ –ò–≥—Ä–æ–∫ ${await NameLibrary.GetPlayerNick(user.dataValues.id)} –Ω–∞–∑–Ω–∞—á–µ–Ω –≥–ª–∞–≤–æ–π –≥–æ—Ä–æ–¥–∞ ${city.name}`, {keyboard: keyboard.build(current_keyboard)})
            }
            catch (e)
            {
                await ErrorHandler.SendLogs(context, "SetMayor", e)
            }
        })
    }

    async SetTax(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                const taxButtons = [
                    ["üèô –ì–æ—Ä–æ–¥—Å–∫–æ–π –Ω–∞–ª–æ–≥", "tax"],
                    ["üßë –ì—Ä–∞–∂–¥–∞–Ω—Å–∫–∏–π –Ω–∞–ª–æ–≥", "citizenTax"],
                    ["üßë‚Äçü¶Ø –¢—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –Ω–∞–ª–æ–≥", "nonCitizenTax"],
                    ["‚è© –í—ä–µ–∑–¥–Ω–∞—è –ø–æ—à–ª–∏–Ω–∞", "entranceFee"],
                ]
                const taxType = await InputManager.KeyboardBuilder(context, "–ö–∞–∫–æ–π —Ç–∏–ø –Ω–∞–ª–æ–≥–∞ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å?", taxButtons, current_keyboard)
                if(!taxType) return resolve()
                const taxSamples = {
                    tax: "–£–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥—Å–∫–æ–π –Ω–∞–ª–æ–≥ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö (—ç—Ç–æ—Ç –Ω–∞–ª–æ–≥ –≤—ã –º–æ–∂–µ—Ç–µ —Å–Ω–∏–º–∞—Ç—å —Å –≥–æ—Ä–æ–¥–æ–≤ —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é)",
                    citizenTax: "–£–∫–∞–∂–∏—Ç–µ –Ω–∞–ª–æ–≥ –¥–ª—è –≥—Ä–∞–∂–¥–∞–Ω –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö (—ç—Ç–æ—Ç –Ω–∞–ª–æ–≥ –±—É–¥–µ—Ç —Å–Ω–∏–º–∞—Ç—å—Å—è —Å –≥—Ä–∞–∂–¥–∞–Ω –ø—Ä–∏ –¥–æ–±—ã—á–µ —Ä–µ—Å—É—Ä—Å–æ–≤ –∏ –æ–±–º–µ–Ω–µ —Ä–µ—Å—É—Ä—Å–∞–º–∏)",
                    nonCitizenTax: "–£–∫–∞–∂–∏—Ç–µ –Ω–∞–ª–æ–≥ –¥–ª—è –≥—Ä–∞–∂–¥–∞–Ω –¥—Ä—É–≥–æ–π —Ñ—Ä–∞–∫—Ü–∏–∏ –∏ –∞–ø–∞—Ç—Ä–∏–¥–æ–≤ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö (—ç—Ç–æ—Ç –Ω–∞–ª–æ–≥ –±—É–¥–µ—Ç —Å–Ω–∏–º–∞—Ç—å—Å—è —Å –∏–≥—Ä–æ–∫–æ–≤, –Ω–µ —è–≤–ª—è—é—â–∏—Ö—Å—è –≥—Ä–∞–∂–¥–∞–Ω–∞–º–∏ —Ñ—Ä–∞–∫—Ü–∏–∏, –ø—Ä–∏ –¥–æ–±—ã—á–µ —Ä–µ—Å—É—Ä—Å–æ–≤ –∏ –æ–±–º–µ–Ω–µ —Ä–µ—Å—É—Ä—Å–∞–º–∏)",
                    entranceFee: "–£–∫–∞–∂–∏—Ç–µ –≤—ä–µ–∑–¥–Ω—É—é –ø–æ—à–ª–∏–Ω—É –≤ –º–æ–Ω–µ—Ç–∞—Ö (—ç—Ç–æ —Ç–∞ —Å—É–º–º–∞, –∫–æ—Ç–æ—Ä—É—é –Ω–∞–¥–æ –æ–ø–ª–∞—Ç–∏—Ç—å –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –≤ –≤–∞—à—É —Ñ—Ä–∞–∫—Ü–∏—é)"
                }
                const tax = await InputManager.InputInteger(context, taxSamples[taxType], current_keyboard, 0, taxType === "entranceFee" ? Number.MAX_SAFE_INTEGER : 100)
                if(tax === null) return resolve()
                context.country[taxType] = tax
                let newTax = {}
                newTax[taxType] = tax
                await Country.update(newTax, {where: {id: context.country.id}})
                await context.send("‚úÖ –ù–∞–ª–æ–≥ –∏–∑–º–µ–Ω–µ–Ω.", {keyboard: keyboard.build(current_keyboard)})
                return resolve()
            }
            catch (e)
            {
                await ErrorHandler.SendLogs(context, "SetTax", e)
            }
        })
    }

    async BuildNewCity(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                let leader = await InputManager.InputUser(context, `${context.country.GetResources()}\n\n–°—Ç–æ–∏–º–æ—Å—Ç—å —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞ –Ω–æ–≤–æ–≥–æ –≥–æ—Ä–æ–¥–∞:\n${NameLibrary.GetPrice(Prices["new_city"])}\n\n–£–∫–∞–∂–∏—Ç–µ –≥—Ä–∞–¥–æ–Ω–∞—á–∞–ª—å–Ω–∏–∫–∞`, current_keyboard)
                if(!leader) return resolve()
                let leaderInfo = await PlayerStatus.findOne({where: {id: leader.dataValues.id}})
                if(leaderInfo.dataValues.citizenship !== context.country.id)
                {
                    await context.send("‚õî –í –±—é–¥–∂–µ—Ç–µ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç —Ä–µ—Å—É—Ä—Å–æ–≤", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                if(!context.country.CanPay(Prices["new_city"]))
                {
                    await context.send(`‚ö† `, {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }

                let city = await City.findOne({where: {leaderID: leader.dataValues.id}})
                while(city)
                {
                    leader = await InputManager.InputUser(context, `‚ö† –ò–≥—Ä–æ–∫ *id${leader.dataValues.id}(${leader.dataValues.nick})—É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –≥–ª–∞–≤–æ–π –≥–æ—Ä–æ–¥–∞ ${city.dataValues.name}`, current_keyboard)
                    if(!leader) return resolve()
                    leaderInfo = await PlayerStatus.findOne({where: {id: leader.dataValues.id}})
                    if(leaderInfo.dataValues.citizenship !== context.country.id)
                    {
                        await context.send(`‚ö† –ò–≥—Ä–æ–∫ *id${leader.dataValues.id}(${leader.dataValues.nick}) –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≥—Ä–∞–∂–¥–∞–Ω–∏–Ω–æ–º –≤–∞—à–µ–π —Ñ—Ä–∞–∫—Ü–∏–∏`, {keyboard: keyboard.build(current_keyboard)})
                        return resolve()
                    }
                    city = await City.findOne({where: {leaderID: leader.dataValues.id}})
                }
                let name = await InputManager.InputString(context, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –≥–æ—Ä–æ–¥–∞ (–æ—Ç 2 –¥–æ 100 —Å–∏–º–≤–æ–ª–æ–≤)", current_keyboard, 2, 100)
                if(!name) return resolve()
                city = await City.findOne({where: {name: name}})
                while(city)
                {
                    name = await InputManager.InputString(context, "‚ö† –ì–æ—Ä–æ–¥ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥.", current_keyboard, 2, 100)
                    if(!name) return resolve()
                    city = await City.findOne({where: {name: name}})
                }
                let description = await InputManager.InputString(context, "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ (–æ—Ç 2 –¥–æ 1000 —Å–∏–º–≤–æ–ª–æ–≤)", current_keyboard, 2, 1000)
                if(!description) return resolve()
                const newCity = await City.create({
                    countryID: context.country.id,
                    leaderID: leader.dataValues.id,
                    name: name,
                    description: description
                })
                await CityResources.create({id: newCity.dataValues.id})
                if(Data.users[leader.dataValues.id]) Data.users[leader.dataValues.id].status = "official"
                if(leader.dataValues.status.match(/citizen|/))
                {
                    leader.set({status: "official"})
                    await leader.save()
                }
                await Data.AddCountryResources(context.country.id, Prices["new_city"])
                await OfficialInfo.findOrCreate({
                    where: {id: leader.dataValues.id},
                    defaults: {id: leader.dataValues.id, countryID: context.country.id}
                })
                await Data.LoadCities()
                await api.SendMessage(leader.dataValues.id, `–ü—Ä–∞–≤–∏—Ç–µ–ª—å —Ñ—Ä–∞–∫—Ü–∏–∏ ${context.country.GetName()} –ø–æ—Å—Ç—Ä–æ–∏–ª –Ω–æ–≤—ã–π –≥–æ—Ä–æ–¥ \"${newCity.dataValues.name}\" –∏ –≤—ã –±—ã–ª–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –µ–≥–æ –≥–ª–∞–≤–æ–π, –≤–∞—à —Å—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ "–ß–∏–Ω–æ–≤–Ω–∏–∫"`)
                await context.send("‚úÖ –ì–æ—Ä–æ–¥ —Å–æ–∑–¥–∞–Ω.", {keyboard: keyboard.build(current_keyboard)})
                return resolve()
            }
            catch (e)
            {
                await ErrorHandler.SendLogs(context, "BuildNewCity", e)
            }
        })
    }

    async BuildTheRoad(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                const roads = await CountryRoads.findAll({where: {fromID: context.country.id}})
                let nonRoadCountryButtons = []
                let flag = true
                for(let i = 0; i < Data.countries.length; i++)
                {
                    flag = true
                    if(Data.countries[i]?.id === context.country.id) continue
                    for(let j = 0; j < roads.length; j++)
                    {
                        if(Data.countries[i]?.id === roads[j].dataValues.toID)
                        {
                            flag = false
                            break
                        }
                    }
                    if(flag && Data.countries[i])
                    {
                        nonRoadCountryButtons.push([Data.countries[i].name, "ID" + Data.countries[i].id])
                    }
                }
                if(nonRoadCountryButtons.length === 0)
                {
                    await context.send("‚Ñπ –í—ã –ø—Ä–æ–≤–µ–ª–∏ –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞–º –¥–æ—Ä–æ–≥–∏.")
                    return resolve()
                }
                let country = await InputManager.KeyboardBuilder(context, `${context.country.GetResources()}\n\n–ü–æ—Å—Ç—Ä–æ–π–∫–∞ –Ω–æ–≤–æ–π –¥–æ—Ä–æ–≥–∏ —Å—Ç–æ–∏—Ç:\n${NameLibrary.GetPrice(Prices["new_road"])}\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ñ—Ä–∞–∫—Ü–∏—é, –∫ –∫–æ—Ç–æ—Ä–æ–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–≤–µ—Å—Ç–∏ –¥–æ—Ä–æ–≥—É:`, nonRoadCountryButtons, current_keyboard)
                if(!country) return resolve()
                country = Data.countries[Data.ParseButtonID(country)]
                if(!context.country.CanPay(Prices["new_road"]))
                {
                    await context.send("‚õî –í –±—é–¥–∂–µ—Ç–µ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç —Ä–µ—Å—É—Ä—Å–æ–≤", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                const accept = await InputManager.InputBoolean(context, `–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –¥–æ—Ä–æ–≥—É –æ—Ç ${context.country.GetName()} –¥–æ ${country.GetName()}?`)
                if(!accept)
                {
                    await context.send("‚õî –û—Ç–º–µ–Ω–µ–Ω–æ", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                await Data.AddCountryResources(context.country.id, Prices["new_road"])
                const roadFrom = await CountryRoads.create({fromID: context.country.id, toID: country.id, isBlocked: true})
                const roadTo = await CountryRoads.create({fromID: country.id, toID: context.country.id, isBlocked: true})
                await api.GMMailing(`–ü—Ä–∞–≤–∏—Ç–µ–ª—å —Ñ—Ä–∞–∫—Ü–∏–∏ ${context.country.GetName()} –ø–æ—Å—Ç—Ä–æ–∏–ª –¥–æ—Ä–æ–≥—É –∫ —Ñ—Ä–∞–∫—Ü–∏–∏ ${country.GetName()}, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–æ–ø–ª–æ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–∏ –º–µ–∂–¥—É —Ñ—Ä–∞–∫—Ü–∏—è–º–∏.`, [[keyboard.startCallbackButton({command: "set_road_distance", item: roadTo.dataValues.id, addition: roadFrom.dataValues.id})]])
                await context.send("–î–æ—Ä–æ–≥–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∞, –æ—Å—Ç–∞–ª–æ—Å—å —á—Ç–æ–±—ã –ì–ú-—ã –æ–±—Ä–∞–±–æ—Ç–∞–ª–∏ –∑–∞—è–≤–∫—É", {keyboard: keyboard.build(current_keyboard)})
            }
            catch (e)
            {
                await ErrorHandler.SendLogs(context, "BuildTheRoad", e)
            }
        })
    }

    async CreateCountryBuilding(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                let city = await InputManager.KeyboardBuilder(context, "–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥, –≤ –∫–æ—Ç–æ—Ä–æ–º —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –Ω–æ–≤—É—é –ø–æ—Å—Ç—Ä–æ–π–∫—É", Data.GetCityForCountryButtons(context.country.id), current_keyboard)
                if(!city) return resolve()
                city = Data.ParseButtonID(city)
                if(Data.cities[city].buildingsScore >= Data.cities[city].maxBuildings)
                {
                    await context.send("‚ö† –õ–∏–º–∏—Ç –Ω–∞ –ø–æ—Å—Ç—Ä–æ–π–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω " + Data.cities[city].buildingsScore + "/" + Data.cities[city].maxBuildings + "\n\n–ß—Ç–æ–±—ã –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–æ–µ –∑–¥–∞–Ω–∏–µ, —Ç—Ä–µ–±—É–µ—Ç—Å—è —Ä–∞—Å—à–∏—Ä–∏—Ç—å –≥–æ—Ä–æ–¥ –∏–ª–∏ —Å–Ω–µ—Å—Ç–∏ –∫–∞–∫–æ–µ-—Ç–æ –∏–∑ –Ω–∞—Ö–æ–¥—è—â–∏—Ö—Å—è –≤ –≥–æ—Ä–æ–¥–µ.", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                const buildingButtons = [
                    ["‚öî –ö–∞–∑–∞—Ä–º–∞", "barracks"],
                    ["üõü –ü–æ—Ä—Ç", "port"],
                    ["ü™ô –ú–æ–Ω–µ—Ç–Ω—ã–π –¥–≤–æ—Ä", "mint"],
                    ["‚úù –•—Ä–∞–º", "church"],
                    ["üè¶ –ë–∞–Ω–∫", "bank"]
                ]
                context.country.resources.match(/wheat/) && buildingButtons.push(["üåæ –°–µ–ª—å—Å–∫–æ–µ —Ö–æ–∑—è–π—Å—Ç–≤–æ", "wheat"])
                context.country.resources.match(/stone/) && buildingButtons.push(["ü™® –ö–∞–º–µ–Ω–æ–ª–æ–º–Ω—è", "stone"])
                context.country.resources.match(/wood/) && buildingButtons.push(["ü™µ –õ–µ—Å–æ–∑–∞–≥–æ—Ç–æ–≤–∫–∏", "wood"])
                context.country.resources.match(/iron/) && buildingButtons.push(["üåë –ñ–µ–ª–µ–∑–Ω—ã–π —Ä—É–¥–Ω–∏–∫", "iron"])
                context.country.resources.match(/silver/) && buildingButtons.push(["ü•à –°–µ—Ä–µ–±—Ä—è–Ω–Ω—ã–π —Ä—É–¥–Ω–∏–∫", "silver"])

                let request = "–¶–µ–Ω—ã –Ω–∞ –ø–æ—Å—Ç—Ä–æ–π–∫–∏:\n\n"
                request += context.country.GetResources() + "\n\n"
                buildingButtons.forEach(key => {
                    request += key[0] + ":\n" + NameLibrary.GetPrice(Prices["new_" + key[1]]) + "\n"
                })
                const building = await InputManager.KeyboardBuilder(context, request + "\n–ö–∞–∫—É—é –ø–æ—Å—Ç—Ä–æ–π–∫—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤–æ–∑–≤–µ—Å—Ç–∏?\n–°–µ–π—á–∞—Å –≤ –≥–æ—Ä–æ–¥–µ " + Data.cities[city].buildingsScore + "/" + Data.cities[city].maxBuildings + " –ø–æ—Å—Ç—Ä–æ–µ–∫", buildingButtons, current_keyboard)
                if(!building) return resolve()
                if(!context.country.CanPay(Prices["new_" + building]))
                {
                    await context.send("‚ö† –í –±—é–¥–∂–µ—Ç–µ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç —Ä–µ—Å—É—Ä—Å–æ–≤.", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                if(building.match(/port|barracks/))
                {
                    for(let i = 0; i < Data.cities.length; i++)
                    {
                        if(Data.cities[i]?.countryID === context.country.id)
                        {
                            for(let j = 0; j < Data.buildings[Data.cities[i].id].length; j++)
                            {
                                if(Data.buildings[Data.cities[i].id][j]?.type === "building_of_" + building)
                                {
                                    await context.send(`‚ö† –í —Ñ—Ä–∞–∫—Ü–∏–∏ ${context.country.GetName()} —É–∂–µ –∏–º–µ–µ—Ç—Å—è ${NameLibrary.GetBuildingType("building_of_" + building)}`, {keyboard: keyboard.build(current_keyboard)})
                                    return resolve()
                                }
                            }
                        }
                    }
                }
                const name = await InputManager.InputString(context, "–ù–∞–∑–æ–≤–∏—Ç–µ –ø–æ—Å—Ç—Ä–æ–π–∫—É. (–æ—Ç 2 –¥–æ 100 —Å–∏–º–≤–æ–ª–æ–≤)", current_keyboard, 2, 100)
                if(!name) return resolve()
                await Data.AddCountryResources(context.country.id, Prices["new_" + building])
                await Buildings.create({
                    cityID: city,
                    name: name,
                    type: "building_of_" + building,
                    ownerID: 0,
                    ownerType: "country",
                    level: 1,
                    freezing: false
                })
                await Data.LoadBuildings()
                Data.cities[city].buildingsScore++
                await City.update({buildingsScore: Data.cities[city].buildingsScore}, {where: {id: city}})
                await api.SendMessage(Data.cities[city].leaderID, `–ü—Ä–∞–≤–∏—Ç–µ–ª—å —Ñ—Ä–∞–∫—Ü–∏–∏ ${context.country.GetName()} –≤–æ–∑–≤–µ–ª –≤ –≤–∞—à–µ–º –≥–æ—Ä–æ–¥–µ ${NameLibrary.GetBuildingType("building_of_" + building)}`)
                await context.send("‚úÖ –ü–æ—Å—Ç—Ä–æ–π–∫–∞ –≤–æ–∑–≤–µ–¥–µ–Ω–∞.", {keyboard: keyboard.build(current_keyboard)})
            }
            catch (e)
            {
                await ErrorHandler.SendLogs(context, "CreateCountryBuilding", e)
            }
        })
    }

    async UpgradeCountryBuilding(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                let request = "üè¢ –ü–æ—Å—Ç—Ä–æ–π–∫–∏:\n\n"
                const buildingButtons = []
                for(let i = 0; i < Data.cities.length; i++)
                {
                    if(Data.cities[i]?.countryID === context.country.id)
                    {
                        request += `üåá –ì–æ—Ä–æ–¥ ${Data.cities[i].name}:\n`
                        if(Data.buildings[Data.cities[i].id])
                        {
                            for(let j = 0; j < Data.buildings[Data.cities[i].id].length; j++)
                            {
                                if(Data.buildings[Data.cities[i].id][j].ownerType === "country")
                                {
                                    buildingButtons.push([NameLibrary.GetBuildingEmoji(Data.buildings[Data.cities[i].id][j].type) + Data.buildings[Data.cities[i].id][j].name, "ID" + Data.buildings[Data.cities[i].id][j].id])
                                    request += `${NameLibrary.GetBuildingType(Data.buildings[Data.cities[i].id][j].type)} \"${Data.buildings[Data.cities[i].id][j].name}\" ${Data.buildings[Data.cities[i].id][j].level} —É—Ä\n`
                                }
                            }
                        }
                        if(!Data.buildings[Data.cities[i].id])
                        {
                            request += "‚õ∫ –í –≥–æ—Ä–æ–¥–µ –Ω–µ—Ç –ø–æ—Å—Ç—Ä–æ–µ–∫"
                        }
                        request += "\n\n"
                    }
                }
                if(buildingButtons.length === 0)
                {
                    await context.send("‚õ∫ –í —Ñ—Ä–∞–∫—Ü–∏–∏ –Ω–µ—Ç –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø–æ—Å—Ç—Ä–æ–µ–∫", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                let building = await InputManager.KeyboardBuilder(context, request, buildingButtons, current_keyboard)
                if(!building) return resolve()
                building = Data.ParseButtonID(building)
                for(let i = 0; i < Data.cities.length; i++)
                {
                    if(Data.cities[i]?.countryID === context.country.id)
                    {
                        for(let j = 0; j < Data.buildings[Data.cities[i].id]?.length; j++)
                        {
                            if(Data.buildings[Data.cities[i].id][j].id === building)
                            {
                                building = Data.buildings[Data.cities[i].id][j]
                                break
                            }
                        }
                    }
                }
                if(building.level >= 4)
                {
                    await context.send(`‚ö† ${NameLibrary.GetBuildingType(building.type)} \"${building.name}\" –∏–º–µ–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å —É–ª—É—á—à–µ–Ω–∏—è.`, {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                if(building.type.match(/church|mint/))
                {
                    await context.send(NameLibrary.GetBuildingType(building.type) + " –Ω–µ –Ω—É–∂–¥–∞–µ—Ç—Å—è –≤ —É–ª—É—á—à–µ–Ω–∏–∏", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                await context.send(`–£–ª—É—á—à–µ–Ω–∏–µ –¥–ª—è ${NameLibrary.GetBuildingType(building.type)} \"${building.name}\":\n ${building.level} —É—Ä–æ–≤–µ–Ω—å => ${building.level + 1} —É—Ä–æ–≤–µ–Ω—å\n${NameLibrary.GetPrice(Prices[building.type.replace("building_of_", "") + "_lvl" + (building.level + 1)])}`)
                if(!context.country.CanPay(Prices[building.type.replace("building_of_", "") + "_lvl" + (building.level + 1)]))
                {
                    await context.send("‚ö† –í –±—é–¥–∂–µ—Ç–µ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç —Ä–µ—Å—É—Ä—Å–æ–≤.", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                const accept = await InputManager.InputBoolean(context, "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?", current_keyboard)
                if(!accept)
                {
                    await context.send("‚õî –û—Ç–º–µ–Ω–µ–Ω–æ.", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                await Data.AddCountryResources(context.country.id, Prices[building.type.replace("building_of_", "") + "_lvl" + (building.level + 1)])
                await Buildings.update({level: building.level + 1}, {where: {id: building.id}})
                building.Upgrade(building.level + 1)
                await context.send(`‚úÖ –ü–æ—Å—Ç—Ä–æ–π–∫–∞ —É–ª—É—á—à–µ–Ω–∞ –¥–æ ${building.level} —É—Ä–æ–≤–Ω—è.`, {keyboard: keyboard.build(current_keyboard)})
            }
            catch (e)
            {
                await ErrorHandler.SendLogs(context, "UpgradeCountryBuilding", e)
            }
        })
    }

    async GetCountryOfficials(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                let request = `–ß–∏–Ω–æ–≤–Ω–∏–∫–∏ —Ñ—Ä–∞–∫—Ü–∏–∏ ${context.country.GetName()}:\n\n`
                let flag = true
                for(let i = 0; i < Data.officials[context.country.id]?.length; i++)
                {
                    flag = true
                    request += `üî∏ *id${Data.officials[context.country.id][i].id}(${Data.officials[context.country.id][i].nick}) –º–æ–∂–µ—Ç:\n`
                    if(Data.officials[context.country.id][i].canBeDelegate)
                    {
                        flag = false
                        request += "- –ø—Ä–∏–Ω–∏–º–∞—Ç—å –≥—Ä–∞–∂–¥–∞–Ω\n"
                    }
                    if(Data.officials[context.country.id][i].canBeDelegate)
                    {
                        flag = false
                        request += "- –≤–æ–∑–≤–æ–¥–∏—Ç—å –≥–æ—Ä–æ–¥–∞\n"
                    }
                    if(Data.officials[context.country.id][i].canBeDelegate)
                    {
                        flag = false
                        request += "- —Ä–∞—Å–ø–æ—Ä—è–∂–∞—Ç—å—Å—è –±—é–¥–∂–µ—Ç–æ–º\n"
                    }
                    if(Data.officials[context.country.id][i].canBeDelegate)
                    {
                        flag = false
                        request += "- —Ä–∞—Å–ø–æ—Ä—è–∂–∞—Ç—å—Å—è –∞—Ä–º–∏–µ–π\n"
                    }
                    if(Data.officials[context.country.id][i].canBeDelegate)
                    {
                        flag = false
                        request += "- –Ω–∞–∑–Ω–∞—á–∞—Ç—å —á–∏–Ω–æ–≤–Ω–∏–∫–æ–≤\n"
                    }
                    if(Data.officials[context.country.id][i].canBeDelegate)
                    {
                        flag = false
                        request += "- –Ω–∞–∑–Ω–∞—á–∞—Ç—å –≥—Ä–∞–¥–æ–Ω–∞—á–∞–ª—å–Ω–∏–∫–æ–≤\n"
                    }
                    if(flag) request += "–Ω–∏—á–µ–≥–æ –Ω–µ –º–æ–∂–µ—Ç"
                    request += "\n"
                }
                await context.send(request, {keyboard: keyboard.build(current_keyboard)})
                return resolve()
            }
            catch (e)
            {
                await ErrorHandler.SendLogs(context, "GetCountryOfficials", e)
            }
        })
    }

    async SetOfficial(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                const user = await InputManager.InputUser(context, "–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä–æ–∫–∞", current_keyboard)
                if(!user) return resolve()
                const userStatus = await PlayerStatus.findOne({where: {id: user.dataValues.id}})
                if(userStatus?.dataValues.id === context.country.leaderID)
                {
                    await context.send("‚ö† –≠—Ç–æ –ø—Ä–∞–≤–∏—Ç–µ–ª—å, –ø—Ä–∞–≤–∏—Ç–µ–ª—è –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å —á–∏–Ω–æ–≤–Ω–∏–∫–æ–º", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                if(userStatus?.dataValues.citizenship !== context.country.id)
                {
                    await context.send("‚ö† –í—ã –Ω–µ –º–æ–∂–∫—Ç–µ –Ω–∞–∑–Ω–∞—á–∏—Ç—å —á–∏–Ω–æ–≤–Ω–∏–∫–æ–º –∏–≥—Ä–æ–∫–∞, –Ω–µ –∏–º–µ—é—â–µ–≥–æ –≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ –≤–∞—à–µ–π —Ñ—Ä–∞–∫—Ü–∏–∏", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                const offInfo = await OfficialInfo.findOne({where: {id: user.dataValues.id}})
                if(offInfo)
                {
                    await context.send(`‚ö† –ò–≥—Ä–æ–∫ *id${user.dataValues.id}(${user.dataValues.nick}) —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏–Ω–æ–≤–Ω–∏–∫–æ–º`, {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                await OfficialInfo.create({
                    id: user.dataValues.id,
                    countryID: context.country.id,
                    nick: user.dataValues.nick
                })
                if(user.dataValues.status !== "worker")
                {
                    await Player.update({status: "official"}, {where: {id: user.dataValues.id}})
                    if(Data.users[user.dataValues.id]) Data.users[user.dataValues.id].status = "official"
                }
                await Data.LoadOfficials()
                await api.SendMessage(user.dataValues.id, `–ü—Ä–∞–≤–∏—Ç–µ–ª—å —Ñ—Ä–∞–∫—Ü–∏–∏ ${context.country.GetName()} –Ω–∞–∑–Ω–∞—á–∏–ª –≤–∞—Å —á–∏–Ω–æ–≤–Ω–∏–∫–æ–º`)
                await context.send(`‚úÖ –ò–≥—Ä–æ–∫ *id${user.dataValues.id}(${user.dataValues.nick}) –Ω–∞–∑–Ω–∞—á–µ–Ω —á–∏–Ω–æ–≤–Ω–∏–∫–æ–º`, {keyboard: keyboard.build(current_keyboard)})
            }
            catch (e)
            {
                await ErrorHandler.SendLogs(context, "SetOfficial", e)
            }
        })
    }

    async ChangeOfficial(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                const officialButtons = []
                for(let i = 0; i < Data.officials[context.country.id]?.length; i++)
                {
                    officialButtons.push([Data.officials[context.country.id][i].nick, "ID" + i])
                }
                if(officialButtons.length === 0)
                {
                    await context.send("‚ö† –í –≤–∞—à–µ–π —Ñ—Ä–∞–∫—Ü–∏–∏ –Ω–µ—Ç —á–∏–Ω–æ–≤–Ω–∏–∫–æ–≤", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                let official = await InputManager.KeyboardBuilder(context, "–í—ã–±–µ—Ä–∏—Ç–µ —á–∏–Ω–æ–≤–Ω–∏–∫–∞", officialButtons, current_keyboard)
                if(!official) return resolve()
                official = Data.ParseButtonID(official)
                official = Data.officials[context.country.id][official]
                const request = "–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:\n\nüî∏–î–µ–ª–µ–≥–∞—Ç - –º–æ–∂–µ—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å –≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ\nüî∏–ì–æ—Ä–æ–¥–∞ - –º–æ–∂–µ—Ç –≤–æ–∑–≤–æ–¥–∏—Ç—å –≥–æ—Ä–æ–¥–∞\nüî∏–†–µ—Å—É—Ä—Å—ã - –º–æ–∂–µ—Ç —Ä–∞—Å–ø–æ—Ä—è–∂–∞—Ç—å—Å—è –±—é–¥–∂–µ—Ç–æ–º\nüî∏–ß–∏–Ω–æ–≤–Ω–∏–∫–∏ - –º–æ–∂–µ—Ç –Ω–∞–∑–Ω–∞—á–∞—Ç—å –¥—Ä—É–≥–∏—Ö —á–∏–Ω–æ–≤–Ω–∏–∫–æ–≤, –Ω–æ –Ω–µ –º–æ–∂–µ—Ç –≤—ã–¥–∞–≤–∞—Ç—å –∏–º –ø—Ä–∞–≤–∞\nüî∏–ì—Ä–∞–¥–æ–Ω–∞—á–∞–ª—å–Ω–∏–∫–∏ - –º–æ–∂–µ—Ç –º–µ–Ω—è—Ç—å –≥–ª–∞–≤ –≥–æ—Ä–æ–¥–æ–≤"
                const rulesData = [
                    ["–î–µ–ª–µ–≥–∞—Ç", "canBeDelegate", official.canBeDelegate],
                    ["–ì–æ—Ä–æ–¥–∞", "canBuildCity", official.canBuildCity],
                    ["–†–µ—Å—É—Ä—Å—ã", "canUseResources", official.canUseResources],
                    ["–ß–∏–Ω–æ–≤–Ω–∏–∫–∏", "canAppointOfficial", official.canAppointOfficial],
                    ["–ì—Ä–∞–¥–æ–Ω–∞—á–∞–ª—å–Ω–∏–∫–∏", "canAppointMayors", official.canAppointMayors]
                ]
                const rules = await InputManager.RadioKeyboardBuilder(context, request, rulesData, current_keyboard)
                if(!rules) return resolve()
                let newRules = {}
                for(let i = 0; i < rules.length; i++)
                {
                    newRules[rules[i][0]] = rules[i][1]
                    official[rules[i][0]] = rules[i][1]
                }
                await OfficialInfo.update(newRules, {where: {id: official.id}})
                await api.SendMessage(official.id, `‚Ñπ –í–∞—à–∏ –ø—Ä–∞–≤–∞ –∫–∞–∫ —á–∏–Ω–æ–≤–Ω–∏–∫–∞ –∏–∑–º–µ–Ω–µ–Ω—ã, —Ç–µ–ø–µ—Ä—å –≤—ã:\n\nüî∏–ú–æ–∂–µ—Ç–µ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ - ${newRules.canBeDelegate?"–î–∞":"–ù–µ—Ç"}\nüî∏–ú–æ–∂–µ—Ç–µ –≤–æ–∑–≤–æ–¥–∏—Ç—å –≥–æ—Ä–æ–¥–∞ - ${newRules.canBuildCity?"–î–∞":"–ù–µ—Ç"}\nüî∏–ú–æ–∂–µ—Ç —Ä–∞—Å–ø–æ—Ä—è–∂–∞—Ç—å—Å—è –±—é–¥–∂–µ—Ç–æ–º - ${newRules.canUseResources?"–î–∞":"–ù–µ—Ç"}\nüî∏–ú–æ–∂–µ—Ç –Ω–∞–∑–Ω–∞—á–∞—Ç—å –¥—Ä—É–≥–∏—Ö —á–∏–Ω–æ–≤–Ω–∏–∫–æ–≤ - ${newRules.canAppointOfficial?"–î–∞":"–ù–µ—Ç"}\nüî∏–ú–æ–∂–µ—Ç –º–µ–Ω—è—Ç—å –≥–ª–∞–≤ –≥–æ—Ä–æ–¥–æ–≤ - ${newRules.canAppointMayors?"–î–∞":"–ù–µ—Ç"}`)
                await context.send("‚úÖ –ü—Ä–∞–≤–∞ —á–∏–Ω–æ–≤–Ω–∏–∫–∞ –∏–∑–º–µ–Ω–µ–Ω—ã", {keyboard: keyboard.build(current_keyboard)})
            }
            catch (e)
            {
                await ErrorHandler.SendLogs(context, "ChangeOfficial", e)
            }
        })
    }

    async TakeAwayOfficial(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                const officialButtons = []
                for(let i = 0; i < Data.officials[context.country.id]?.length; i++)
                {
                    officialButtons.push([Data.officials[context.country.id][i].nick, "ID" + i])
                }
                if(officialButtons.length === 0)
                {
                    await context.send("‚ö† –í –≤–∞—à–µ–π —Ñ—Ä–∞–∫—Ü–∏–∏ –Ω–µ—Ç —á–∏–Ω–æ–≤–Ω–∏–∫–æ–≤", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                let official = await InputManager.KeyboardBuilder(context, "–í—ã–±–µ—Ä–∏—Ç–µ —á–∏–Ω–æ–≤–Ω–∏–∫–∞", officialButtons, current_keyboard)
                if(!official) return resolve()
                official = Data.ParseButtonID(official)
                official = Data.officials[context.country.id][official]
                const accept = await InputManager.InputBoolean(context, `–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–±—Ä–∞—Ç—å –ø—Ä–∞–≤–∞ —á–∏–Ω–æ–≤–Ω–∏–∫–∞ —É –∏–≥—Ä–æ–∫–∞ *id${official.id}(${official.nick})?`)
                if(!accept)
                {
                    await context.send("‚õî –û—Ç–º–µ–Ω–µ–Ω–æ", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                await OfficialInfo.destroy({where: {id: official.id}})
                const user = await Player.findOne({where: {id: official.id}})
                if(user.dataValues.status !== "worker")
                {
                    user.set({status: "citizen"})
                    await user.save()
                    if(Data.users[user.dataValues.id]) Data.users[user.dataValues.id].status = "citizen"
                }
                await api.SendMessage(official.id, `‚ö† –ü—Ä–∞–≤–∏—Ç–µ–ª—å —Ñ—Ä–∞–∫—Ü–∏–∏ ${context.country.GetName()} –∑–∞–±—Ä–∞–ª —É –≤–∞—Å –ø—Ä–∞–≤–∞ —á–∏–Ω–æ–≤–Ω–∏–∫–∞.`)
                await Data.LoadOfficials()
                await context.send(`‚úÖ –ò–≥—Ä–æ–∫ *id${user.dataValues.id}(${user.dataValues.nick}) –ª–∏—à–µ–Ω —Å—Ç–∞—Ç—É—Å–∞ —á–∏–Ω–æ–≤–Ω–∏–∫–∞`, {keyboard: keyboard.build(current_keyboard)})
                return resolve()
            }
            catch (e)
            {
                await ErrorHandler.SendLogs(context, "TakeAwayOfficial", e)
            }
        })
    }

    async TakeAwayCitizenship(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                const user = await InputManager.InputUser(context, "–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä–æ–∫–∞", current_keyboard)
                if(!user) return resolve()
                const status = await PlayerStatus.findOne({where: {id: user.dataValues.id}})
                if(status.dataValues.citizenship !== context.country.id)
                {
                    await context.send(`‚ö† –ò–≥—Ä–æ–∫ *id${user.dataValues.id}(${user.dataValues.nick}) –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≥—Ä–∞–∂–¥–∞–Ω–∏–Ω–æ–º —Ñ—Ä–∞–∫—Ü–∏–∏ ${context.country.GetName()}`, {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                if(user.dataValues.id === context.country.leaderID)
                {
                    await context.send(`‚õî –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –∑–∞–±—Ä–∞—Ç—å –≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ —É –ø—Ä–∞–≤–∏—Ç–µ–ª—è`, {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                if(user.dataValues.status?.match(/official|leader/))
                {
                    await context.send(`‚ö† –ü–µ—Ä–µ–¥ —Ç–µ–º –∫–∞–∫ –∑–∞–±—Ä–∞—Ç—å –≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ —É –∏–≥—Ä–æ–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–º–µ—Å—Ç–∏—Ç—å –µ–≥–æ —Å –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ —á–∏–Ω–æ–≤–Ω–∏–∫–∞`, {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                const accept = await InputManager.InputBoolean(context, `–õ–∏—à–∏—Ç—å –∏–≥—Ä–æ–∫–∞ *id${user.dataValues.id}(${user.dataValues.nick}) –≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–∞ —Ñ—Ä–∞–∫—Ü–∏–∏ ${context.country.GetName()}?`, current_keyboard)
                if(!accept)
                {
                    await context.send("‚õî –û—Ç–º–µ–Ω–µ–Ω–æ", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                status.set({citizenship: null})
                await status.save()
                if(Data.users[user.dataValues.id])
                {
                    Data.users[user.dataValues.id].citizenship = null
                    Data.users[user.dataValues.id].status = "stateless"
                }
                await api.SendMessage(user.dataValues.id, `‚ö† –ü—Ä–∞–≤–∏—Ç–µ–ª—å—Å—Ç–≤–æ —Ñ—Ä–∞–∫—Ü–∏–∏ ${context.country.GetName()} –ª–∏—à–∏–ª–æ –≤–∞—Å –≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–∞`)
                await context.send("‚úÖ –ò–≥—Ä–æ–∫ –ª–∏—à–µ–Ω –≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–∞", {keyboard: keyboard.build(current_keyboard)})
                return resolve()
            }
            catch (e)
            {
                await ErrorHandler.SendLogs(context, "TakeAwayCitizenship", e)
            }
        })
    }

    async OfferMarry(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                if(context.player.isMarried)
                {
                    await context.send("‚ö† –í—ã —É–∂–µ –ø–æ–º–æ–ª–≤–ª–µ–Ω—ã", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                const user = await InputManager.InputUser(context, "–ö–æ–º—É –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ?", current_keyboard)
                if(!user) return resolve()
                const userInfo = await PlayerInfo.findOne({where: {id: user.dataValues.id}})
                if(isNaN(userInfo.dataValues.marriedID))
                {
                    await context.send(`‚ö† ${await NameLibrary.GetPlayerNick(user.dataValues.id)} —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç –≤ –±—Ä–∞–∫–µ!`, {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                if(NameLibrary.GetGender(user.dataValues.gender) === context.player.gender)
                {
                    await context.send("‚úù –ù–µ –Ω–∞–¥–æ —Ç–∞–∫.", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                const text = await InputManager.InputString(context, "–ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.", current_keyboard)
                if (!text) return resolve()

                const accept = await InputManager.InputBoolean(context, `–¢–µ–∫—Å—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è:\n${text}\n–°–¥–µ–ª–∞—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ –±—Ä–∞–∫ –∏–≥—Ä–æ–∫—É *id${user.dataValues.id}(${user.dataValues.nick})?\n‚Ñπ –ï—Å–ª–∏ –∏–≥—Ä–æ–∫ —Å–æ–≥–ª–∞—Å–∏—Ç—Å—è, —Ç–æ —É –≤–∞—Å –±—É–¥–µ—Ç –∑–∞–∫–ª—é—á–µ–Ω –±—Ä–∞–∫.`, current_keyboard)
                if(!accept)
                {
                    await context.send("‚õî –û—Ç–º–µ–Ω–µ–Ω–æ", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                await api.api.messages.send({
                    user_id: user.dataValues.id,
                    random_id: Math.round(Math.random() * 100000),
                    message: `üíç –ò–≥—Ä–æ–∫ *id${context.player.id}(${context.player.nick}) –æ—Ç–ø—Ä–∞–≤–∏–ª –≤–∞–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Ä—É–∫–∏ –∏ —Å–µ—Ä–¥—Ü–∞ —Å —Ç–µ–∫—Å—Ç–æ–º:\n${text}`,
                    keyboard: keyboard.build([[keyboard.acceptCallbackButton({command: "merry", item: context.player.id}), keyboard.declineCallbackButton({command: "decline_merry", item: context.player.id})]]).inline().oneTime()
                })
                Data.users[context.player.id].isMarried = true
                await context.send("‚úÖ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ", {keyboard: keyboard.build(current_keyboard)})
                return resolve()
            }
            catch (e)
            {
                await ErrorHandler.SendLogs(context, "OfferMarry", e)
            }
        })
    }

    async Divorce(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                if(!context.player.marriedID)
                {
                    await context.send("‚ö† –í—ã –Ω–µ –≤ –±—Ä–∞–∫–µ.", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                const accept = await InputManager.InputBoolean(context, `–í—ã —Ö–æ—Ç–∏—Ç–µ —Ä–∞—Å—Ç–æ—Ä–≥–Ω—É—Ç—å –±—Ä–∞–∫ —Å –∏–≥—Ä–æ–∫–æ–º ${await NameLibrary.GetPlayerNick(context.player.marriedID)}?\n‚Ñπ –ï—Å–ª–∏ –∏–≥—Ä–æ–∫ —Ç–æ–∂–µ —Å–æ–≥–ª–∞—Å–∏—Ç—Å—è –Ω–∞ —ç—Ç–æ, —Ç–æ –≤–∞—à –±—Ä–∞–∫ –±—É–¥–µ—Ç —Ä–∞—Å—Ç–æ—Ä–∂–µ–Ω.`, current_keyboard)
                if(!accept)
                {
                    await context.send("‚õî –û—Ç–º–µ–Ω–µ–Ω–æ")
                    return resolve()
                }
                await api.api.messages.send({
                    user_id: context.player.marriedID,
                    random_id: Math.round(Math.random() * 100000),
                    message: `‚ù§Ô∏è‚Äçü©π –ò–≥—Ä–æ–∫ *id${context.player.id}(${context.player.nick}) –æ—Ç–ø—Ä–∞–≤–∏–ª –≤–∞–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Ä–∞—Å—Ç–æ—Ä–≥–Ω—É—Ç—å –±—Ä–∞–∫`,
                    keyboard: keyboard.build([[keyboard.acceptCallbackButton({command: "divorce", item: context.player.id}), keyboard.declineCallbackButton({command: "decline_divorce", item: context.player.id})]]).inline().oneTime()
                })
                await context.send("‚úÖ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ", {keyboard: keyboard.build(current_keyboard)})
            }
            catch (e)
            {
                await ErrorHandler.SendLogs(context, "Divorce", e)
            }
        })
    }

    async GetCitizenship(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                if(context.player.status.match(/official|leader/))
                {
                    await context.send("‚ö† –ü—Ä–∞–≤–∏—Ç–µ–ª–∏ –∏ —á–∏–Ω–æ–≤–Ω–∏–∫–∏ –Ω–µ –º–æ–≥—É—Ç –º–µ–Ω—è—Ç—å –≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                if(context.player.status.match(/candidate/))
                {
                    await context.send("‚ö† –í—ã —É–∂–µ –ø–æ–¥–∞–ª–∏ –Ω–∞ –≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                if(context.player.citizenship !== null)
                {
                    const firstAccept = await InputManager.InputBoolean(context, `‚ö† –í—ã—Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç –≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–∞ —Ñ—Ä–∞–∫—Ü–∏–∏ ${Data.GetCountryName(context.player.citizenship)}?\n–ü–æ—Å–ª–µ –æ—Ç–∫–∞–∑–∞ –≤–∞—à —Å—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–∏—Ç—Å—è –Ω–∞ \"–∞–ø–∞—Ç—Ä–∏–¥\".`, current_keyboard)
                    if(!firstAccept) return resolve()
                }
                let country = await InputManager.KeyboardBuilder(context, "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ—Ä–∞–∫—Ü–∏—é, –≥—Ä–∞–∂–¥–∞–Ω–∏–Ω–æ–º –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–∏—Ç–µ —Å—Ç–∞—Ç—å:", Data.GetCountryButtons(), current_keyboard)
                if(!country) return resolve()
                country = Data.ParseButtonID(country)
                if(country === context.player.citizenship)
                {
                    await context.send("‚ö† –í—ã —É–∂–µ —è–≤–ª—è–µ—Ç–µ—Å—å –≥—Ä–∞–∂–¥–∞–Ω–∏–Ω–æ–º —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω—ã.", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                await api.api.messages.send({
                    user_id: Data.countries[country].leaderID,
                    random_id: Math.round(Math.random() * 100000),
                    message: `ü™™ –ò–≥—Ä–æ–∫ ${context.player.GetName()} –ø–æ–¥–∞–ª –Ω–∞ –≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ –≤ –≤–∞—à—É —Ñ—Ä–∞–∫—Ü–∏—é: \n\n${context.player.GetInfo()}`,
                    keyboard: keyboard.build([[keyboard.acceptCallbackButton({command: "give_citizenship", item: context.player.id, parameter: country}), keyboard.declineCallbackButton({command: "decline_citizenship", item: context.player.id, parameter: country})]]).inline().oneTime()
                })
                for(let i = 0; i < Data.officials[country]?.length; i++)
                {
                    if(Data.officials[country][i].canBeDelegate)
                    {
                        await api.api.messages.send({
                            user_id: Data.officials[country][i].id,
                            random_id: Math.round(Math.random() * 100000),
                            message: `ü™™ –ò–≥—Ä–æ–∫ ${context.player.GetName()} –ø–æ–¥–∞–ª –Ω–∞ –≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ –≤ –≤–∞—à—É —Ñ—Ä–∞–∫—Ü–∏—é: \n\n${context.player.GetInfo()}`,
                            keyboard: keyboard.build([[keyboard.acceptCallbackButton({command: "give_citizenship", item: context.player.id, parameter: country}), keyboard.declineCallbackButton({command: "decline_citizenship", item: context.player.id, parameter: country})]]).inline().oneTime()
                        })
                    }
                }

                if(!context.player.status.match(/worker/))
                {
                    Data.users[context.player.id].status = "candidate"
                }
                context.player.waitingCitizenship = setTimeout(() => {
                    if(!context.player.status.match(/worker/))
                    {
                        Data.users[context.player.id].status = "stateless"
                    }
                }, 86400000)
                await context.send("‚úÖ –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.\n–ü—Ä–∞–≤–∏—Ç–µ–ª—å –∏–ª–∏ –¥–µ–ª–µ–≥–∞—Ç—ã –≤ —Ç–µ—á–µ–Ω–∏–∏ 24 —á–∞—Å–æ–≤ —Ä–∞—Å—Å–º–æ—Ç—Ä—è—Ç –≤–∞—à—É –∫–∞–Ω–¥–∏–¥–∞—Ç—É—Ä—É –∏ –ø—Ä–∏–º—É—Ç —Ä–µ—à–µ–Ω–∏–µ.", {keyboard: keyboard.build(current_keyboard)})
            }
            catch (e)
            {
                await ErrorHandler.SendLogs(context, "GetCitizenship", e)
            }
        })
    }

    async RefuseCitizenship(context, current_keyboard, scenes)
    {
        return new Promise(async (resolve) => {
            try
            {
                if(context.player.status.match(/official|leader/))
                {
                    await context.send("‚ö† –ü—Ä–∞–≤–∏—Ç–µ–ª–∏ –∏ —á–∏–Ω–æ–≤–Ω–∏–∫–∏ –Ω–µ –º–æ–≥—É—Ç –æ—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç –≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–∞", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                const firstAccept = await InputManager.InputBoolean(context, `‚ö† –í—ã—Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç –≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–∞ —Ñ—Ä–∞–∫—Ü–∏–∏ ${Data.GetCountryName(context.player.citizenship)}?\n–ü–æ—Å–ª–µ –æ—Ç–∫–∞–∑–∞ –≤–∞—à —Å—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–∏—Ç—Å—è –Ω–∞ \"–∞–ø–∞—Ç—Ä–∏–¥\" –∏ –ø—Ä–æ–ø–∞–¥–µ—Ç –ø—Ä–æ–ø–∏—Å–∫–∞, –≤–∞—à–µ –∏–º—É—â–µ—Å—Ç–≤–æ –æ—Å—Ç–∞–Ω–µ—Ç—Å—è —É –≤–∞—Å.`, current_keyboard)
                if(!firstAccept)
                {
                    await context.send("‚õî –û—Ç–∫–ª–æ–Ω–µ–Ω–æ", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                const secondAccept = await  InputManager.InputBoolean(context, "–í—ã —É–≤–µ—Ä–µ–Ω—ã?", current_keyboard)
                if(!secondAccept)
                {
                    await context.send("‚õî –û—Ç–∫–ª–æ–Ω–µ–Ω–æ", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                const country = await Country.findOne({where: {id: context.player.citizenship}})
                country.set({
                    population: country.population - 1
                })
                await country.save()
                await PlayerStatus.update({
                    citizenship: null
                },{where: {id: context.player.id}})
                await PlayerInfo.update({
                    registration: null
                },{where: {id: context.player.id}})
                if(!context.player.status.match(/worker/))
                {
                    Data.users[context.player.id].status = "stateless"
                    await Player.update({
                        status: "stateless"
                    },{where: {id: context.player.id}})
                }
                context.player.citizenship = null
                context.player.registration = null
                context.send("–¢–µ–ø–µ—Ä—å –≤—ã –∞–ø–∞—Ç—Ä–∏–¥.", {keyboard: keyboard.build(await scenes.keyboard(context))})
            }
            catch (e)
            {
                await ErrorHandler.SendLogs(context, "RefuseCitizenship", e)
            }
        })
    }

    async GetRegistration(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                if(context.player.registration === "candidate")
                {
                    await context.send("‚ö† –í—ã —É–∂–µ –ø–æ–¥–∞–ª–∏ –∑–∞—è–≤–∫—É", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                await api.api.messages.send({
                    user_id: Data.cities[context.player.location].leaderID,
                    random_id: Math.round(Math.random() * 100000),
                    message: `ü™™ –ò–≥—Ä–æ–∫ *id${context.player.id}(${context.player.nick}) –ø–æ–¥–∞–ª –∑–∞—è–≤–∫—É –Ω–∞ –ø—Ä–æ–ø–∏—Å–∫—É –≤ –≤–∞—à–µ–º –≥–æ—Ä–æ–¥–µ`,
                    keyboard: keyboard.build([[keyboard.acceptCallbackButton({command: "give_registration", item: context.player.id, parameter: context.player.location}), keyboard.declineCallbackButton({command: "decline_registration", item: context.player.id, parameter: context.player.location})]]).inline().oneTime()
                })
                context.player.registration = "candidate"
                context.player.waitingRegistration = setTimeout(() => {
                    context.player.registration = null
                }, 86400000)
                await context.send("‚úÖ –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.\n–ì–ª–∞–≤–∞ –≥–æ—Ä–æ–¥–∞ –≤ —Ç–µ—á–µ–Ω–∏–∏ 24 —á–∞—Å–æ–≤ —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç –≤–∞—à—É –∫–∞–Ω–¥–∏–¥–∞—Ç—É—Ä—É –∏ –ø—Ä–∏–º–µ—Ç —Ä–µ—à–µ–Ω–∏–µ.", {keyboard: keyboard.build(current_keyboard)})
            }
            catch (e)
            {
                await ErrorHandler.SendLogs(context, "GetRegistration", e)
            }
        })
    }

    async RefuseRegistration(context, current_keyboard, scenes)
    {
        return new Promise(async (resolve) => {
            try
            {
                const firstAccept = await InputManager.InputBoolean(context, `‚ö† –í—ã—Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç –ø—Ä–æ–ø–∏—Å–∫–∏ –≤ –≥–æ—Ä–æ–¥–µ ${Data.GetCityName(context.player.registration)}?`, current_keyboard)
                if(!firstAccept)
                {
                    await context.send("–û—Ç–∫–ª–æ–Ω–µ–Ω–æ", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                const secondAccept = await  InputManager.InputBoolean(context, "–í—ã —É–≤–µ—Ä–µ–Ω—ã?", current_keyboard)
                if(!secondAccept)
                {
                    await context.send("–û—Ç–∫–ª–æ–Ω–µ–Ω–æ", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                await PlayerInfo.update({registration: null},{where: {id: context.player.id}})
                context.player.registration = null
                context.send("–¢–µ–ø–µ—Ä—å –≤—ã –±–µ–∑ –ø—Ä–æ–ø–∏—Å–∫–∏.", {keyboard: keyboard.build(await scenes.keyboard(context))})
            }
            catch (e)
            {
                await ErrorHandler.SendLogs(context, "RefuseRegistration", e)
            }
        })
    }

    async Transaction(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                const user = await InputManager.InputUser(context, "–ö–æ–º—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ —Ä–µ—Å—É—Ä—Å?", current_keyboard)
                if(!user) return resolve()
                if(user.dataValues.id === context.player.id)
                {
                    context.send("‚õî –ö–∞–∫–æ–π —Å–º—ã—Å–ª –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å —Å–∞–º–æ–º—É —Å–µ–±–µ?", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                context.send(`*id${context.player.id}(–í–∞—à) –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å:\nüíµ –î–µ–Ω—å–≥–∏:  ${context.player.money}\nü™® –ö–∞–º–µ–Ω—å:${context.player.stone}\nüåæ –ó–µ—Ä–Ω–æ:${context.player.wheat}\nü™µ –î–µ—Ä–µ–≤–æ:${context.player.wood}\nüåë –ñ–µ–ª–µ–∑–æ:${context.player.iron}\nü™ô –ú–µ–¥—å:${context.player.copper}\nü•à –°–µ—Ä–µ–±—Ä–æ:${context.player.silver}\nüíé –ê–ª–º–∞–∑—ã:${context.player.diamond}`)
                const resources = [[keyboard.moneyButton, keyboard.diamondButton],
                    [keyboard.wheatButton, keyboard.woodButton, keyboard.stoneButton],
                    [keyboard.ironButton, keyboard.copperButton, keyboard.silverButton],
                    [keyboard.cancelButton]]
                const resource = await InputManager.ChooseButton(context, `–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–∫–æ–π —Ä–µ—Å—É—Ä—Å –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –∏–≥—Ä–æ–∫—É *id${user.dataValues.id}(${user.dataValues.nick}):`, resources, current_keyboard)
                if (!resource) return resolve()
                if(resource.match(/cancel/))
                {
                    context.send("‚õî –ü–µ—Ä–µ–≤–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                if(Data.users[context.player.id][resource] === 0)
                {
                    context.send("‚ö† –£ –≤–∞—Å –Ω–µ—Ç —ç—Ç–æ–≥–æ —Ä–µ—Å—É—Ä—Å–∞.", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                let count
                if(Data.users[context.player.id][resource] > 1)
                {
                    count = await InputManager.InputInteger(context, `–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (–æ—Ç 1 –¥–æ ${Data.users[context.player.id][resource]} —à—Ç)`, current_keyboard, 1, Data.users[context.player.id][resource])
                    if(count === null) return resolve()
                }
                else
                {
                    count = 1
                }
                const accept = await InputManager.InputBoolean(context, `–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥:\n–ö–æ–º—É: *id${user.dataValues.id}(${user.dataValues.nick})\n–†–µ—Å—É—Ä—Å: ${NameLibrary.GetResourceName(resource)}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${count} —à—Ç\n\n–í–µ—Ä–Ω–æ?`, current_keyboard)
                if(!accept)
                {
                    context.send("‚õî –ü–µ—Ä–µ–≤–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }

                let objIN = {}
                let objOUT = {}
                objIN[resource] = count * -1
                objOUT[resource] = count

                await Data.AddPlayerResources(user.dataValues.id, objOUT)
                await Data.AddPlayerResources(context.player.id, objIN)
                await api.SendMessage(user.dataValues.id, `–í–∞–º –ø–æ—Å—Ç—É–ø–∏–ª –ø–µ—Ä–µ–≤–æ–¥:\n–û—Ç –∫–æ–≥–æ: *id${context.player.id}(${context.player.nick})\n–†–µ—Å—É—Ä—Å: ${NameLibrary.GetResourceName(resource)}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${count} —à—Ç`)
                await context.send("‚úÖ –£—Å–ø–µ—à–Ω–æ")
                return resolve()
            }
            catch (e)
            {
                await ErrorHandler.SendLogs(context, "Transaction", e)
            }
        })
    }
    async GoToOtherCity(context, current_keyboard, scenes)
    {
        return new Promise(async (resolve) => {
            try
            {
                const cities = await City.findAll({where: {countryID: Data.GetCountryForCity(context.player.location).id}})
                const cityButtons = []
                for(let i = 0; i < cities.length; i++)
                {
                    if(cities[i].dataValues.id !== context.player.location)
                    {
                        cityButtons.push([cities[i].dataValues.name, "ID" + cities[i].dataValues.id])
                    }
                }
                if(cityButtons.length === 0)
                {
                    await context.send("‚Ñπ –í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–º –≥–æ—Ä–æ–¥–µ —Ñ—Ä–∞–∫—Ü–∏–∏ " + Data.GetCountryName(Data.GetCountryForCity(context.player.location).id))
                    return resolve()
                }
                let city = await InputManager.KeyboardBuilder(context, "–í—ã–±–µ—Ä–∏—Ç–µ –≤ –∫–∞–∫–æ–π –≥–æ—Ä–æ–¥ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è", cityButtons, current_keyboard)
                if(!city) return resolve()
                city = Data.ParseButtonID(city)
                const accept = await InputManager.InputBoolean(context, `–ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –≤ –¥—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥ –∑–∞–π–º–µ—Ç ${Data.variables["cityToCityTime"]} –º–∏–Ω—É—Ç, –Ω–∞ —ç—Ç–æ –≤—Ä–µ–º—è –≤—ã –±—É–¥–µ—Ç–µ –∑–∞–º–æ—Ä–æ–∂–µ–Ω—ã.\n–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?`, current_keyboard)
                if(!accept)
                {
                    await context.send("‚õî –û—Ç–º–µ–Ω–µ–Ω–æ", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                if(context.player.status === "worker")
                {
                    await context.send("üèô –í—ã –ø—Ä–∏—à–ª–∏ –≤ –≥–æ—Ä–æ–¥ " + Data.GetCityName(city) + "\n" + Data.cities[city].description, {attachment: Data.cities[city].photoURL, keyboard: keyboard.build(scenes.finishKeyboard(context))})
                    context.player.location = city
                    await PlayerStatus.update(
                        {location: city},
                        {where: {id: context.player.id}}
                    )
                    context.player.state = scenes.finish
                }
                else
                {
                    const time = new Date()
                    time.setMinutes(time.getMinutes() + parseInt(Data.variables["cityToCityTime"]))
                    context.player.lastActionTime = time
                    context.player.state = scenes.moving
                    context.send("–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏—Å—å –≤ –≥–æ—Ä–æ–¥ " + Data.cities[city].name, {keyboard: keyboard.none})
                    context.player.timeout = setTimeout(async () => {
                        await context.send("üèô –í—ã –ø—Ä–∏—à–ª–∏ –≤ –≥–æ—Ä–æ–¥ " + Data.GetCityName(city) + "\n" + Data.cities[city].description, {attachment: Data.cities[city].photoURL, keyboard: keyboard.build(scenes.finishKeyboard(context))})
                        context.player.location = city
                        context.player.state = scenes.finish
                        await PlayerStatus.update(
                            {location: city},
                            {where: {id: context.player.id}}
                        )
                    }, parseInt(Data.variables["cityToCityTime"]) * 60000)
                }
            }
            catch (e)
            {
                await ErrorHandler.SendLogs(context, "GoToOtherCity", e)
            }
        })
    }

    async GoToOtherCountry(context, current_keyboard, scenes)
    {
        return new Promise(async (resolve) => {
            try
            {
                const playerPlace = Data.GetCountryForCity(context.player.location).id
                const roads = await CountryRoads.findAll({where: {fromID: playerPlace}})
                const countryButtons = []
                if(context.player.status === "worker")
                {
                    for(let i = 0; i < Data.countries?.length; i++)
                    {
                        if(Data.countries[i]?.id !== context.player.countryID && Data.countries[i])
                        {
                            countryButtons.push([Data.countries[i].name, "ID" + Data.countries[i].id])
                        }
                    }
                }
                else
                {
                    for(let i = 0; i < roads.length; i++)
                    {
                        countryButtons.push([Data.countries[roads[i].dataValues.toID].name, "ID" + roads[i].dataValues.toID])
                    }
                }
                if(countryButtons.length === 0)
                {
                    await context.send("‚Ñπ –î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã —É–µ—Ö–∞—Ç—å –∏–∑ —Ñ—Ä–∞–∫—Ü–∏–∏ –Ω—É–∂–Ω–∞ –¥–æ—Ä–æ–≥–∞, –Ω–æ –∏–∑ —Ñ—Ä–∞–∫—Ü–∏–∏, –≤ –∫–æ—Ç–æ—Ä–æ–π –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å, –Ω–µ –≤–µ–¥–µ—Ç –Ω–∏ –æ–¥–Ω–∞ –¥–æ—Ä–æ–≥–∞.\n–í—Å–µ –≤–æ–ø—Ä–æ—Å—ã –æ –¥–æ—Ä–æ–≥–∞—Ö –∫ –ø—Ä–∞–≤–∏—Ç–µ–ª—é —Ñ—Ä–∞–∫—Ü–∏–∏ " + Data.GetCountryName(Data.GetCountryForCity(context.player.location).id) + " –∏–ª–∏ –ì–µ–π–º-–ú–∞—Å—Ç–µ—Ä–∞–º")
                    return resolve()
                }
                let country = await InputManager.KeyboardBuilder(context, "–í—ã–±–µ—Ä–∏—Ç–µ –≤ –∫–∞–∫—É—é —Ñ—Ä–∞–∫—Ü–∏—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è", countryButtons, current_keyboard)
                if(!country) return resolve()
                country = Data.ParseButtonID(country)
                let road = null
                roads.forEach(key => {if(key.dataValues.toID === country) road = key.dataValues})
                if(road?.isBlocked)
                {
                    await context.send("–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —ç—Ç–∞ –¥–æ—Ä–æ–≥–∞ –ø–µ—Ä–µ–∫—Ä—ã—Ç–∞ –∏–∑-–∑–∞ –∏–≤–µ–Ω—Ç–∞.", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                let accept
                if (Data.countries[country].entranceFee !== 0 && context.player.status !== "worker")
                {
                    accept = await InputManager.InputBoolean(context, `‚Ñπ –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –≤ ${Data.GetCountryName(country)} –∑–∞–π–º–µ—Ç ${road.time} –º–∏–Ω—É—Ç, –Ω–∞ —ç—Ç–æ –≤—Ä–µ–º—è –≤—ã –±—É–¥–µ—Ç–µ –∑–∞–º–æ—Ä–æ–∂–µ–Ω—ã.\n–£ —Ñ—Ä–∞–∫—Ü–∏–∏ ${Data.GetCountryName(country)} –µ—Å—Ç—å –≤—Ö–æ–¥–Ω–∞—è –ø–æ—à–ª–∏–Ω–∞ –≤ —Ä–∞–∑–º–µ—Ä–µ ${Data.countries[country].entranceFee} –º–æ–Ω–µ—Ç\n–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?`, current_keyboard)
                    if(context.player.money - Data.countries[country].entranceFee < 0)
                    {
                        await context.send("–£ –≤–∞—Å –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –æ–ø–ª–∞—Ç—ã –≤—Ö–æ–¥–Ω–æ–π –ø–æ—à–ª–∏–Ω—ã", {keyboard: keyboard.build(current_keyboard)})
                        return resolve()
                    }
                }
                else
                {
                    accept = await InputManager.InputBoolean(context, `‚Ñπ –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –≤ ${Data.GetCountryName(country)} –∑–∞–π–º–µ—Ç ${road?.time ? road?.time : 0} –º–∏–Ω—É—Ç, –Ω–∞ —ç—Ç–æ –≤—Ä–µ–º—è –≤—ã –±—É–¥–µ—Ç–µ –∑–∞–º–æ—Ä–æ–∂–µ–Ω—ã, –∞ –ø–æ–≤–µ—Ä–Ω—É—Ç—å –Ω–∞–∑–∞–¥ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ.\n–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?`, current_keyboard)
                }
                if(!accept)
                {
                    await context.send("‚õî –û—Ç–º–µ–Ω–µ–Ω–æ", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                if(context.player.status === "worker")
                {
                    await context.send("üèô –í—ã –ø—Ä–∏—à–ª–∏ –≤ –≥–æ—Ä–æ–¥ " + Data.GetCityName(Data.countries[country].capitalID) + "\n" + Data.cities[Data.countries[country].capitalID].description, {attachment: Data.countries[country].welcomePhotoURL, keyboard: keyboard.build(scenes.finishKeyboard(context))})
                    context.player.location = Data.countries[country].capitalID
                    context.player.countryID = Data.countries[country].id
                    await PlayerStatus.update(
                        {location: Data.countries[country].capitalID, countryID: Data.countries[country].id},
                        {where: {id: context.player.id}}
                    )
                    context.player.state = scenes.finish
                }
                else
                {
                    const time = new Date()
                    time.setMinutes(time.getMinutes() + road.time)
                    context.player.state = scenes.moving
                    context.send("–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏—Å—å –≤ —Ñ—Ä–∞–∫—Ü–∏—é " + Data.countries[country].GetName(), {keyboard: keyboard.none})
                    context.player.lastActionTime = time
                    context.player.timeout = setTimeout(async () => {
                        await context.send("üèô –í—ã –ø—Ä–∏—à–ª–∏ –≤ –≥–æ—Ä–æ–¥ " + Data.GetCityName(Data.countries[country].capitalID) + "\n" + Data.cities[Data.countries[country].capitalID].description, {attachment: Data.countries[country].welcomePhotoURL, keyboard: keyboard.build(scenes.finishKeyboard(context))})
                        context.player.location = Data.countries[country].capitalID
                        context.player.countryID = Data.countries[country].id
                        if (Data.countries[country].entranceFee !== 0)
                        {
                            await Data.AddPlayerResources(context.player.id, {money: -Data.countries[country].entranceFee})
                            await Data.AddCountryResources(country, {money: Data.countries[country].entranceFee})
                        }
                        await PlayerStatus.update(
                            {location: Data.countries[country].capitalID, countryID: Data.countries[country].id},
                            {where: {id: context.player.id}}
                        )
                        context.player.state = scenes.finish
                    }, road.time * 60000)
                }
            }
            catch (e)
            {
                await ErrorHandler.SendLogs(context, "GoToOtherCountry", e)
            }
        })
    }

    async GiveKey(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                const keys = await Keys.findAll({where: {ownerID: context.player.id}})
                const keysButton = []
                if(keys.length === 0)
                {
                    await context.send("‚ö† –£ –≤–∞—Å –Ω–µ—Ç –∫–ª—é—á–µ–π", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                for(let i = 0; i < keys.length; i++)
                {
                    keysButton.push([keys[i].dataValues.name, "ID" + keys[i].dataValues.id])
                }
                let key = await InputManager.KeyboardBuilder(context, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª—é—á, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–¥–∞—Ç—å", keysButton, current_keyboard)
                if(!key) return resolve()
                key = Data.ParseButtonID(key)
                const user = await InputManager.InputUser(context, "–ö–æ–º—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–¥–∞—Ç—å —ç—Ç–æ—Ç –∫–ª—é—á?", current_keyboard)
                if(!user) return resolve()
                await Keys.update({ownerID: user.dataValues.id}, {where: {id: key}})
                await context.send("‚úÖ –ö–ª—é—á –æ—Ç–¥–∞–Ω.", {keyboard: keyboard.build(current_keyboard)})
            }
            catch (e)
            {
                await ErrorHandler.SendLogs(context, "GiveKey", e)
            }
        })
    }

    async CopyKey(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                const keys = await Keys.findAll({where: {ownerID: context.player.id}})
                const keysButton = []
                if(keys.length === 0)
                {
                    await context.send("‚ö† –£ –≤–∞—Å –Ω–µ—Ç –∫–ª—é—á–µ–π", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                for(let i = 0; i < keys.length; i++)
                {
                    keysButton.push([keys[i].dataValues.name, "ID" + keys[i].dataValues.id])
                }
                let key = await InputManager.KeyboardBuilder(context, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª—é—á, –¥—É–±–ª–∏–∫–∞—Ç –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å. \n–°—Ç–æ–∏–º–æ—Å—Ç—å:\n" + NameLibrary.GetPrice(Prices["copy_key"]), keysButton, current_keyboard)
                if(!key) return resolve()
                if (!context.player.CanPay(Prices["copy_key"]))
                {
                    await context.send("‚ö† –£ –≤–∞—Å –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç —Ä–µ—Å—É—Ä—Å–æ–≤", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                key = Data.ParseButtonID(key)
                keys.forEach((i) => {if(parseInt(i.dataValues.id)  === parseInt(key)) key = i.dataValues})
                await Keys.create({
                    houseID: key.houseID,
                    ownerID: key.ownerID,
                    name: key.name.includes("-–¥—É–±–ª–∏–∫–∞—Ç") ? key.name : key.name + "-–¥—É–±–ª–∏–∫–∞—Ç"
                })
                await context.send("‚úÖ –ö–ª—é—á –ø—Ä–æ–¥—É–±–ª–∏—Ä–æ–≤–∞–Ω.", {keyboard: keyboard.build(current_keyboard)})
            }
            catch (e)
            {
                await ErrorHandler.SendLogs(context, "CopyKey", e)
            }
        })
    }
    async GetAllProperty(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                const buildings = await Buildings.findAll({where: {ownerID: context.player.id}})
                let request = "*id"+ context.player.id +"(–í–∞—à–∏) –ø–æ—Å—Ç—Ä–æ–π–∫–∏:\n"
                for(let i = 0; i < buildings.length; i++)
                {
                    request += (i+1) +
                        ": " +
                        NameLibrary.GetBuildingType(buildings[i].dataValues.type) +
                        " \"" +
                        buildings[i].dataValues.name +
                        "\" " +
                        buildings[i].dataValues.level +
                        " —É—Ä, –≥. " +
                        Data.GetCityName(buildings[i].dataValues.cityID) +
                        "\n"
                }
                if(buildings.length === 0)
                {
                    request += "‚õ∫ –£ –≤–∞—Å –Ω–µ—Ç –ø–æ—Å—Ç—Ä–æ–µ–∫\n"
                }

                const keys = await Keys.findAll({where: {ownerID: context.player.id}})
                request += "\n*id"+ context.player.id +"(–í–∞—à–∏) –∫–ª—é—á–∏:\n"
                for(let i = 0; i < keys.length; i++)
                {
                    request += "üî∏ " + keys[i].dataValues.name + "\n"
                }
                if(keys.length === 0)
                {
                    request += "üìé –£ –≤–∞—Å –Ω–µ—Ç –∫–ª—é—á–µ–π"
                }

                await context.send(request, {keyboard: keyboard.build(current_keyboard)})
                return resolve()
            }
            catch (e)
            {
                await ErrorHandler.SendLogs(context, "GetAllProperty", e)
            }
        })
    }

    async NewUserBuilding(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                const country = Data.GetCountryForCity(context.player.location)
                if(parseInt(context.player.citizenship) !== country.id)
                {
                    await context.send("‚ö† –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –≥—Ä–∞–∂–¥–∞–Ω–∏–Ω–æ–º —Ñ—Ä–∞–∫—Ü–∏–∏ " + Data.GetCountryName(country.id), {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                const buildingButtons = [
                    ["üè† –ñ–∏–ª–æ–π –¥–æ–º", "house"],
                    ["üè¶ –ë–∞–Ω–∫", "bank"]
                ]
                country.resources.match(/wheat/) && buildingButtons.push(["üåæ –°–µ–ª—å—Å–∫–æ–µ —Ö–æ–∑—è–π—Å—Ç–≤–æ", "wheat"])
                country.resources.match(/stone/) && buildingButtons.push(["ü™® –ö–∞–º–µ–Ω–æ–ª–æ–º–Ω—è", "stone"])
                country.resources.match(/wood/) && buildingButtons.push(["ü™µ –õ–µ—Å–æ–∑–∞–≥–æ—Ç–æ–≤–∫–∏", "wood"])
                country.resources.match(/iron/) && buildingButtons.push(["üåë –ñ–µ–ª–µ–∑–Ω—ã–π —Ä—É–¥–Ω–∏–∫", "iron"])
                country.resources.match(/silver/) && buildingButtons.push(["ü•à –°–µ—Ä–µ–±—Ä—è–Ω–Ω—ã–π —Ä—É–¥–Ω–∏–∫", "silver"])

                let request = "–¶–µ–Ω—ã –Ω–∞ –ø–æ—Å—Ç—Ä–æ–π–∫–∏:\n\n"
                request += context.player.GetResources() + "\n\n"
                buildingButtons.forEach(key => {
                    request += key[0] + ":\n" + NameLibrary.GetPrice(Prices["new_" + key[1]]) + "\n"
                })
                const building = await InputManager.KeyboardBuilder(context, request + "\n–ö–∞–∫—É—é –ø–æ—Å—Ç—Ä–æ–π–∫—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤–æ–∑–≤–µ—Å—Ç–∏?\n\n‚ö† –õ—é–±–∞—è –ø–æ—Å—Ç—Ä–æ–π–∫–∞ –∫—Ä–æ–º–µ –∂–∏–ª–æ–≥–æ –¥–æ–º–∞ –∑–∞–Ω–∏–º–∞–µ—Ç –ø–æ–ª–µ–∑–Ω–æ–µ –º–µ—Å—Ç–æ –≤ –≥–æ—Ä–æ–¥–µ, –ø–æ—ç—Ç–æ–º—É –¥–ª—è —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞ –≤–∞–º –Ω–∞–¥–æ –ø–æ–ª—É—á–∏—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –æ—Ç –≥—Ä–∞–≤—ã –≥–æ—Ä–æ–¥–∞.\n\n‚ö† –ï—Å–ª–∏ –≤—ã –ø—Ä–æ–ø–∏—Å–∞–Ω—ã –≤ —ç—Ç–æ–º –≥–æ—Ä–æ–¥–µ, —Ç–æ –º–æ–∂–Ω–æ –Ω–µ –ø–æ–ª—É—á–∞—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ –æ—Ç –≥–ª–∞–≤—ã –≥–æ—Ä–æ–¥–∞.", buildingButtons, current_keyboard)
                if(!building) return resolve()
                if(!context.player.CanPay(Prices["new_" + building]))
                {
                    await context.send("‚ö† –£ –≤–∞—Å –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç —Ä–µ—Å—É—Ä—Å–æ–≤.", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                if(Data.cities[context.player.location].buildingsScore >= Data.cities[context.player.location].maxBuildings && building !== "house")
                {
                    await context.send("‚ö† –í –≥–æ—Ä–æ–¥–µ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å –º–µ—Å—Ç –¥–ª—è —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞ –Ω–æ–≤–æ–≥–æ –∑–¥–∞–Ω–∏—è.", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                const name = await InputManager.InputString(context, "–ù–∞–∑–æ–≤–∏—Ç–µ —Å–≤–æ—é –ø–æ—Å—Ç—Ä–æ–π–∫—É. (–æ—Ç 2 –¥–æ 100 —Å–∏–º–≤–æ–ª–æ–≤)", current_keyboard, 2, 100)
                if(!name) return resolve()
                await Data.AddPlayerResources(context.player.id, Prices["new_" + building])
                const build = await Buildings.create({
                    cityID: context.player.location,
                    name: name,
                    type: "building_of_" + building,
                    ownerID: context.player.id,
                    ownerType: "user",
                    level: 1,
                    freezing: parseInt(context.player.location) !== parseInt(context.player.registration)
                })
                if(parseInt(context.player.location) === parseInt(context.player.registration) && building === "house")
                {
                    await Data.LoadBuildings()
                    await Keys.create({
                        houseID: build.dataValues.id,
                        ownerID: context.player.id,
                        name: "üîë " + build.dataValues.name
                    })
                    await context.send("‚úÖ –ü–æ—Å—Ç—Ä–æ–π–∫–∞ –≤–æ–∑–≤–µ–¥–µ–Ω–∞. –í–∞–º –≤—ã–¥–∞–Ω –∫–ª—é—á –æ—Ç –Ω–µ–µ.", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                else
                {
                    if(!context.player.waitingAllowBuilding) context.player.waitingAllowBuilding = []
                    context.player.waitingAllowBuilding.push([
                        build.dataValues.id,
                        setTimeout(async () =>
                        {
                            const price = NameLibrary.ReversePrice(Prices["new_" + building])
                            await Data.AddPlayerResources(context.player.id, price)
                            await Buildings.destroy({where: {id: build.dataValues.id}})
                            await context.send(`‚ö† –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ–¥–æ–±—Ä–µ–Ω–∏—è —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞ –ø–æ—Å—Ç—Ä–æ–π–∫–∏ \"${NameLibrary.GetBuildingType(build.dataValues.type)}\" –≤—ã—à–ª–æ, —Ä–µ—Å—É—Ä—Å—ã –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã.`)
                            let length = 0
                            for(let i = 0; i < context.player.waitingAllowBuilding?.length; i++)
                            {
                                if(context.player.waitingAllowBuilding[i])
                                {
                                    length ++
                                }
                            }
                            if(length === 0)
                            {
                                context.player.waitingAllowBuilding = null
                            }
                        }, 86400000)
                    ])
                    await api.api.messages.send({
                        user_id: Data.GetCity(context.player.location).leaderID,
                        random_id: Math.round(Math.random() * 100000),
                        message: `–ò–≥—Ä–æ–∫ *id${context.player.id}(${context.player.nick}) —Ö–æ—á–µ—Ç –ø–æ—Å—Ç—Ä–æ–∏—Ç—å ${NameLibrary.GetBuildingType(build.dataValues.type)}.\n\n${context.player.GetInfo()}\n\n –†–∞–∑—Ä–µ—à–∏—Ç—å —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ?`,
                        keyboard: keyboard.build([[keyboard.acceptCallbackButton({command: "allow_user_building", item: context.player.id, parameter: build.dataValues.id}), keyboard.declineCallbackButton({command: "decline_user_building", item: context.player.id, parameter: build.dataValues.id})]]).inline().oneTime()
                    })
                    await context.send("‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ –≤–æ–∑–≤–µ–¥–µ–Ω–∏–µ –ø–æ—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∞–Ω–∞, —Ä–µ—Å—É—Ä—Å—ã –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω—ã", {keyboard: keyboard.build(current_keyboard)})
                }
            }
            catch (e)
            {
                await ErrorHandler.SendLogs(context, "NewUserBuilding", e)
            }
        })
    }

    async UpgradeUserBuilding(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                const buildings = await Buildings.findAll({where: {ownerID: context.player.id}})
                if(buildings.length === 0)
                {
                    await context.send("‚ö† –£ –≤–∞—Å –Ω–µ—Ç –ø–æ—Å—Ç—Ä–æ–µ–∫.", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                let request = "üè¢ –í–∞—à–∏ –ø–æ—Å—Ç—Ä–æ–π–∫–∏:\n"
                const buildingButtons = []
                for(let i = 0; i < buildings.length; i++)
                {
                    buildingButtons.push([NameLibrary.GetBuildingEmoji(buildings[i].dataValues.type) + buildings[i].dataValues.name, "ID" + buildings[i].dataValues.id])
                    request += `${NameLibrary.GetBuildingType(buildings[i].dataValues.type)} \"${buildings[i].dataValues.name}\" ${buildings[i].dataValues.level} —É—Ä–æ–≤–Ω—è\n`
                }
                let building = await InputManager.KeyboardBuilder(context, request, buildingButtons, current_keyboard)
                if(!building) return resolve()

                building = Data.ParseButtonID(building)
                buildings.forEach(key => {if(parseInt(key.dataValues.id) === parseInt(building)) building = key.dataValues})
                if(building.level >= 4)
                {
                    await context.send(`‚ö† ${NameLibrary.GetBuildingType(building.type)} \"${building.name}\" –∏–º–µ–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å —É–ª—É—á—à–µ–Ω–∏—è.`, {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                await context.send(`–£–ª—É—á—à–µ–Ω–∏–µ –¥–ª—è ${NameLibrary.GetBuildingType(building.type)} \"${building.name}\":\n ${building.level} —É—Ä–æ–≤–µ–Ω—å => ${building.level + 1} —É—Ä–æ–≤–µ–Ω—å\n${NameLibrary.GetPrice(Prices[building.type.replace("building_of_", "") + "_lvl" + (building.level + 1)])}`)
                if(!context.player.CanPay(Prices[building.type.replace("building_of_", "") + "_lvl" + (building.level + 1)]))
                {
                    await context.send("‚ö† –£ –≤–∞—Å –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç —Ä–µ—Å—É—Ä—Å–æ–≤.", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                const accept = await InputManager.InputBoolean(context, "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?", current_keyboard)
                if(!accept)
                {
                    await context.send("‚õî –û—Ç–º–µ–Ω–µ–Ω–æ.", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                await Data.AddPlayerResources(context.player.id ,Prices[building.type.replace("building_of_", "") + "_lvl" + (building.level + 1)])
                await Buildings.update({level: building.level + 1}, {where: {id: building.id}})
                for(let i = 0; i < Data.buildings[building.cityID].length; i++)
                {
                    if(Data.buildings[building.cityID][i].id === building.id)
                    {
                        Data.buildings[building.cityID][i].Upgrade(building.level + 1)
                        break
                    }
                }
                await context.send(`‚úÖ –ü–æ—Å—Ç—Ä–æ–π–∫–∞ —É–ª—É—á—à–µ–Ω–∞ –¥–æ ${building.level + 1} —É—Ä–æ–≤–Ω—è.`, {keyboard: keyboard.build(current_keyboard)})
            }
            catch (e)
            {
                await ErrorHandler.SendLogs(context, "UpgradeUserBuilding", e)
            }
        })
    }

    async EnterBuilding(context, current_keyboard, scenes)
    {
        return new Promise(async (resolve) => {
            try
            {
                const keys = await Keys.findAll({where: {ownerID: context.player.id}})
                let request = "–ü–æ—Å—Ç—Ä–æ–π–∫–∏ –≤ –≥–æ—Ä–æ–¥–µ " + Data.GetCityName(context.player.location) + " :\n"
                const buildingButtons = []
                if(!Data.buildings[context.player.location])
                {
                    await context.send("‚õ∫ –í –≥–æ—Ä–æ–¥–µ –Ω–µ—Ç –ø–æ—Å—Ç—Ä–æ–µ–∫", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                for(let i = 0; i < Data.buildings[context.player.location].length; i++)
                {
                    request += (i+1) + ": " + NameLibrary.GetBuildingType(Data.buildings[context.player.location][i].type) + " \"" + Data.buildings[context.player.location][i].name + "\" " + Data.buildings[context.player.location][i].level + " —É—Ä–æ–≤–Ω—è\n"
                    if (Data.buildings[context.player.location][i].type.match(/bank|mint|barracks|port|church/)) 
                    {
                        buildingButtons.push([NameLibrary.GetBuildingEmoji(Data.buildings[context.player.location][i].type) + Data.buildings[context.player.location][i].name, "ID" + Data.buildings[context.player.location][i].id])
                        continue
                    }
                    for(let j = 0; j < keys.length; j++)
                    {
                        if(keys[j].dataValues.houseID === Data.buildings[context.player.location][i].id)
                        {
                            buildingButtons.push([NameLibrary.GetBuildingEmoji(Data.buildings[context.player.location][i].type) + Data.buildings[context.player.location][i].name, "ID" + Data.buildings[context.player.location][i].id])
                            break
                        }
                    }
                }
                if(buildingButtons.length === 0)
                {
                    await context.send(request + "üèò –í –≥–æ—Ä–æ–¥–µ –Ω–µ—Ç –ø–æ—Å—Ç—Ä–æ–µ–∫, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–µ—Ç–∏—Ç—å.", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                let building = await InputManager.KeyboardBuilder(context, request + "\n–í—ã–±–µ—Ä–∏—Ç–µ, –∫—É–¥–∞ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–π—Ç–∏.", buildingButtons, current_keyboard)
                if(!building) return resolve()
                building = Data.ParseButtonID(building)
                for(let i = 0; i < Data.buildings[context.player.location].length; i++)
                {
                    if(parseInt(Data.buildings[context.player.location][i].id) === parseInt(building))
                    {
                        context.player.inBuild = Data.buildings[context.player.location][i]
                        context.player.state = scenes.build
                        context.send("–í—ã –∑–∞—à–ª–∏ –≤ " + NameLibrary.GetBuildingType(context.player.inBuild.type) + " \"" + context.player.inBuild.name + "\"", {keyboard: keyboard.build(scenes.buildKeyboard(context))})
                    }
                }
            }
            catch (e)
            {
                await ErrorHandler.SendLogs(context, "EnterBuilding", e)
            }
        })
    }

    async GetResourcesFormBuilding(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                const time = new Date()
                if(context.player.inBuild.lastActivityTime - time > 0)
                {
                    await context.send("üëÄ –†–µ—Å—É—Ä—Å—ã –µ—â–µ –Ω–µ –¥–æ–±—ã—Ç—ã, –ø—Ä–∏—Ö–æ–¥–∏—Ç–µ —á–µ—Ä–µ–∑ " + NameLibrary.ParseFutureTime(context.player.inBuild.lastActivityTime), {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                time.setHours(time.getHours() + 6)
                const country = Data.GetCountryForCity(context.player.inBuild.cityID)
                const resource = context.player.inBuild.type.replace("building_of_", "")
                let playerBalance = {}
                let cityBalance = {}
                let extraction = NameLibrary.GetFarmRandom(resource + "_lvl" + context.player.inBuild.level)
                const extractionTax = parseInt(context.player.citizenship) === parseInt(country.id) ? country.citizenTax : country.nonCitizenTax
                const tax = Math.round(extraction * (extractionTax * 0.01))
                extraction -= tax
                playerBalance[resource] = extraction
                cityBalance[resource] = tax
                await Data.AddPlayerResources(context.player.id, playerBalance)
                await Data.AddCityResources(context.player.location, cityBalance)
                context.player.inBuild.lastActivityTime = time
                await context.send("–°–æ–±—Ä–∞–Ω–æ: " + NameLibrary.GetPrice(NameLibrary.ReversePrice(playerBalance)) + "\n–ù–∞–ª–æ–≥ —Å–æ—Å—Ç–∞–≤–∏–ª: " + NameLibrary.GetPrice(cityBalance) + "(" + extractionTax + "%)", {keyboard: keyboard.build(current_keyboard)})
                return resolve()
            }
            catch (e)
            {
                await ErrorHandler.SendLogs(context, "GetResourcesFormBuilding", e)
            }
        })
    }

    async RelaxInTheHouse(context, current_keyboard, scenes)
    {
        return new Promise(async (resolve) => {
            try
            {
                let need
                switch (context.player.inBuild.level)
                {
                    case 1:
                        need = (100 - context.player.fatigue) * 3.3
                        break
                    case 2:
                        need = (100 - context.player.fatigue) * 3.0
                        break
                    case 3:
                        need = (100 - context.player.fatigue) * 2.7
                        break
                    case 4:
                        need = (100 - context.player.fatigue) * 2.4
                        break
                }
                if(need === 0)
                {
                    await context.send("üí™ –í—ã –ø–æ–ª–Ω—ã —Å–∏–ª.", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                const time = new Date()
                time.setMinutes(time.getMinutes() + need)
                context.player.lastActionTime = time
                if (context.player.timeout)
                {
                    clearTimeout(context.player.timeout)
                }
                context.player.timeout = setTimeout(() => {
                    context.send("‚òï –° –¥–æ–±—Ä—ã–º —É—Ç—Ä–æ–º, —Ç–µ–ø–µ—Ä—å –≤—ã –ø–æ–ª–Ω—ã —Å–∏–ª.", {
                        keyboard: keyboard.build(current_keyboard)
                    })
                    context.player.fatigue = 100
                    context.player.isFreezed = false
                    context.player.inBuild = null
                    context.player.state = scenes.Menu
                }, need * 60000)
                context.player.state = scenes.Relaxing
                context.player.isFreezed = true
                await context.send(`üí§ –°–ø–æ–∫–æ–π–Ω–æ–π –Ω–æ—á–∏, –¥–æ –ø–æ–ª–Ω–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–∏–ª ${NameLibrary.ParseFutureTime(time)}`,
                    {
                        keyboard: keyboard.build([[keyboard.checkTimeButton], [keyboard.wakeupButton]])
                    })
                return resolve()
            }
            catch (e)
            {
                await ErrorHandler.SendLogs(context, "RelaxInTheHouse", e)
            }
        })
    }

    async FillingOutTheRoad(context, current_keyboard, inputData, scenes)
    {
        return new Promise(async (resolve) => {
            try
            {
                const road = await CountryRoads.findOne({where: {id: inputData.roadFromID}})
                if(road?.dataValues.isBlocked)
                {
                    let time = await InputManager.InputInteger(context, "–í–≤–µ–¥–∏—Ç–µ –≤ –º–∏–Ω—É—Ç–∞—Ö –≤—Ä–µ–º—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –ø–æ –¥–æ—Ä–æ–≥–µ. (–¢—Ä–µ–±—É–µ—Ç—Å—è –≤–≤–µ—Å—Ç–∏ —Ü–µ–ª–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ)", current_keyboard, 1)
                    if(time === null) return resolve(false)
                    await CountryRoads.update({time: time, isBlocked: false}, {where: {id: inputData.roadFromID}})
                    await CountryRoads.update({time: time, isBlocked: false}, {where: {id: inputData.roadToID}})
                    await context.send("‚úÖ –ü—Ä–∏–Ω—è—Ç–æ, —Å–ø–∞—Å–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ.", {keyboard: keyboard.build(current_keyboard)})
                    context.player.state = scenes.startMenu
                    return resolve(true)
                }
                else
                {
                    await context.send("‚ö† –ö—Ç–æ-—Ç–æ –∏–∑ –ì–ú-–æ–≤ —É–∂–µ –∑–∞–ø–æ–ª–Ω–∏–ª –¥–∞–Ω–Ω—ã–µ, —Å–ø–∞—Å–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ.", {keyboard: keyboard.build(current_keyboard)})
                    context.player.state = scenes.startMenu
                    return resolve(true)
                }
            }
            catch (e)
            {
                await ErrorHandler.SendLogs(context, "FillingOutTheRoad", e)
            }
        })
    }

    async SQLSession(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                let request = "‚Ñπ –í—ã –≤–≤–µ–¥–µ–Ω—ã –≤ —Ä–µ–∂–∏–º SQL-—Ç–µ—Ä–º–∏–Ω–∞–ª–ª–∞\n\n‚Ñπ –í–≤–µ–¥–∏—Ç–µ SQL-–∑–∞–ø—Ä–æ—Å, –µ—Å–ª–∏ –≤—ã –Ω–µ –∑–Ω–∞–µ—Ç–µ —á—Ç–æ —ç—Ç–æ —Ç–∞–∫–æ–µ, —Ç–æ –ª—É—á—à–µ —ç—Ç–æ –Ω–µ —Ç—Ä–æ–≥–∞—Ç—å."
                let query = null
                do
                {
                    try
                    {
                        query = await InputManager.InputString(context, request, current_keyboard)
                        if(!query) break
                        query = await sequelize.query(query)
                        if(query[0]) request = JSON.stringify(query[0], null, "\t")
                        else request = "üö´ –ù–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞"
                    }
                    catch (e)
                    {
                        await context.send("üö´ –û—à–∏–±–∫–∞: " + e.message)
                        request = "‚Ñπ –í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –ø–æ–≤—Ç–æ—Ä–Ω–æ"
                    }
                }
                while(query)
                await context.send("‚Ñπ –°–µ–∞–Ω—Å –∑–∞–≤–µ—Ä—à–µ–Ω.", {keyboard: keyboard.build(current_keyboard)})
                return resolve()
            }
            catch (e)
            {
                await ErrorHandler.SendLogs(context, "SQLSession", e)
            }
        })
    }

    async SendLog(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                const log = await InputManager.InputString(context, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞", current_keyboard)
                if(!log) return resolve()
                try
                {
                    const file = await upload.messageDocument({
                        peer_id: context.player.id,
                        source: {
                            value: "./logs/" + log
                        },
                        title: log
                    })
                    await context.send("–õ–æ–≤–∏:", {attachment: file, keyboard: keyboard.build(current_keyboard)})
                }
                catch (e)
                {
                    await context.send("‚Ñπ –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω", {keyboard: keyboard.build(current_keyboard)})
                }
            }
            catch (e)
            {
                await ErrorHandler.SendLogs(context, "SendLog", e)
            }
        })
    }

    async SendLogList(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                const logs = fs.readdirSync("./logs/")
                let request = "–°–ø–∏—Å–æ–∫ –ª–æ–≥–æ–≤:\n\n"
                logs.forEach(key => {
                    request += "üî∏ " + key + "\n"
                })
                if(logs.length === 0) request += "‚≠ï –ü—É—Å—Ç–æ"
                await context.send(request, {keyboard: keyboard.build(current_keyboard)})
                return resolve()
            }
            catch (e)
            {
                await ErrorHandler.SendLogs(context, "SendLogList", e)
            }
        })
    }

    async ClearLogs(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                fs.readdir("./logs/", (err, files) => {
                    if (err) throw err;

                    for (const file of files) {
                        fs.unlink(path.join("./logs/", file), (err) => {
                            if (err) throw err;
                        });
                    }
                })
                await context.send("‚úÖ –õ–æ–≥–∏ –æ—á–∏—â–µ–Ω—ã.", {keyboard: keyboard.build(current_keyboard)})
                return resolve()
            }
            catch (e)
            {
                await ErrorHandler.SendLogs(context, "ClearLogs", e)
            }
        })
    }

    async ClearUserCache(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                const accept = await InputManager.InputBoolean(context, "‚ö†–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –∫—ç—à –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π?\n\n‚ö†‚ö†‚ö†–≠—Ç–æ –ø—Ä–∏–≤–µ–¥–µ—Ç –∫ –≤—ã–±—Ä–∞—Å—ã–≤–∞–Ω–∏—é –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, —Å–∏–ª—ã –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤ –æ–±–Ω—É–ª—è—Ç—Å—è, —Ç–µ –∏–≥—Ä–æ–∫–∏, —á—Ç–æ —Å–ø—è—Ç –∏–ª–∏ –∫—É–¥–∞-—Ç–æ –∏–¥—É—Ç, –æ–∫–∞–∂—É—Ç—Å—è –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é –∏ –Ω–µ –ø–æ–ª—É—á–∞—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ–∫–æ–Ω—á–∞–Ω–∏–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞.", current_keyboard)
                if(!accept)
                {
                    await context.send("‚õî –û—Ç–º–µ–Ω–µ–Ω–æ", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                Data.users = {}
                await context.send("‚úÖ –ö—ç—à –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ—á–∏—â–µ–Ω", {keyboard: keyboard.build(current_keyboard)})
                return resolve()
            }
            catch (e)
            {
                await ErrorHandler.SendLogs(context, "ClearUserCache", e)
            }
        })
    }

    async ChangeMap(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                const newMap = await InputManager.InputPhoto(context, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—É—é –∫–∞—Ä—Ç—É", current_keyboard)
                if(!newMap) return resolve()
                Data.variables.globalMap = newMap
                await Data.SaveVariables()
                await context.send("‚úÖ –ö–∞—Ä—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞", {keyboard: keyboard.build(current_keyboard)})
                return resolve()
            }
            catch (e)
            {
                await ErrorHandler.SendLogs(context, "ChangeMap", e)
            }
        })
    }

    async ChangeVariables(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                const vars = Object.keys(Data.variables)
                const varButtons = []
                let request = "–°–ø–∏—Å–æ–∫ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö:\n\n"
                for(let i = 0; i < vars.length; i++)
                {
                    varButtons.push([vars[i], vars[i]])
                    request += "üî∏ " + vars[i] + "   =   " + Data.variables[vars[i]] + "\n"
                }
                request += "\n‚Ñπ –í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å"
                const variable = await InputManager.KeyboardBuilder(context, request, varButtons, current_keyboard)
                if(!variable) return resolve()
                const newValue = await InputManager.InputString(context, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π " + variable, current_keyboard)
                if(!newValue) return resolve()
                Data.variables[variable] = newValue
                await Data.SaveVariables()
                await context.send("‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π", {keyboard: keyboard.build(current_keyboard)})
                return resolve()
            }
            catch (e)
            {
                await ErrorHandler.SendLogs(context, "ChangeVariables", e)
            }
        })
    }

    async AddMessage(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                const text = await InputManager.InputString(context, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–º–æ–≥—É—Ç –≤–∏–¥–µ—Ç—å –≤—Å–µ –∏–≥—Ä–æ–∫–∏ –ø–æ –Ω–∞–∂–∞—Ç–∏—é –∫–Ω–æ–ø–∫–∏ \"–°–æ–æ–±—â–µ–Ω–∏—è\" –≤ –º–µ–Ω—é", current_keyboard, 1)
                if(!text) return resolve()
                const isNoisy = await InputManager.InputBoolean(context, "–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏?\n\nüî∏ –î–∞ - –í—Å–µ–º –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–º –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞–º –ø—Ä–∏–¥–µ—Ç –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏\nüî∏ –ù–µ—Ç - –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—Å—è –±–µ–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤, –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –µ–≥–æ –º–æ–∂–Ω–æ –±—É–¥–µ—Ç —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ –º–µ–Ω—é —Å–æ–æ–±—â–µ–Ω–∏–π", current_keyboard)
                const accept = await InputManager.InputBoolean(context, `–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n\n–¢–µ–∫—Å—Ç:\n${text}\n–¢–∏—Ö–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: ${isNoisy ? "–ù–µ—Ç" : "–î–∞"}`, current_keyboard)
                if(!accept)
                {
                    await context.send("‚õî –û—Ç–º–µ–Ω–µ–Ω–æ", {keyboard: keyboard.build(current_keyboard)})
                    return resolve()
                }
                await Messages.create({
                    text: text,
                    isSilent: !isNoisy
                })
                if(isNoisy)
                {
                    const subscribedUsers = await PlayerStatus.findAll({where: {notifications: true}})
                    for(const user of subscribedUsers)
                    {
                        await api.SendMessage(user.dataValues.id, "‚Ñπ–ù–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ!\n\n" + text)
                    }
                }
                await context.send("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ", {keyboard: keyboard.build(current_keyboard)})
                return resolve()
            }
            catch (e)
            {
                await ErrorHandler.SendLogs(context, "AddMessage", e)
            }
        })
    }

    async ChangeTheRoad(context, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                const roads = await CountryRoads.findAll()
                let request = "ID —Ñ—Ä–∞–∫—Ü–∏–π:\n\n"
                const roadButtons = []
                for(let i = 0; i < Data.countries.length; i++)
                {
                    if(Data.countries[i])
                    {
                        request += "üî∏ " + Data.countries[i].GetName() + "  -  " + Data.countries[i].id + "\n"
                    }
                }
                request += "\n‚Ñπ –î–æ—Ä–æ–≥–∏ –∏–∑–º–µ–Ω—è—é—Ç—Å—è –ø–æ–ø–∞—Ä–Ω–æ, –µ—Å–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å –¥–æ—Ä–æ–≥—É A->B, —Ç–æ –∏–∑–º–µ–Ω–∏—Ç—Å—è –∏ –¥–æ—Ä–æ–≥–∞ B->A"
                for(let i = 0; i < roads.length; i++)
                {
                    roadButtons.push([roads[i].dataValues.fromID + " -> " + roads[i].dataValues.toID, "ID" + i])
                }
                let road = await InputManager.KeyboardBuilder(context, request, roadButtons, current_keyboard)
                if(!road) return resolve()
                road = Data.ParseButtonID(road)
                road = roads[road]
                const time = await InputManager.InputInteger(context, "–í–≤–µ–¥–∏—Ç–µ –≤ –º–∏–Ω—É—Ç–∞—Ö –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –ø–æ —ç—Ç–æ–π –¥–æ—Ä–æ–≥–µ", current_keyboard, 0)
                if(time === null) return resolve()
                await CountryRoads.update({time: time}, {where: {fromID: road.dataValues.fromID, toID: road.dataValues.toID}})
                await CountryRoads.update({time: time}, {where: {fromID: road.dataValues.toID, toID: road.dataValues.fromID}})
                await context.send("‚úÖ –î–æ—Ä–æ–≥–∞ –∏–∑–º–µ–Ω–Ω–∞", {keyboard: keyboard.build(current_keyboard)})
                return resolve()
            }
            catch (e)
            {
                await ErrorHandler.SendLogs(context, "ChangeTheRoad", e)
            }
        })
    }
}

module.exports = new BuildersAndControlsScripts()