const keyboard = require("../variables/Keyboards")
const {Player} = require("../database/Models")
const ErrorHandler = require("../error/ErrorHandler")
class InputManager
{
    static async InputInteger(context, message, current_keyboard, min, max)
    {
        return new Promise(async (resolve) =>
        {
            try
            {
                if (min) min = Math.max(min, -2147483646)
                if (max) max = Math.min(max, 2147483646)
                min = min || -2147483646
                max = max || 2147483646

                let answer = await context.question(message, {
                    keyboard: keyboard.build([[keyboard.cancelButton]]),
                    answerTimeLimit: 300_000
                })
                while ((isNaN(answer.text) || (parseInt(answer.text, 10) < min || parseInt(answer.text, 10) > max)) && !answer.isTimeout && !answer.payload)
                {
                    answer = await context.question("‚ö† –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.", {
                        keyboard: keyboard.build([[keyboard.cancelButton]]),
                        answerTimeLimit: 300_000
                    })
                }
                if(answer.isTimeout)
                {
                    await context.send('üö´ –í–≤–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω: –≤—Ä–µ–º—è –Ω–∞ –≤–≤–æ–¥ –≤—ã—à–ª–æ.', {
                        keyboard: keyboard.build(current_keyboard)
                    })
                    return resolve(null)
                }
                if(answer.payload)
                {
                    await context.send('üö´ –í–≤–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω.', {
                        keyboard: keyboard.build(current_keyboard)
                    })
                    return resolve(null)
                }
                return resolve(parseInt(answer.text))
            }
            catch (e)
            {
                await ErrorHandler.SendLogs(context, "InputManager/InputInteger", e)
            }
        })
    }

    static async InputDefaultInteger(context, message, current_keyboard, min, max, def)
    {
        return new Promise(async (resolve) =>
        {
            try
            {
                if (min) min = Math.max(min, -2147483646)
                if (max) max = Math.min(max, 2147483646)
                min = min || -2147483646
                max = max || 2147483646

                let answer = await context.question(message + "\n\n‚Ñπ –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é = " + def, {
                    keyboard: keyboard.build([[keyboard.defaultsButton]]),
                    answerTimeLimit: 300_000
                })
                while ((isNaN(answer.text) || (parseInt(answer.text, 10) < min || parseInt(answer.text, 10) > max)) && !answer.isTimeout && !answer.payload)
                {
                    answer = await context.question("‚ö† –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ." + "\n\n‚Ñπ –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é = " + def, {
                        keyboard: keyboard.build([[keyboard.defaultsButton]]),
                        answerTimeLimit: 300_000
                    })
                }
                if(answer.isTimeout)
                {
                    await context.send('üö´ –í–≤–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω: –≤—Ä–µ–º—è –Ω–∞ –≤–≤–æ–¥ –≤—ã—à–ª–æ.', {
                        keyboard: keyboard.build(current_keyboard)
                    })
                    return resolve(null)
                }
                if(answer.payload)
                {
                    return resolve(parseInt(def))
                }
                return resolve(parseInt(answer.text))
            }
            catch (e)
            {
                await ErrorHandler.SendLogs(context, "InputManager/InputInteger", e)
            }
        })
    }

    static async InputString(context, message, current_keyboard, min, max)
    {
        return new Promise(async (resolve) =>
        {
            try
            {
                min = min || 0
                max = max || Number.MAX_SAFE_INTEGER

                let answer = await context.question(message, {
                    keyboard: keyboard.build([[keyboard.cancelButton]]),
                    answerTimeLimit: 300_000
                })
                while ((answer.text?.length <= min || answer.text?.length >= max) && !answer.isTimeout && !answer.payload && !isNaN(answer.text))
                {
                    answer = await context.question("‚ö† –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.", {
                        keyboard: keyboard.build([[keyboard.cancelButton]]),
                        answerTimeLimit: 300_000
                    })
                }

                if(answer.isTimeout)
                {
                    await context.send('üö´ –í–≤–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω: –≤—Ä–µ–º—è –Ω–∞ –≤–≤–æ–¥ –≤—ã—à–ª–æ.', {
                        keyboard: keyboard.build(current_keyboard)
                    })
                    return resolve(null)
                }
                if(answer.payload)
                {
                    await context.send('üö´ –í–≤–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω.', {
                        keyboard: keyboard.build(current_keyboard)
                    })
                    return resolve(null)
                }
                return resolve(answer.text || "")
            }
            catch (e)
            {
                await ErrorHandler.SendLogs(context, "InputManager/InputString", e)
            }
        })
    }

    static async InputBoolean(context, message, current_keyboard, yesButton, noButton)
    {
        return new Promise(async (resolve) =>
        {
            try
            {
                yesButton = yesButton || keyboard.yesButton
                noButton = noButton || keyboard.noButton

                const yesChoice = yesButton.options.payload["choice"]

                let answer = await context.question(message, {
                    keyboard: keyboard.build([[yesButton, noButton]]),
                    answerTimeLimit: 300_000
                })
                while (!answer.payload && !answer.isTimeout)
                {
                    answer = await context.question("‚ö† –í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —Å–Ω–∏–∑—É.", {
                        keyboard: keyboard.build([[yesButton, noButton]]),
                        answerTimeLimit: 300_000
                    })
                }
                if(answer.isTimeout)
                {
                    await context.send('üö´ –í–≤–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω: –≤—Ä–µ–º—è –Ω–∞ –≤–≤–æ–¥ –≤—ã—à–ª–æ.', {
                        keyboard: keyboard.build(current_keyboard)
                    })
                    return resolve(null)
                }
                return resolve(answer.payload.choice === yesChoice)
            }
            catch (e)
            {
                await ErrorHandler.SendLogs(context, "InputManager/InputBoolean", e)
            }
        })
    }

    static async InputPhoto(context, message, current_keyboard)
    {
        return new Promise(async (resolve) =>
        {
            try
            {
                let answer = await context.question(message, {
                    keyboard: keyboard.build([[keyboard.cancelButton]]),
                    answerTimeLimit: 1200_000
                })
                let url = answer.attachments[0]?.type === "photo" ? answer.attachments[0]?.toString() : null
                while (!answer.payload && !answer.isTimeout && !url)
                {
                    answer = await context.question("‚ö† –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ", {
                        keyboard: keyboard.build([[keyboard.cancelButton]]),
                        answerTimeLimit: 1200_000
                    })
                    url = answer.attachments[0]?.type === "photo" ? answer.attachments[0]?.toString() : null
                }
                if(answer.isTimeout)
                {
                    await context.send('üö´ –í–≤–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω: –≤—Ä–µ–º—è –Ω–∞ –≤–≤–æ–¥ –≤—ã—à–ª–æ.', {
                        keyboard: keyboard.build(current_keyboard)
                    })
                    return resolve(null)
                }
                if(answer.payload?.choice === "cancel")
                {
                    await context.send('üö´ –í–≤–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω', {
                        keyboard: keyboard.build(current_keyboard)
                    })
                    return resolve(null)
                }
                return resolve(url)
            }
            catch (e)
            {
                await ErrorHandler.SendLogs(context, "InputManager/InputPhoto", e)
            }
        })
    }

    static async InputGroup(context, message, current_keyboard)
    {
        return new Promise(async (resolve) =>
        {
            try
            {
                let answer = await context.question(message + "\n\n‚Ñπ –ü–µ—Ä–µ—à–ª–∏—Ç–µ –≤ –¥–∏–∞–ª–æ–≥ –ø–æ—Å—Ç –∏–∑ –≥—Ä—É–ø–ø—ã, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –≤—ã–±—Ä–∞—Ç—å", {
                    keyboard: keyboard.build([[keyboard.cancelButton]]),
                    answerTimeLimit: 300_000
                })

                let id = answer.attachments[0]?.type === "wall" ? answer.attachments[0]?.ownerId : null
                while (!answer.payload && !answer.isTimeout && !id)
                {
                    answer = await context.question("‚ö† –ü–µ—Ä–µ—à–ª–∏—Ç–µ –ø–æ—Å—Ç", {
                        keyboard: keyboard.build([[keyboard.cancelButton]]),
                        answerTimeLimit: 600_000
                    })
                    id = answer.attachments[0]?.largeSizeUrl
                }
                if(answer.isTimeout)
                {
                    await context.send('üö´ –í–≤–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω: –≤—Ä–µ–º—è –Ω–∞ –≤–≤–æ–¥ –≤—ã—à–ª–æ.', {
                        keyboard: keyboard.build(current_keyboard)
                    })
                    return resolve(null)
                }
                if(answer.payload?.choice === "cancel")
                {
                    await context.send('üö´ –í–≤–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω', {
                        keyboard: keyboard.build(current_keyboard)
                    })
                    return resolve(null)
                }
                return resolve(id * -1)
            }
            catch (e)
            {
                await ErrorHandler.SendLogs(context, "InputManager/InputGroup", e)
            }
        })
    }

    static async ChooseButton(context, message, kb, current_keyboard)
    {
        return new Promise(async (resolve) =>
        {
            try
            {
                let answer = await context.question(message, {
                    keyboard: keyboard.build(kb),
                    answerTimeLimit: 300_000
                })
                while (!answer.payload && !answer.isTimeout)
                {
                    answer = await context.question("‚ö† –í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —Å–Ω–∏–∑—É.", {
                        keyboard: keyboard.build(kb),
                        answerTimeLimit: 300_000
                    })
                }
                if(answer.isTimeout)
                {
                    await context.send('üö´ –í–≤–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω: –≤—Ä–µ–º—è –Ω–∞ –≤–≤–æ–¥ –≤—ã—à–ª–æ.', {
                        keyboard: keyboard.build(current_keyboard)
                    })
                    return resolve(null)
                }
                return resolve(answer.payload.choice)
            }
            catch (e)
            {
                await ErrorHandler.SendLogs(context, "InputManager/ChooseButton", e)
            }
        })
    }

    // –†–∞–¥–∏–æ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–≥–¥–∞ –Ω–∞–¥–æ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ç–∏–ø–∞ BOOL
    // –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –≤ —Å–µ–±—è 3-–º –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º –º–∞—Å—Å–∏–≤ —Ñ–æ—Ä–º–∞—Ç–∞ [[–ò–º—è(STRING), –ó–Ω–∞—á–µ–Ω–∏–µ(STRING), –í–∫–ª/–í—ã–∫–ª(BOOL)], [–ò–º—è(STRING), –ó–Ω–∞—á–µ–Ω–∏–µ(STRING), –í–∫–ª/–í—ã–∫–ª(BOOL)], ...]
    // –ú–µ—Ç–æ–¥ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω –Ω–∞ –º–∞–∫—Å–∏–º—É–º 16 –ø–µ—Ä–µ–¥–∞–≤–∞–µ–º—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤, –µ—Å–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –Ω–∞–¥–æ –≤–≤–µ—Å—Ç–∏ –±–æ–ª—å—à–µ - –¥–µ–ª–∞–π –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–∞–∫–∏—Ö –º–µ—Ç–æ–¥–æ–≤ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
    // –ú–µ—Ç–æ–¥ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–≤—É—Ö–º–µ—Ä–Ω—ã–π –º–∞—Å—Å–∏–≤ —Ñ–æ—Ä–º–∞—Ç–∞ [[–ó–Ω–∞—á–µ–Ω–∏–µ(STRING), –í–∫–ª/–í—ã–∫–ª(BOOL)], [–ó–Ω–∞—á–µ–Ω–∏–µ(STRING), –í–∫–ª/–í—ã–∫–ª(BOOL)], ...]
    static async RadioKeyboardBuilder(context, message, array, current_keyboard)
    {
        return new Promise(async (resolve) =>
        {
            try
            {
                const arrayToKeyboard = (arr) => {
                    let kb = []
                    for(let i = 0; i < Math.ceil(arr.length / 4); i++)
                    {
                        kb[i] = arr.slice((i * 4), (i * 4) + 4)
                    }
                    kb.push([keyboard.greyCancelButton, keyboard.nextButton])
                    return kb
                }
                const convertKeyboard = (kb, choice) => {
                    for (let i = 0; i < kb.length; i++)
                    {
                        if(kb[i].options.payload.choice === choice)
                        {
                            kb[i].options.color = kb[i].options.color === "negative" ? "positive" : "negative"
                        }
                    }
                    return kb
                }
                let radioKeyboard = []
                let answer = null
                let request = message + "\n\n‚Ñπ –ü–æ–º–µ—Ç—å—Ç–µ –ø—É–Ω–∫—Ç—ã –∫–æ—Ç–æ—Ä—ã–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤–∫–ª—é—á–∏—Ç—å –∑–µ–ª–µ–Ω—ã–º, –∞ –∫–æ—Ç–æ—Ä—ã–µ –≤—ã–∫–ª—é—á–∏—Ç—å - –∫—Ä–∞—Å–Ω—ã–º"
                for(let i = 0; i < array.length; i++)
                {
                    radioKeyboard[i] = keyboard.secondaryButton([array[i][0], array[i][1]])
                    radioKeyboard[i].options.color = array[i][2] ? "positive" : "negative"
                }
                do
                {
                    answer = await context.question(request, {
                        keyboard: keyboard.build(arrayToKeyboard(radioKeyboard)),
                        answerTimeLimit: 300_000
                    })
                    request = "–û–∫"
                    if(answer.payload) radioKeyboard = convertKeyboard(radioKeyboard, answer.payload.choice)
                }
                while(!answer.isTimeout && !answer?.payload?.choice.match(/cancel|next/))
                if(answer.isTimeout)
                {
                    await context.send('üö´ –í–≤–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω: –≤—Ä–µ–º—è –Ω–∞ –≤–≤–æ–¥ –≤—ã—à–ª–æ.', {
                        keyboard: keyboard.build(current_keyboard)
                    })
                    return resolve(null)
                }
                if(answer?.payload?.choice === "cancel")
                {
                    await context.send('üö´ –í–≤–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω', {
                        keyboard: keyboard.build(current_keyboard)
                    })
                    return resolve(null)
                }
                array = []
                for(let i = 0; i < radioKeyboard.length; i++)
                {
                    array.push([radioKeyboard[i].options.payload.choice, radioKeyboard[i].options.color === "positive"])
                }
                return resolve(array)
            }
            catch (e)
            {
                await ErrorHandler.SendLogs(context, "InputManager/RadioKeyboardBuilder", e)
            }
        })
    }

    // KeyboardBuilder —Å—Ç—Ä–æ–∏—Ç –º–Ω–æ–≥–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –º–µ–∂–¥—É —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏
    // –§–æ—Ä–º–∞—Ç –≤—Ö–æ–¥–Ω–æ–≥–æ –º–∞—Å—Å–∏–≤–∞ [[–ò–º—è(STRING), –ó–Ω–∞—á–µ–Ω–∏–µ(STRING)],[–ò–º—è(STRING), –ó–Ω–∞—á–µ–Ω–∏–µ(STRING)]...]
    // –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–Ω–æ–ø–∫–∏ (STRING)
    // –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –í–ö –Ω–µ –ª—é–±–∏—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∑–Ω–∞—á–µ–Ω–∏—è —Ç–∏–ø INTEGER, –ø–æ—ç—Ç–æ–º—É –µ—Å–ª–∏ –Ω–∞–¥–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –∑–Ω–∞—á–µ–Ω–∏–∏ id —á–µ–≥–æ-–Ω–∏–±—É–¥—å
    // –ø—Ä–∏–ª–µ–ø–∏ –µ–≥–æ –∫ —Å—Ç—Ä–æ–∫–µ "ID" + <id>, –ø–æ—Å–ª–µ —ç—Ç–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–æ–µ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –∑–Ω–∞—á–µ–Ω–∏–µ id –º–æ–∂–Ω–æ —Å–ø–∞—Ä—Å–∏—Ç —á–µ—Ä–µ–∑ Data.ParseButtonID(<"ID" + id>)
    static async KeyboardBuilder(context, message, array, current_keyboard)
    {
        return new Promise(async (resolve) =>
        {
            try
            {
                let pageSize = 12
                let page = 0
                let end = Math.ceil(array.length/pageSize)
                let pages = []
                let answer = null
                let kb = [[]]

                for(let i = 0; i < end; i++)
                {
                    pages[i] = array.slice((i * pageSize), (i * pageSize) + pageSize)
                }
                do
                {
                    kb = [[]]
                    if(answer?.payload?.choice === "right")
                    {
                        page = Math.min(page + 1, end)
                    }
                    if(answer?.payload?.choice === "left")
                    {
                        page = Math.max(page - 1, 0)
                    }
                    for(let i = 0; i < Math.ceil(pages[page].length/4); i++)
                    {
                        kb[i] = []
                        for(let j = 0; j < Math.min(pages[page].length - (i * 4), 4); j++)
                        {
                            kb[i].push(keyboard.secondaryButton(pages[page][(i * 4) + j]))
                        }
                    }
                    if(page === 0 && pages.length > 1) kb.push([keyboard.backButton, keyboard.rightButton])
                    if(page === end && end > 1) kb.push([keyboard.leftButton, keyboard.backButton])
                    if(page !== 0 && page !== end) kb.push([keyboard.leftButton, keyboard.backButton, keyboard.rightButton])
                    if(page === end-1) kb.push([keyboard.backButton])

                    answer = await context.question(message, {
                        keyboard: keyboard.build(kb),
                        answerTimeLimit: 300_000
                    })
                }
                while ((!answer.payload || answer.payload.choice.match(/left|right/)) && !answer.isTimeout)

                if(answer.isTimeout)
                {
                    await context.send('üö´ –í–≤–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω: –≤—Ä–µ–º—è –Ω–∞ –≤–≤–æ–¥ –≤—ã—à–ª–æ.', {
                        keyboard: keyboard.build(current_keyboard)
                    })
                    return resolve(null)
                }
                if(answer.payload.choice === "back")
                {
                    await context.send('üö´ –í–≤–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω', {
                        keyboard: keyboard.build(current_keyboard)
                    })
                    return resolve(null)
                }
                return resolve(answer.payload.choice)
            }
            catch (e)
            {
                await ErrorHandler.SendLogs(context, "InputManager/KeyboardBuilder", e)
            }
        })
    }

    static async InputUser(context, message, current_keyboard)
    {
        return new Promise(async (resolve) => {
            try
            {
                let user
                let answer = await context.question(message + "\n\n‚Ñπ –í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫, ID –∏–≥—Ä–æ–∫–∞ –∏–ª–∏ –ø–µ—Ä–µ—à–ª–∏—Ç–µ —Å—é–¥–∞ –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ. (–ò–º–µ–Ω–Ω–æ –ø–µ—Ä–µ—à–ª–∏—Ç–µ, –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç)", {
                    keyboard: keyboard.build([[keyboard.cancelButton]]),
                    answerTimeLimit: 600_000
                })
                if(answer.isTimeout)
                {
                    await context.send('üö´ –í–≤–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω: –≤—Ä–µ–º—è –Ω–∞ –≤–≤–æ–¥ –≤—ã—à–ª–æ.', {
                        keyboard: keyboard.build(current_keyboard)
                    })
                    return resolve(null)
                }
                if(answer.payload)
                {
                    await context.send('üö´ –í–≤–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω.', {
                        keyboard: keyboard.build(current_keyboard)
                    })
                    return resolve(null)
                }
                if(answer.forwards.length > 0 && !answer.payload && !answer.isTimeout) user = await Player.findOne({where: {id: answer.forwards[0].senderId}})
                else if (answer.text && !answer.payload && !answer.isTimeout) {if(isNaN(answer.text)) user = await Player.findOne({where: {nick: answer.text}})}
                else if (answer.text?.match(/\d/) && !answer.payload && !answer.isTimeout) user = await Player.findOne({where: {id: answer.text}})
                else if (!answer.text || answer.payload || answer.isTimeout) return resolve(null)
                while (!answer.isTimeout && !answer.payload && !user)
                {
                    answer = await context.question("‚ö† –ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω", {
                        keyboard: keyboard.build([[keyboard.cancelButton]]),
                        answerTimeLimit: 600_000
                    })
                    if(answer.forwards.length > 0) user = await Player.findOne({where: {id: answer.forwards[0].senderId}})
                    else if (answer.text?.match(/\d/)) user = await Player.findOne({where: {id: answer.text}})
                    else if (answer.text) {if(isNaN(answer.text)) user = await Player.findOne({where: {nick: answer.text}})}
                    else if (!answer.text || answer.payload) return resolve(null)
                }
                if(answer.isTimeout)
                {
                    await context.send('üö´ –í–≤–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω: –≤—Ä–µ–º—è –Ω–∞ –≤–≤–æ–¥ –≤—ã—à–ª–æ.', {
                        keyboard: keyboard.build(current_keyboard)
                    })
                    return resolve(null)
                }
                if(answer.payload)
                {
                    await context.send('üö´ –í–≤–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω.', {
                        keyboard: keyboard.build(current_keyboard)
                    })
                    return resolve(null)
                }
                return resolve(user)
            }
            catch (e)
            {
                await context.send('üö´ –í–≤–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω.', {
                    keyboard: keyboard.build(current_keyboard)
                })
                return resolve(null)
            }
        })
    }
}

module.exports = InputManager