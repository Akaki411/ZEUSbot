const {Warning, Player} = require("../database/Models");
const keyboard = require("../variables/Keyboards")
const NameLibrary = require("../variables/NameLibrary")
const api = require("../middleware/API")
const Data = require("../models/CacheData")

class OutputManager
{
    async Timeout(time)
    {
        return new Promise(async (resolve) => {
            setTimeout(() => {
                return resolve()
            }, time * 1000)
        })
    }

    async GetUserWarnings(adminID, userID)
    {
        return new Promise(async (resolve) => {
            try
            {
                const warnings = await Warning.findAll({where: {userID: userID}})
                if(warnings.length === 0)
                {
                    await api.SendMessage(adminID, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                    return resolve()
                }
                let user = null
                let time = null
                let moder = null
                for(let i = 0; i < warnings.length; i++)
                {
                    moder = warnings[i].dataValues.moderID ? await Player.findOne({where: {id: warnings[i].dataValues.moderID}}) : null
                    user = await Player.findOne({where: {id: warnings[i].dataValues.id}})
                    time = new Date(warnings[i].dataValues.createdAt)
                    time.setDate(time.getDate() + warnings[i].dataValues.time)
                    await api.api.messages.send({
                        user_id: adminID,
                        random_id: Math.round(Math.random() * 100000),
                        message: `‚ö† –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ—Ç ${NameLibrary.ParseDateTime(warnings[i].dataValues.createdAt)}, –≤—ã–¥–∞–Ω${moder ? ` –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º *id${moder.dataValues.id}(${moder.dataValues.nick})` : ""} –Ω–∞ ${warnings[i].dataValues.time} –¥–Ω–µ–π (–¥–æ ${NameLibrary.ParseDateTime(time)}):\n\n–ü—Ä–∏—á–∏–Ω–∞: ${warnings[i].dataValues.reason}\n\n–û–ø–∏—Å–∞–Ω–∏–µ: ${warnings[i].dataValues.explanation}`,
                        attachment: warnings[i].dataValues.proofImage,
                        keyboard: keyboard.build([[keyboard.appealCallbackButton({command: "appeal_warning", item: warnings[i].dataValues.id})], [keyboard.hideCallbackButton()]]).inline()
                    })
                    await this.Timeout(0.5)
                }
                return resolve()
            }
            catch (e)
            {
                let context = {
                    player: {
                        id: adminID,
                        nick: adminID
                    }
                }
                await api.SendLogs(context, "OutputManager/GetUserWarnings", e)
            }
        })
    }

    async WelcomeMessage(context)
    {
        return new Promise(async (resolve) => {
            try
            {
                let text = "üéâ %–∏–º—è%, –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º —Ç–µ–±—è –≤ –Ω–∞—à–µ–º –ø—Ä–æ–µ–∫—Ç–µ! \n" +
                    "\n" +
                    "–í —á–µ–º —Å—É—Ç—å –ø—Ä–æ–µ–∫—Ç–∞? \n" +
                    "\n" +
                    "üåç –ü—Ä–æ–µ–∫—Ç –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –∏–∑ —Å–µ–±—è –∞–Ω—Ç–∏—á–Ω—ã–π –º–∏—Ä 3 –≤–µ–∫–∞ –¥–æ –Ω–∞—à–µ–π —ç—Ä—ã, –Ω–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–π –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–º–∏ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–∞–º–∏ (—Ñ—Ä–∞–∫—Ü–∏—è–º–∏), —É –∫–∞–∂–¥–æ–π —Ñ—Ä–∞–∫—Ü–∏–∏ –µ—Å—Ç—å –æ–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–∞—Ç–æ–≤, —Å–≤–æ—è —ç–∫–æ–Ω–æ–º–∏–∫–∞ –∏ –≤–∑–∞–∏–º–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å —Å–æ—Å–µ–¥–Ω–∏–º–∏ —Ñ—Ä–∞–∫—Ü–∏—è–º–∏.\n" +
                    "\n" +
                    "üë§ –í—ã, –∫–∞–∫ –∏–≥—Ä–æ–∫, –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞, –ø—Ä–∏–Ω—è—Ç—å –≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ –æ–¥–Ω–æ–π –∏–∑ —Ñ—Ä–∞–∫—Ü–∏–π, –ø–æ—Å–ª–µ —á–µ–≥–æ –≤–∞–º —Å—Ç–∞–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–æ–±—ã—á–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ —ç—Ç–æ–π —Ñ—Ä–∞–∫—Ü–∏–∏, —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ —á–∞—Å—Ç–Ω—ã—Ö –ø–æ—Å—Ç—Ä–æ–µ–∫ –∏ –≤–æ–∑–º–æ–∂–Ω–æ –¥–∞–∂–µ —Å–º–æ–∂–µ—Ç–µ –∑–∞–Ω—è—Ç—å –æ–¥–Ω—É –∏–∑ —Ä—É–∫–æ–≤–æ–¥—è—â–∏–π –¥–æ–ª–∂–Ω–æ—Å—Ç–µ–π.\n" +
                    "\n" +
                    "ü§ñ –°–µ—Ä–¥—Ü–µ –ø—Ä–æ–µ–∫—Ç–∞ ‚Äì –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤–æ –≤—Å–µ—Ö —á–∞—Ç–∞—Ö –∏ –ø–æ–∑–≤–æ–ª—è–µ—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å –∏–≥—Ä–æ–≤—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—ã –≤ –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö —á–∞—Ç–∞—Ö –∏–ª–∏ –õ–° –±–æ—Ç–∞.\n"
                let name = await api.GetUserData(context.player.id)
                text = text.replace("%–∏–º—è%", name.first_name)
                await context.send(text)
                const countries = Data.countries.filter(key => {
                    return key !== undefined
                })
                const pages = []
                for(let i = 0; i < Math.ceil(countries.length/5); i++)
                {
                    pages.push(countries.slice((i * 5), (i * 5) + 5))
                }
                for(let i = 0; i < pages.length; i++)
                {
                    await context.send(`–§—Ä–∞–∫—Ü–∏–∏ ${i + 1}-—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞:`, {
                        template: `{
                        "type": "carousel",
                        "elements": [
                            ${pages[i].map(key => {
                                    if(key)
                                    {
                                        return JSON.stringify({
                                            title: key.name,
                                            description: key.description.slice(0,75),
                                            photo_id: key.photoURL.replace("photo", ""),
                                            action: {
                                                type: "open_link",
                                                link: "https://vk.com/public" + key.groupID
                                            },
                                            buttons: [
                                                {
                                                    action: {
                                                        type: "open_link",
                                                        link: "https://vk.com/public" + key.groupID,
                                                        label: "üèõ –ü–µ—Ä–µ–π—Ç–∏ –≤ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ"
                                                    }
                                                },
                                                {
                                                    action: {
                                                        type: "text",
                                                        label: "üí¨ –ü–æ–∫–∞–∑–∞—Ç—å —á–∞—Ç—ã",
                                                        payload: JSON.stringify({
                                                            type: "show_chat",
                                                            countryID: key.id
                                                        })
                                                    },
                                                }
                                            ]
                                        })
                                    }
                                })}
                            ]
                        }`
                    })
                    await this.Timeout(0.25)
                }
                return resolve()
            }
            catch (e)
            {
                console.log(e)
                //await api.SendLogs(context, "OutputManager/WelcomeMessage", e)
            }
        })
    }
}

module.exports = new OutputManager()