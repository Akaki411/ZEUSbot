const {Warning, Player} = require("../database/Models");
const keyboard = require("../variables/Keyboards")
const NameLibrary = require("../variables/NameLibrary")
const api = require("../middleware/API")
const Data = require("../models/CacheData")

class OutputManager
{
    async Timeout(time)
    {
        return new Promise(async (resolve) => {
            setTimeout(() => {
                return resolve()
            }, time * 1000)
        })
    }

    async GetUserWarnings(adminID, userID)
    {
        return new Promise(async (resolve) => {
            try
            {
                const warnings = await Warning.findAll({where: {userID: userID}})
                if(warnings.length === 0)
                {
                    await api.SendMessage(adminID, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                    return resolve()
                }
                let user = null
                let time = null
                let moder = null
                for(let i = 0; i < warnings.length; i++)
                {
                    moder = warnings[i].dataValues.moderID ? await Player.findOne({where: {id: warnings[i].dataValues.moderID}}) : null
                    user = await Player.findOne({where: {id: warnings[i].dataValues.id}})
                    time = new Date(warnings[i].dataValues.createdAt)
                    time.setDate(time.getDate() + warnings[i].dataValues.time)
                    await api.api.messages.send({
                        user_id: adminID,
                        random_id: Math.round(Math.random() * 100000),
                        message: `‚ö† –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ—Ç ${NameLibrary.ParseDateTime(warnings[i].dataValues.createdAt)}, –≤—ã–¥–∞–Ω${moder ? ` –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º *id${moder.dataValues.id}(${moder.dataValues.nick})` : ""} –Ω–∞ ${warnings[i].dataValues.time} –¥–Ω–µ–π (–¥–æ ${NameLibrary.ParseDateTime(time)}):\n\n–ü—Ä–∏—á–∏–Ω–∞: ${warnings[i].dataValues.reason}\n\n–û–ø–∏—Å–∞–Ω–∏–µ: ${warnings[i].dataValues.explanation}`,
                        attachment: warnings[i].dataValues.proofImage,
                        keyboard: keyboard.build([[keyboard.appealCallbackButton({command: "appeal_warning", item: warnings[i].dataValues.id})], [keyboard.hideCallbackButton()]]).inline()
                    })
                    await this.Timeout(0.5)
                }
                return resolve()
            }
            catch (e)
            {
                let context = {
                    player: {
                        id: adminID,
                        nick: adminID
                    }
                }
                await api.SendLogs(context, "OutputManager/GetUserWarnings", e)
            }
        })
    }

    async GetCountryCarousel(context)
    {
        return new Promise(async (resolve) => {
            try
            {
                const countries = Data.countries.filter(key => {
                    return key !== undefined
                })
                const pages = []
                for(let i = 0; i < Math.ceil(countries.length/5); i++)
                {
                    pages.push(countries.slice((i * 5), (i * 5) + 5))
                }
                for(let i = 0; i < pages.length; i++)
                {
                    await context.send(`–§—Ä–∞–∫—Ü–∏–∏ ${i + 1}-—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞:`, {
                        template: `{
                            "type": "carousel",
                            "elements": [
                                ${pages[i].map(key => {
                                if(key)
                                {
                                    return JSON.stringify({
                                        title: key.name,
                                        description: key.description.slice(0,75),
                                        photo_id: key.photoURL.replace("photo", ""),
                                        action: {
                                            type: "open_link",
                                            link: "https://vk.com/public" + key.groupID
                                        },
                                        buttons: [
                                            {
                                                action: {
                                                    type: "open_link",
                                                    link: "https://vk.com/public" + key.groupID,
                                                    label: "üèõ –ü–µ—Ä–µ–π—Ç–∏ –≤ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ"
                                                }
                                            },
                                            {
                                                action: {
                                                    type: "text",
                                                    label: "üí¨ –ü–æ–∫–∞–∑–∞—Ç—å —á–∞—Ç—ã",
                                                    payload: JSON.stringify({
                                                        type: "show_chat",
                                                        countryID: key.id
                                                    })
                                                },
                                            }
                                        ]
                                    })
                                }
                            })}
                            ]
                        }`})
                    await this.Timeout(0.25)
                }
                return resolve()
            }
            catch (e)
            {
                await api.SendLogs(context, "OutputManager/WelcomeMessage", e)
            }
        })
    }

    async WelcomeMessage(context)
    {
        return new Promise(async (resolve) => {
            try
            {
                let text = "üéâ %–∏–º—è%, –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º —Ç–µ–±—è –≤ –Ω–∞—à–µ–º –ø—Ä–æ–µ–∫—Ç–µ! \n" +
                    "\n" +
                    "–í —á–µ–º —Å—É—Ç—å –ø—Ä–æ–µ–∫—Ç–∞? \n" +
                    "\n" +
                    "üåç –ü—Ä–æ–µ–∫—Ç –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –∏–∑ —Å–µ–±—è –∞–Ω—Ç–∏—á–Ω—ã–π –º–∏—Ä 3 –≤–µ–∫–∞ –¥–æ –Ω–∞—à–µ–π —ç—Ä—ã, –Ω–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–π –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–º–∏ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–∞–º–∏ (—Ñ—Ä–∞–∫—Ü–∏—è–º–∏), —É –∫–∞–∂–¥–æ–π —Ñ—Ä–∞–∫—Ü–∏–∏ –µ—Å—Ç—å –æ–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–∞—Ç–æ–≤, —Å–≤–æ—è —ç–∫–æ–Ω–æ–º–∏–∫–∞ –∏ –≤–∑–∞–∏–º–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å —Å–æ—Å–µ–¥–Ω–∏–º–∏ —Ñ—Ä–∞–∫—Ü–∏—è–º–∏.\n" +
                    "\n" +
                    "üë§ –í—ã, –∫–∞–∫ –∏–≥—Ä–æ–∫, –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞, –ø—Ä–∏–Ω—è—Ç—å –≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ –æ–¥–Ω–æ–π –∏–∑ —Ñ—Ä–∞–∫—Ü–∏–π, –ø–æ—Å–ª–µ —á–µ–≥–æ –≤–∞–º —Å—Ç–∞–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–æ–±—ã—á–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ —ç—Ç–æ–π —Ñ—Ä–∞–∫—Ü–∏–∏, —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ —á–∞—Å—Ç–Ω—ã—Ö –ø–æ—Å—Ç—Ä–æ–µ–∫ –∏ –≤–æ–∑–º–æ–∂–Ω–æ –¥–∞–∂–µ —Å–º–æ–∂–µ—Ç–µ –∑–∞–Ω—è—Ç—å –æ–¥–Ω—É –∏–∑ —Ä—É–∫–æ–≤–æ–¥—è—â–∏–π –¥–æ–ª–∂–Ω–æ—Å—Ç–µ–π.\n" +
                    "\n" +
                    "ü§ñ –°–µ—Ä–¥—Ü–µ –ø—Ä–æ–µ–∫—Ç–∞ ‚Äì –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤–æ –≤—Å–µ—Ö —á–∞—Ç–∞—Ö –∏ –ø–æ–∑–≤–æ–ª—è–µ—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å –∏–≥—Ä–æ–≤—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—ã –≤ –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö —á–∞—Ç–∞—Ö –∏–ª–∏ –õ–° –±–æ—Ç–∞.\n"
                let name = await api.GetUserData(context.player.id)
                text = text.replace("%–∏–º—è%", name.first_name)
                await context.send(text, {keyboard: keyboard.build([[keyboard.countryListButton]]).inline()})
                await context.send("üì£ –í –Ω–∞—à–µ–º –ø—Ä–æ–µ–∫—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç —Å–≤–æ–∏ –ø—Ä–∞–≤–∏–ª–∞, –∏—Ö –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –≤ –≥—Ä—É–ø–ø–µ –∏–ª–∏ –ø–æ–ø—Ä–æ—Å–∏—Ç—å –±–æ—Ç–∞ –ø–æ–∫–∞–∑–∞—Ç—å –≤—ã–¥–µ—Ä–∂–∫—É –∏–∑ –Ω–∏—Ö —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É \"—Å—Ç–∞—Ç—å—è [–Ω–æ–º–µ—Ä —Å—Ç–∞—Ç—å–∏]\", –æ—Å–æ–±–µ–Ω–Ω–æ —É–¥–µ–ª–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ 24-–π —Å—Ç–∞—Ç—å–µ.\n\n‚ùó –¢–∞–∫ –∂–µ –≤ –∫–∞–∂–¥–æ–π —Ñ—Ä–∞–∫—Ü–∏–π –µ—Å—Ç—å —Å–≤–æ–π –º–æ–¥–µ—Ä–∞—Ç–æ—Ä, –∫–æ—Ç–æ—Ä—ã–µ —Å–ª–µ–¥—è—Ç –∑–∞ —á–∞—Ç–∞–º–∏ –∏ –ø–æ–º–æ–≥–∞—é—Ç –Ω–æ–≤–∏—á–∫–∞–º, –ø–æ—ç—Ç–æ–º—É –µ—Å–ª–∏ —É –≤–∞—Å –ø–æ—è–≤–∏–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã - –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –Ω–∏–º.")
                text = "üìé –í–æ—Ç –Ω–∞—à–∏ —Å—Ç—Ä–∞–∂–∏ –ø–æ—Ä—è–¥–∫–∞:\n\n"
                for(const country of Data.countries)
                {
                    if(country)
                    {
                        text += country.GetName() + " - " +  (country.moderID ? await api.GetName(country.moderID) : "–Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω") + "\n"
                    }
                }
                await context.send(text)
                await context.send("‚Åâ –¢–∞–∫ –∂–µ, –µ—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –æ —Ç–æ–º, –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º - —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è —ç—Ç–æ–≥–æ —É –Ω–∞—Å –µ—Å—Ç—å –æ—Ç–¥–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç—å—è, –≤ –Ω–µ–π –≤—Å–µ –æ–ø–∏—Å–∞–Ω–æ –ø–æ–¥—Ä–æ–±–Ω–æ –∏ —Å –∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏—è–º–∏\n" + Data.variables["articleLink"])
                await context.send("‚úè –í—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤–∞—à–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –ø–æ –Ω–∞–∂–∞—Ç–∏—é –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, –≤–≤–µ–¥—è –∫–æ–º–∞–Ω–¥—É \"–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è\" –∏–ª–∏ –ø–µ—Ä–µ–π–¥—è –≤ –º–µ–Ω—é –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤", {keyboard: keyboard.build([[keyboard.registrationButton]]).inline()})
                return resolve()
            }
            catch (e)
            {
                await api.SendLogs(context, "OutputManager/WelcomeMessage", e)
            }
        })
    }

    async GetDayActiveMessage(params) // {command, app, platform}
    {
        try
        {
            let temp, country, request = ""
            for(const key of Data.countries)
            {
                if(key?.tags)
                {
                    temp = new RegExp(key.tags)
                    if(params.command.match(temp))
                    {
                        country = key
                        break
                    }
                }
            }
            if(!country)
            {
                let request = "üî∞ –ê–∫—Ç–∏–≤ —Ñ—Ä–∞–∫—Ü–∏–π:\n\n"
                let activeCountries = []
                for(let i = 0; i < Data.countries.length; i++)
                {
                    if(Data.countries[i])
                    {
                        activeCountries.push([Data.countries[i].active, i])
                    }
                }
                for (let j = activeCountries.length - 1; j > 0; j--)
                {
                    for (let i = 0; i < j; i++)
                    {
                        if (activeCountries[i][0] < activeCountries[i + 1][0])
                        {
                            let temp = activeCountries[i];
                            activeCountries[i] = activeCountries[i + 1];
                            activeCountries[i + 1] = temp;
                        }
                    }
                }
                for(let i = 0; i < activeCountries.length; i++)
                {
                    if(Data.countries[activeCountries[i][1]])
                    {
                        request += `${Data.countries[activeCountries[i][1]].name}\n`
                        request +=  `${Data.countries[activeCountries[i][1]].chatID ? `‚öí –ê–∫—Ç–∏–≤ –∑–∞ —Å–µ–≥–æ–¥–Ω—è: ${Data.countries[activeCountries[i][1]].active} —Å–æ–æ–±—â–µ–Ω–∏–π` : "‚ö† –ß–∞—Ç –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω"}\n`
                        request += `üí™ –†–µ–π—Ç–∏–Ω–≥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: ${Data.countries[activeCountries[i][1]].rating}\n`
                        request += `üî¥ –ü–æ–ª—É—á–µ–Ω–æ –≤–∞—Ä–Ω–æ–≤: ${Data.countries[activeCountries[i][1]].warnings}\n\n`
                    }
                }
                return {request: request, short: false}
            }
            else
            {
                request += `${country.GetName(params.platform === "IOS", params.app)}\n`
                request +=  `${country.chatID ? `‚öí –ê–∫—Ç–∏–≤ –∑–∞ —Å–µ–≥–æ–¥–Ω—è: ${country.active} —Å–æ–æ–±—â–µ–Ω–∏–π` : "‚ö† –ß–∞—Ç –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω"}\n`
                request += `üí™ –†–µ–π—Ç–∏–Ω–≥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: ${country.rating}\n`
                request += `üî¥ –ü–æ–ª—É—á–µ–Ω–æ –≤–∞—Ä–Ω–æ–≤: ${country.warnings}`
                return {request: request, short: true}
            }
        }
        catch (e)
        {
            return "–û—à–∏–±–∫–∞: " + e.message
        }
    }
}

module.exports = new OutputManager()